{"version":3,"file":"index.js","sources":["src/spine-core/Utils.js","src/spine-core/attachments/Attachment.js","src/spine-core/Animation.js","src/spine-core/AnimationState.js","src/spine-core/AnimationStateData.js","src/spine-core/attachments/BoundingBoxAttachment.js","src/spine-core/attachments/ClippingAttachment.js","src/spine-core/Texture.js","src/spine-core/TextureAtlas.js","src/spine-core/attachments/MeshAttachment.js","src/spine-core/attachments/PathAttachment.js","src/spine-core/attachments/PointAttachment.js","src/spine-core/attachments/RegionAttachment.js","src/spine-core/AtlasAttachmentLoader.js","src/spine-core/BoneData.js","src/spine-core/Bone.js","src/spine-core/ConstraintData.js","src/spine-core/AssetManagerBase.js","src/spine-core/Event.js","src/spine-core/EventData.js","src/spine-core/IkConstraint.js","src/spine-core/IkConstraintData.js","src/spine-core/PathConstraintData.js","src/spine-core/PathConstraint.js","src/spine-core/Slot.js","src/spine-core/TransformConstraint.js","src/spine-core/Skeleton.js","src/spine-core/SkeletonData.js","src/spine-core/Skin.js","src/spine-core/SlotData.js","src/spine-core/TransformConstraintData.js","src/spine-core/SkeletonBinary.js","src/spine-core/SkeletonJson.js","src/spine-core/polyfills.js","src/spine-core/vertexeffects/SwirlEffect.js","src/spine-canvas/SkeletonRenderer.js","src/spine-canvas/CanvasTexture.js","src/spine-canvas/AssetManager.js","src/spine.js"],"sourcesContent":["/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nexport class IntSet {\n    constructor() {\n        this.array = new Array();\n    }\n    add(value) {\n        let contains = this.contains(value);\n        this.array[value | 0] = value | 0;\n        return !contains;\n    }\n    contains(value) {\n        return this.array[value | 0] != undefined;\n    }\n    remove(value) {\n        this.array[value | 0] = undefined;\n    }\n    clear() {\n        this.array.length = 0;\n    }\n}\nexport class StringSet {\n    constructor() {\n        this.entries = {};\n        this.size = 0;\n    }\n    add(value) {\n        let contains = this.entries[value];\n        this.entries[value] = true;\n        if (!contains) {\n            this.size++;\n            return true;\n        }\n        return false;\n    }\n    addAll(values) {\n        let oldSize = this.size;\n        for (var i = 0, n = values.length; i < n; i++)\n            this.add(values[i]);\n        return oldSize != this.size;\n    }\n    contains(value) {\n        return this.entries[value];\n    }\n    clear() {\n        this.entries = {};\n        this.size = 0;\n    }\n}\nexport class Color {\n    constructor(r = 0, g = 0, b = 0, a = 0) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    set(r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n        return this.clamp();\n    }\n    setFromColor(c) {\n        this.r = c.r;\n        this.g = c.g;\n        this.b = c.b;\n        this.a = c.a;\n        return this;\n    }\n    setFromString(hex) {\n        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n        this.r = parseInt(hex.substr(0, 2), 16) / 255;\n        this.g = parseInt(hex.substr(2, 2), 16) / 255;\n        this.b = parseInt(hex.substr(4, 2), 16) / 255;\n        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n        return this;\n    }\n    add(r, g, b, a) {\n        this.r += r;\n        this.g += g;\n        this.b += b;\n        this.a += a;\n        return this.clamp();\n    }\n    clamp() {\n        if (this.r < 0)\n            this.r = 0;\n        else if (this.r > 1)\n            this.r = 1;\n        if (this.g < 0)\n            this.g = 0;\n        else if (this.g > 1)\n            this.g = 1;\n        if (this.b < 0)\n            this.b = 0;\n        else if (this.b > 1)\n            this.b = 1;\n        if (this.a < 0)\n            this.a = 0;\n        else if (this.a > 1)\n            this.a = 1;\n        return this;\n    }\n    static rgba8888ToColor(color, value) {\n        color.r = ((value & 0xff000000) >>> 24) / 255;\n        color.g = ((value & 0x00ff0000) >>> 16) / 255;\n        color.b = ((value & 0x0000ff00) >>> 8) / 255;\n        color.a = ((value & 0x000000ff)) / 255;\n    }\n    static rgb888ToColor(color, value) {\n        color.r = ((value & 0x00ff0000) >>> 16) / 255;\n        color.g = ((value & 0x0000ff00) >>> 8) / 255;\n        color.b = ((value & 0x000000ff)) / 255;\n    }\n    static fromString(hex) {\n        return new Color().setFromString(hex);\n    }\n}\nColor.WHITE = new Color(1, 1, 1, 1);\nColor.RED = new Color(1, 0, 0, 1);\nColor.GREEN = new Color(0, 1, 0, 1);\nColor.BLUE = new Color(0, 0, 1, 1);\nColor.MAGENTA = new Color(1, 0, 1, 1);\nexport class MathUtils {\n    static clamp(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    }\n    static cosDeg(degrees) {\n        return Math.cos(degrees * MathUtils.degRad);\n    }\n    static sinDeg(degrees) {\n        return Math.sin(degrees * MathUtils.degRad);\n    }\n    static signum(value) {\n        return value > 0 ? 1 : value < 0 ? -1 : 0;\n    }\n    static toInt(x) {\n        return x > 0 ? Math.floor(x) : Math.ceil(x);\n    }\n    static cbrt(x) {\n        let y = Math.pow(Math.abs(x), 1 / 3);\n        return x < 0 ? -y : y;\n    }\n    static randomTriangular(min, max) {\n        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n    }\n    static randomTriangularWith(min, max, mode) {\n        let u = Math.random();\n        let d = max - min;\n        if (u <= (mode - min) / d)\n            return min + Math.sqrt(u * d * (mode - min));\n        return max - Math.sqrt((1 - u) * d * (max - mode));\n    }\n    static isPowerOfTwo(value) {\n        return value && (value & (value - 1)) === 0;\n    }\n}\nMathUtils.PI = 3.1415927;\nMathUtils.PI2 = MathUtils.PI * 2;\nMathUtils.radiansToDegrees = 180 / MathUtils.PI;\nMathUtils.radDeg = MathUtils.radiansToDegrees;\nMathUtils.degreesToRadians = MathUtils.PI / 180;\nMathUtils.degRad = MathUtils.degreesToRadians;\nexport class Interpolation {\n    apply(start, end, a) {\n        return start + (end - start) * this.applyInternal(a);\n    }\n}\nexport class Pow extends Interpolation {\n    constructor(power) {\n        super();\n        this.power = 2;\n        this.power = power;\n    }\n    applyInternal(a) {\n        if (a <= 0.5)\n            return Math.pow(a * 2, this.power) / 2;\n        return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n    }\n}\nexport class PowOut extends Pow {\n    constructor(power) {\n        super(power);\n    }\n    applyInternal(a) {\n        return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n    }\n}\nexport class Utils {\n    static arrayCopy(source, sourceStart, dest, destStart, numElements) {\n        for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n            dest[j] = source[i];\n        }\n    }\n    static arrayFill(array, fromIndex, toIndex, value) {\n        for (let i = fromIndex; i < toIndex; i++)\n            array[i] = value;\n    }\n    static setArraySize(array, size, value = 0) {\n        let oldSize = array.length;\n        if (oldSize == size)\n            return array;\n        array.length = size;\n        if (oldSize < size) {\n            for (let i = oldSize; i < size; i++)\n                array[i] = value;\n        }\n        return array;\n    }\n    static ensureArrayCapacity(array, size, value = 0) {\n        if (array.length >= size)\n            return array;\n        return Utils.setArraySize(array, size, value);\n    }\n    static newArray(size, defaultValue) {\n        let array = new Array(size);\n        for (let i = 0; i < size; i++)\n            array[i] = defaultValue;\n        return array;\n    }\n    static newFloatArray(size) {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Float32Array(size);\n        else {\n            let array = new Array(size);\n            for (let i = 0; i < array.length; i++)\n                array[i] = 0;\n            return array;\n        }\n    }\n    static newShortArray(size) {\n        if (Utils.SUPPORTS_TYPED_ARRAYS)\n            return new Int16Array(size);\n        else {\n            let array = new Array(size);\n            for (let i = 0; i < array.length; i++)\n                array[i] = 0;\n            return array;\n        }\n    }\n    static toFloatArray(array) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n    }\n    static toSinglePrecision(value) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n    }\n    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n    static webkit602BugfixHelper(alpha, blend) {\n    }\n    static contains(array, element, identity = true) {\n        for (var i = 0; i < array.length; i++)\n            if (array[i] == element)\n                return true;\n        return false;\n    }\n    static enumValue(type, name) {\n        return type[name[0].toUpperCase() + name.slice(1)];\n    }\n}\nUtils.SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== \"undefined\";\nexport class DebugUtils {\n    static logBones(skeleton) {\n        for (let i = 0; i < skeleton.bones.length; i++) {\n            let bone = skeleton.bones[i];\n            console.log(bone.data.name + \", \" + bone.a + \", \" + bone.b + \", \" + bone.c + \", \" + bone.d + \", \" + bone.worldX + \", \" + bone.worldY);\n        }\n    }\n}\nexport class Pool {\n    constructor(instantiator) {\n        this.items = new Array();\n        this.instantiator = instantiator;\n    }\n    obtain() {\n        return this.items.length > 0 ? this.items.pop() : this.instantiator();\n    }\n    free(item) {\n        if (item.reset)\n            item.reset();\n        this.items.push(item);\n    }\n    freeAll(items) {\n        for (let i = 0; i < items.length; i++)\n            this.free(items[i]);\n    }\n    clear() {\n        this.items.length = 0;\n    }\n}\nexport class Vector2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    length() {\n        let x = this.x;\n        let y = this.y;\n        return Math.sqrt(x * x + y * y);\n    }\n    normalize() {\n        let len = this.length();\n        if (len != 0) {\n            this.x /= len;\n            this.y /= len;\n        }\n        return this;\n    }\n}\nexport class TimeKeeper {\n    constructor() {\n        this.maxDelta = 0.064;\n        this.framesPerSecond = 0;\n        this.delta = 0;\n        this.totalTime = 0;\n        this.lastTime = Date.now() / 1000;\n        this.frameCount = 0;\n        this.frameTime = 0;\n    }\n    update() {\n        let now = Date.now() / 1000;\n        this.delta = now - this.lastTime;\n        this.frameTime += this.delta;\n        this.totalTime += this.delta;\n        if (this.delta > this.maxDelta)\n            this.delta = this.maxDelta;\n        this.lastTime = now;\n        this.frameCount++;\n        if (this.frameTime > 1) {\n            this.framesPerSecond = this.frameCount / this.frameTime;\n            this.frameTime = 0;\n            this.frameCount = 0;\n        }\n    }\n}\nexport class WindowedMean {\n    constructor(windowSize = 32) {\n        this.addedValues = 0;\n        this.lastValue = 0;\n        this.mean = 0;\n        this.dirty = true;\n        this.values = new Array(windowSize);\n    }\n    hasEnoughData() {\n        return this.addedValues >= this.values.length;\n    }\n    addValue(value) {\n        if (this.addedValues < this.values.length)\n            this.addedValues++;\n        this.values[this.lastValue++] = value;\n        if (this.lastValue > this.values.length - 1)\n            this.lastValue = 0;\n        this.dirty = true;\n    }\n    getMean() {\n        if (this.hasEnoughData()) {\n            if (this.dirty) {\n                let mean = 0;\n                for (let i = 0; i < this.values.length; i++)\n                    mean += this.values[i];\n                this.mean = mean / this.values.length;\n                this.dirty = false;\n            }\n            return this.mean;\n        }\n        return 0;\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Utils } from \"../Utils\";\n/** The base class for all attachments. */\nexport class Attachment {\n    constructor(name) {\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n    }\n}\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * {@link Slot#deform}. */\nexport class VertexAttachment extends Attachment {\n    constructor(name) {\n        super(name);\n        /** The unique ID for this attachment. */\n        this.id = VertexAttachment.nextID++;\n        /** The maximum number of world vertex values that can be output by\n         * {@link #computeWorldVertices()} using the `count` parameter. */\n        this.worldVerticesLength = 0;\n        /** Deform keys for the deform attachment are also applied to this attachment. May be null if no deform keys should be applied. */\n        this.deformAttachment = this;\n    }\n    /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\n     * not empty, it is used to deform the vertices.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\n     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n     *           `stride` / 2.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\n    computeWorldVertices(slot, start, count, worldVertices, offset, stride) {\n        count = offset + (count >> 1) * stride;\n        let skeleton = slot.bone.skeleton;\n        let deformArray = slot.deform;\n        let vertices = this.vertices;\n        let bones = this.bones;\n        if (!bones) {\n            if (deformArray.length > 0)\n                vertices = deformArray;\n            let bone = slot.bone;\n            let x = bone.worldX;\n            let y = bone.worldY;\n            let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n            for (let v = start, w = offset; w < count; v += 2, w += stride) {\n                let vx = vertices[v], vy = vertices[v + 1];\n                worldVertices[w] = vx * a + vy * b + x;\n                worldVertices[w + 1] = vx * c + vy * d + y;\n            }\n            return;\n        }\n        let v = 0, skip = 0;\n        for (let i = 0; i < start; i += 2) {\n            let n = bones[v];\n            v += n + 1;\n            skip += n;\n        }\n        let skeletonBones = skeleton.bones;\n        if (deformArray.length == 0) {\n            for (let w = offset, b = skip * 3; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n        else {\n            let deform = deformArray;\n            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n                let wx = 0, wy = 0;\n                let n = bones[v++];\n                n += v;\n                for (; v < n; v++, b += 3, f += 2) {\n                    let bone = skeletonBones[bones[v]];\n                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx;\n                worldVertices[w + 1] = wy;\n            }\n        }\n    }\n    /** Does not copy id (generated) or name (set on construction). **/\n    copyTo(attachment) {\n        if (this.bones) {\n            attachment.bones = new Array(this.bones.length);\n            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n        }\n        else\n            attachment.bones = null;\n        if (this.vertices) {\n            attachment.vertices = Utils.newFloatArray(this.vertices.length);\n            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n        }\n        else\n            attachment.vertices = null;\n        attachment.worldVerticesLength = this.worldVerticesLength;\n        attachment.deformAttachment = this.deformAttachment;\n    }\n}\nVertexAttachment.nextID = 0;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXR0YWNobWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdHRhY2htZW50cy9BdHRhY2htZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0VBMkIrRTtBQUcvRSxPQUFPLEVBQW1CLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsRCwwQ0FBMEM7QUFDMUMsTUFBTSxPQUFnQixVQUFVO0lBRy9CLFlBQWEsSUFBWTtRQUN4QixJQUFJLENBQUMsSUFBSTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixDQUFDO0NBR0Q7QUFFRDswQkFDMEI7QUFDMUIsTUFBTSxPQUFnQixnQkFBaUIsU0FBUSxVQUFVO0lBdUJ4RCxZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBckJiLHlDQUF5QztRQUN6QyxPQUFFLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUM7UUFZL0I7MEVBQ2tFO1FBQ2xFLHdCQUFtQixHQUFHLENBQUMsQ0FBQztRQUV4QixrSUFBa0k7UUFDbEkscUJBQWdCLEdBQXFCLElBQUksQ0FBQztJQUkxQyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OEZBVTBGO0lBQzFGLG9CQUFvQixDQUFFLElBQVUsRUFBRSxLQUFhLEVBQUUsS0FBYSxFQUFFLGFBQThCLEVBQUUsTUFBYyxFQUFFLE1BQWM7UUFDN0gsS0FBSyxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDdkMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM5QixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMs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","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment\";\nimport { StringSet, Utils, MathUtils } from \"./Utils\";\n/** A simple container for a list of timelines and a name. */\nexport class Animation {\n    constructor(name, timelines, duration) {\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n        this.setTimelines(timelines);\n        this.duration = duration;\n    }\n    setTimelines(timelines) {\n        if (!timelines)\n            throw new Error(\"timelines cannot be null.\");\n        this.timelines = timelines;\n        this.timelineIds = new StringSet();\n        for (var i = 0; i < timelines.length; i++)\n            this.timelineIds.addAll(timelines[i].getPropertyIds());\n    }\n    hasTimeline(ids) {\n        for (let i = 0; i < ids.length; i++)\n            if (this.timelineIds.contains(ids[i]))\n                return true;\n        return false;\n    }\n    /** Applies all the animation's timelines to the specified skeleton.\n     *\n     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n     * @param loop If true, the animation repeats after {@link #getDuration()}.\n     * @param events May be null to ignore fired events. */\n    apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        if (loop && this.duration != 0) {\n            time %= this.duration;\n            if (lastTime > 0)\n                lastTime %= this.duration;\n        }\n        let timelines = this.timelines;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n    }\n}\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n * < 1.\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixBlend;\n(function (MixBlend) {\n    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n     * value is set. */\n    MixBlend[MixBlend[\"setup\"] = 0] = \"setup\";\n    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n     * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n     * {@link AttachmentTimeline}, use the setup value before the first key.\n     *\n     * `first` is intended for the first animations applied, not for animations layered on top of those. */\n    MixBlend[MixBlend[\"first\"] = 1] = \"first\";\n    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n     * kept until the first key).\n     *\n     * `replace` is intended for animations layered on top of others, not for the first animations applied. */\n    MixBlend[MixBlend[\"replace\"] = 2] = \"replace\";\n    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n     * (the current value is kept until the first key).\n     *\n     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n     * the property values will increase continually. */\n    MixBlend[MixBlend[\"add\"] = 3] = \"add\";\n})(MixBlend || (MixBlend = {}));\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n * mixing in toward 1 (the timeline's value).\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixDirection;\n(function (MixDirection) {\n    MixDirection[MixDirection[\"mixIn\"] = 0] = \"mixIn\";\n    MixDirection[MixDirection[\"mixOut\"] = 1] = \"mixOut\";\n})(MixDirection || (MixDirection = {}));\nconst Property = {\n    rotate: 0,\n    x: 1,\n    y: 2,\n    scaleX: 3,\n    scaleY: 4,\n    shearX: 5,\n    shearY: 6,\n    rgb: 7,\n    alpha: 8,\n    rgb2: 9,\n    attachment: 10,\n    deform: 11,\n    event: 12,\n    drawOrder: 13,\n    ikConstraint: 14,\n    transformConstraint: 15,\n    pathConstraintPosition: 16,\n    pathConstraintSpacing: 17,\n    pathConstraintMix: 18\n};\n/** The interface for all timelines. */\nexport class Timeline {\n    constructor(frameCount, propertyIds) {\n        this.propertyIds = propertyIds;\n        this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\n    }\n    getPropertyIds() {\n        return this.propertyIds;\n    }\n    getFrameEntries() {\n        return 1;\n    }\n    getFrameCount() {\n        return this.frames.length / this.getFrameEntries();\n    }\n    getDuration() {\n        return this.frames[this.frames.length - this.getFrameEntries()];\n    }\n    static search1(frames, time) {\n        let n = frames.length;\n        for (let i = 1; i < n; i++)\n            if (frames[i] > time)\n                return i - 1;\n        return n - 1;\n    }\n    static search(frames, time, step) {\n        let n = frames.length;\n        for (let i = step; i < n; i += step)\n            if (frames[i] > time)\n                return i - step;\n        return n - step;\n    }\n}\n/** The base class for timelines that use interpolation between key frame values. */\nexport class CurveTimeline extends Timeline {\n    constructor(frameCount, bezierCount, propertyIds) {\n        super(frameCount, propertyIds);\n        this.curves = Utils.newFloatArray(frameCount + bezierCount * 18 /*BEZIER_SIZE*/);\n        this.curves[frameCount - 1] = 1 /*STEPPED*/;\n    }\n    /** Sets the specified key frame to linear interpolation. */\n    setLinear(frame) {\n        this.curves[frame] = 0 /*LINEAR*/;\n    }\n    /** Sets the specified key frame to stepped interpolation. */\n    setStepped(frame) {\n        this.curves[frame] = 1 /*STEPPED*/;\n    }\n    /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\n     * than the actual number of Bezier curves. */\n    shrink(bezierCount) {\n        let size = this.getFrameCount() + bezierCount * 18 /*BEZIER_SIZE*/;\n        if (this.curves.length > size) {\n            let newCurves = Utils.newFloatArray(size);\n            Utils.arrayCopy(this.curves, 0, newCurves, 0, size);\n            this.curves = newCurves;\n        }\n    }\n    /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\n     * one curve per frame.\n     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\n     *           in the constructor), inclusive.\n     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n     * @param value The index of the value for this frame that this curve is used for.\n     * @param time1 The time for the first key.\n     * @param value1 The value for the first key.\n     * @param cx1 The time for the first Bezier handle.\n     * @param cy1 The value for the first Bezier handle.\n     * @param cx2 The time of the second Bezier handle.\n     * @param cy2 The value for the second Bezier handle.\n     * @param time2 The time for the second key.\n     * @param value2 The value for the second key. */\n    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n        let curves = this.curves;\n        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n        if (value == 0)\n            curves[frame] = 2 /*BEZIER*/ + i;\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\n        let x = time1 + dx, y = value1 + dy;\n        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n            curves[i] = x;\n            curves[i + 1] = y;\n            dx += ddx;\n            dy += ddy;\n            ddx += dddx;\n            ddy += dddy;\n            x += dx;\n            y += dy;\n        }\n    }\n    /** Returns the Bezier interpolated value for the specified time.\n     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\n    getBezierValue(time, frameIndex, valueOffset, i) {\n        let curves = this.curves;\n        if (curves[i] > time) {\n            let x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];\n            return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n        }\n        let n = i + 18 /*BEZIER_SIZE*/;\n        for (i += 2; i < n; i += 2) {\n            if (curves[i] >= time) {\n                let x = curves[i - 2], y = curves[i - 1];\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n            }\n        }\n        frameIndex += this.getFrameEntries();\n        let x = curves[n - 2], y = curves[n - 1];\n        return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\n    }\n}\nexport class CurveTimeline1 extends CurveTimeline {\n    constructor(frameCount, bezierCount, propertyId) {\n        super(frameCount, bezierCount, [propertyId]);\n    }\n    getFrameEntries() {\n        return 2 /*ENTRIES*/;\n    }\n    /** Sets the time and value for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */\n    setFrame(frame, time, value) {\n        frame <<= 1;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*VALUE*/] = value;\n    }\n    /** Returns the interpolated value for the specified time. */\n    getCurveValue(time) {\n        let frames = this.frames;\n        let i = frames.length - 2;\n        for (let ii = 2; ii <= i; ii += 2) {\n            if (frames[ii] > time) {\n                i = ii - 2;\n                break;\n            }\n        }\n        let curveType = this.curves[i >> 1];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i], value = frames[i + 1 /*VALUE*/];\n                return value + (time - before) / (frames[i + 2 /*ENTRIES*/] - before) * (frames[i + 2 /*ENTRIES*/ + 1 /*VALUE*/] - value);\n            case 1 /*STEPPED*/:\n                return frames[i + 1 /*VALUE*/];\n        }\n        return this.getBezierValue(time, i, 1 /*VALUE*/, curveType - 2 /*BEZIER*/);\n    }\n}\n/** The base class for a {@link CurveTimeline} which sets two properties. */\nexport class CurveTimeline2 extends CurveTimeline {\n    /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n     * @param propertyIds Unique identifiers for the properties the timeline modifies. */\n    constructor(frameCount, bezierCount, propertyId1, propertyId2) {\n        super(frameCount, bezierCount, [propertyId1, propertyId2]);\n    }\n    getFrameEntries() {\n        return 3 /*ENTRIES*/;\n    }\n    /** Sets the time and values for the specified frame.\n     * @param frame Between 0 and <code>frameCount</code>, inclusive.\n     * @param time The frame time in seconds. */\n    setFrame(frame, time, value1, value2) {\n        frame *= 3 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*VALUE1*/] = value1;\n        this.frames[frame + 2 /*VALUE2*/] = value2;\n    }\n}\n/** Changes a bone's local {@link Bone#rotation}. */\nexport class RotateTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.rotation = bone.data.rotation;\n                    return;\n                case MixBlend.first:\n                    bone.rotation += (bone.data.rotation - bone.rotation) * alpha;\n            }\n            return;\n        }\n        let r = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                bone.rotation = bone.data.rotation + r * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                r += bone.data.rotation - bone.rotation;\n            case MixBlend.add:\n                bone.rotation += r * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\nexport class TranslateTimeline extends CurveTimeline2 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex, Property.y + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.x = bone.data.x;\n                    bone.y = bone.data.y;\n                    return;\n                case MixBlend.first:\n                    bone.x += (bone.data.x - bone.x) * alpha;\n                    bone.y += (bone.data.y - bone.y) * alpha;\n            }\n            return;\n        }\n        let x = 0, y = 0;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        switch (blend) {\n            case MixBlend.setup:\n                bone.x = bone.data.x + x * alpha;\n                bone.y = bone.data.y + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.x += (bone.data.x + x - bone.x) * alpha;\n                bone.y += (bone.data.y + y - bone.y) * alpha;\n                break;\n            case MixBlend.add:\n                bone.x += x * alpha;\n                bone.y += y * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateXTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.x = bone.data.x;\n                    return;\n                case MixBlend.first:\n                    bone.x += (bone.data.x - bone.x) * alpha;\n            }\n            return;\n        }\n        let x = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                bone.x = bone.data.x + x * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.x += (bone.data.x + x - bone.x) * alpha;\n                break;\n            case MixBlend.add:\n                bone.x += x * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateYTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.y = bone.data.y;\n                    return;\n                case MixBlend.first:\n                    bone.y += (bone.data.y - bone.y) * alpha;\n            }\n            return;\n        }\n        let y = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                bone.y = bone.data.y + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.y += (bone.data.y + y - bone.y) * alpha;\n                break;\n            case MixBlend.add:\n                bone.y += y * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleTimeline extends CurveTimeline2 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex, Property.scaleY + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.scaleX = bone.data.scaleX;\n                    bone.scaleY = bone.data.scaleY;\n                    return;\n                case MixBlend.first:\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n            }\n            return;\n        }\n        let x, y;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        x *= bone.data.scaleX;\n        y *= bone.data.scaleY;\n        if (alpha == 1) {\n            if (blend == MixBlend.add) {\n                bone.scaleX += x - bone.data.scaleX;\n                bone.scaleY += y - bone.data.scaleY;\n            }\n            else {\n                bone.scaleX = x;\n                bone.scaleY = y;\n            }\n        }\n        else {\n            let bx = 0, by = 0;\n            if (direction == MixDirection.mixOut) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = bone.data.scaleX;\n                        by = bone.data.scaleY;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = bone.scaleX;\n                        by = bone.scaleY;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX = (x - bone.data.scaleX) * alpha;\n                        bone.scaleY = (y - bone.data.scaleY) * alpha;\n                }\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\n                }\n            }\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleXTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.scaleX = bone.data.scaleX;\n                    return;\n                case MixBlend.first:\n                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n            }\n            return;\n        }\n        let x = this.getCurveValue(time) * bone.data.scaleX;\n        if (alpha == 1) {\n            if (blend == MixBlend.add)\n                bone.scaleX += x - bone.data.scaleX;\n            else\n                bone.scaleX = x;\n        }\n        else {\n            // Mixing out uses sign of setup or current pose, else use sign of key.\n            let bx = 0;\n            if (direction == MixDirection.mixOut) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = bone.data.scaleX;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = bone.scaleX;\n                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX = (x - bone.data.scaleX) * alpha;\n                }\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup:\n                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n                        bone.scaleX = bx + (x - bx) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleX += (x - bone.data.scaleX) * alpha;\n                }\n            }\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleYTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.scaleY = bone.data.scaleY;\n                    return;\n                case MixBlend.first:\n                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n            }\n            return;\n        }\n        let y = this.getCurveValue(time) * bone.data.scaleY;\n        if (alpha == 1) {\n            if (blend == MixBlend.add)\n                bone.scaleY += y - bone.data.scaleY;\n            else\n                bone.scaleY = y;\n        }\n        else {\n            // Mixing out uses sign of setup or current pose, else use sign of key.\n            let by = 0;\n            if (direction == MixDirection.mixOut) {\n                switch (blend) {\n                    case MixBlend.setup:\n                        by = bone.data.scaleY;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        by = bone.scaleY;\n                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleY = (y - bone.data.scaleY) * alpha;\n                }\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup:\n                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n                        bone.scaleY = by + (y - by) * alpha;\n                        break;\n                    case MixBlend.add:\n                        bone.scaleY += (y - bone.data.scaleY) * alpha;\n                }\n            }\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearTimeline extends CurveTimeline2 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex, Property.shearY + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.shearX = bone.data.shearX;\n                    bone.shearY = bone.data.shearY;\n                    return;\n                case MixBlend.first:\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n            }\n            return;\n        }\n        let x = 0, y = 0;\n        let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n        let curveType = this.curves[i / 3 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                x = frames[i + 1 /*VALUE1*/];\n                y = frames[i + 2 /*VALUE2*/];\n                break;\n            default:\n                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        switch (blend) {\n            case MixBlend.setup:\n                bone.shearX = bone.data.shearX + x * alpha;\n                bone.shearY = bone.data.shearY + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n                break;\n            case MixBlend.add:\n                bone.shearX += x * alpha;\n                bone.shearY += y * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearXTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.shearX = bone.data.shearX;\n                    return;\n                case MixBlend.first:\n                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n            }\n            return;\n        }\n        let x = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                bone.shearX = bone.data.shearX + x * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n                break;\n            case MixBlend.add:\n                bone.shearX += x * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearYTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, boneIndex) {\n        super(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\n        this.boneIndex = 0;\n        this.boneIndex = boneIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let bone = skeleton.bones[this.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.shearY = bone.data.shearY;\n                    return;\n                case MixBlend.first:\n                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n            }\n            return;\n        }\n        let y = this.getCurveValue(time);\n        switch (blend) {\n            case MixBlend.setup:\n                bone.shearY = bone.data.shearY + y * alpha;\n                break;\n            case MixBlend.first:\n            case MixBlend.replace:\n                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n                break;\n            case MixBlend.add:\n                bone.shearY += y * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBATimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.alpha + \"|\" + slotIndex\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 5 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n    setFrame(frame, time, r, g, b, a) {\n        frame *= 5 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*A*/] = a;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let color = slot.color;\n        if (time < frames[0]) {\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.setFromColor(setup);\n                    return;\n                case MixBlend.first:\n                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0;\n        let i = Timeline.search(frames, time, 5 /*ENTRIES*/);\n        let curveType = this.curves[i / 5 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                let t = (time - before) / (frames[i + 5 /*ENTRIES*/] - before);\n                r += (frames[i + 5 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 5 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 5 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                a += (frames[i + 5 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1)\n            color.set(r, g, b, a);\n        else {\n            if (blend == MixBlend.setup)\n                color.setFromColor(slot.data.color);\n            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBTimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 4 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n    setFrame(frame, time, r, g, b) {\n        frame <<= 2;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let color = slot.color;\n        if (time < frames[0]) {\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.r = setup.r;\n                    color.g = setup.g;\n                    color.b = setup.b;\n                    return;\n                case MixBlend.first:\n                    color.r += (setup.r - color.r) * alpha;\n                    color.g += (setup.g - color.g) * alpha;\n                    color.b += (setup.b - color.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0;\n        let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n        let curveType = this.curves[i >> 2];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n                r += (frames[i + 4 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 4 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 4 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            color.r = r;\n            color.g = g;\n            color.b = b;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                let setup = slot.data.color;\n                color.r = setup.r;\n                color.g = setup.g;\n                color.b = setup.b;\n            }\n            color.r += (r - color.r) * alpha;\n            color.g += (g - color.g) * alpha;\n            color.b += (b - color.b) * alpha;\n        }\n    }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class AlphaTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let color = slot.color;\n        if (time < this.frames[0]) { // Time is before first frame.\n            let setup = slot.data.color;\n            switch (blend) {\n                case MixBlend.setup:\n                    color.a = setup.a;\n                    return;\n                case MixBlend.first:\n                    color.a += (setup.a - color.a) * alpha;\n            }\n            return;\n        }\n        let a = this.getCurveValue(time);\n        if (alpha == 1)\n            color.a = a;\n        else {\n            if (blend == MixBlend.setup)\n                color.a = slot.data.color.a;\n            color.a += (a - color.a) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGBA2Timeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.alpha + \"|\" + slotIndex,\n            Property.rgb2 + \"|\" + slotIndex\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 8 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n    setFrame(frame, time, r, g, b, a, r2, g2, b2) {\n        frame <<= 3;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*A*/] = a;\n        this.frames[frame + 5 /*R2*/] = r2;\n        this.frames[frame + 6 /*G2*/] = g2;\n        this.frames[frame + 7 /*B2*/] = b2;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let light = slot.color, dark = slot.darkColor;\n        if (time < frames[0]) {\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n            switch (blend) {\n                case MixBlend.setup:\n                    light.setFromColor(setupLight);\n                    dark.r = setupDark.r;\n                    dark.g = setupDark.g;\n                    dark.b = setupDark.b;\n                    return;\n                case MixBlend.first:\n                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);\n                    dark.r += (setupDark.r - dark.r) * alpha;\n                    dark.g += (setupDark.g - dark.g) * alpha;\n                    dark.b += (setupDark.b - dark.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n        let i = Timeline.search(frames, time, 8 /*ENTRIES*/);\n        let curveType = this.curves[i >> 3];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                r2 = frames[i + 5 /*R2*/];\n                g2 = frames[i + 6 /*G2*/];\n                b2 = frames[i + 7 /*B2*/];\n                let t = (time - before) / (frames[i + 8 /*ENTRIES*/] - before);\n                r += (frames[i + 8 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 8 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 8 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                a += (frames[i + 8 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n                r2 += (frames[i + 8 /*ENTRIES*/ + 5 /*R2*/] - r2) * t;\n                g2 += (frames[i + 8 /*ENTRIES*/ + 6 /*G2*/] - g2) * t;\n                b2 += (frames[i + 8 /*ENTRIES*/ + 7 /*B2*/] - b2) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                a = frames[i + 4 /*A*/];\n                r2 = frames[i + 5 /*R2*/];\n                g2 = frames[i + 6 /*G2*/];\n                b2 = frames[i + 7 /*B2*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                r2 = this.getBezierValue(time, i, 5 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                g2 = this.getBezierValue(time, i, 6 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n                b2 = this.getBezierValue(time, i, 7 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 6 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            light.set(r, g, b, a);\n            dark.r = r2;\n            dark.g = g2;\n            dark.b = b2;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                light.setFromColor(slot.data.color);\n                let setupDark = slot.data.darkColor;\n                dark.r = setupDark.r;\n                dark.g = setupDark.g;\n                dark.b = setupDark.b;\n            }\n            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n            dark.r += (r2 - dark.r) * alpha;\n            dark.g += (g2 - dark.g) * alpha;\n            dark.b += (b2 - dark.b) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGB2Timeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, slotIndex) {\n        super(frameCount, bezierCount, [\n            Property.rgb + \"|\" + slotIndex,\n            Property.rgb2 + \"|\" + slotIndex\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n    }\n    getFrameEntries() {\n        return 7 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n    setFrame(frame, time, r, g, b, r2, g2, b2) {\n        frame *= 7 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*R*/] = r;\n        this.frames[frame + 2 /*G*/] = g;\n        this.frames[frame + 3 /*B*/] = b;\n        this.frames[frame + 4 /*R2*/] = r2;\n        this.frames[frame + 5 /*G2*/] = g2;\n        this.frames[frame + 6 /*B2*/] = b2;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let frames = this.frames;\n        let light = slot.color, dark = slot.darkColor;\n        if (time < frames[0]) {\n            let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n            switch (blend) {\n                case MixBlend.setup:\n                    light.r = setupLight.r;\n                    light.g = setupLight.g;\n                    light.b = setupLight.b;\n                    dark.r = setupDark.r;\n                    dark.g = setupDark.g;\n                    dark.b = setupDark.b;\n                    return;\n                case MixBlend.first:\n                    light.r += (setupLight.r - light.r) * alpha;\n                    light.g += (setupLight.g - light.g) * alpha;\n                    light.b += (setupLight.b - light.b) * alpha;\n                    dark.r += (setupDark.r - dark.r) * alpha;\n                    dark.g += (setupDark.g - dark.g) * alpha;\n                    dark.b += (setupDark.b - dark.b) * alpha;\n            }\n            return;\n        }\n        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;\n        let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n        let curveType = this.curves[i / 7 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                r2 = frames[i + 4 /*R2*/];\n                g2 = frames[i + 5 /*G2*/];\n                b2 = frames[i + 6 /*B2*/];\n                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n                r += (frames[i + 7 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n                g += (frames[i + 7 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n                b += (frames[i + 7 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n                r2 += (frames[i + 7 /*ENTRIES*/ + 4 /*R2*/] - r2) * t;\n                g2 += (frames[i + 7 /*ENTRIES*/ + 5 /*G2*/] - g2) * t;\n                b2 += (frames[i + 7 /*ENTRIES*/ + 6 /*B2*/] - b2) * t;\n                break;\n            case 1 /*STEPPED*/:\n                r = frames[i + 1 /*R*/];\n                g = frames[i + 2 /*G*/];\n                b = frames[i + 3 /*B*/];\n                r2 = frames[i + 4 /*R2*/];\n                g2 = frames[i + 5 /*G2*/];\n                b2 = frames[i + 6 /*B2*/];\n                break;\n            default:\n                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                r2 = this.getBezierValue(time, i, 4 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                g2 = this.getBezierValue(time, i, 5 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                b2 = this.getBezierValue(time, i, 6 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n        }\n        if (alpha == 1) {\n            light.r = r;\n            light.g = g;\n            light.b = b;\n            dark.r = r2;\n            dark.g = g2;\n            dark.b = b2;\n        }\n        else {\n            if (blend == MixBlend.setup) {\n                let setupLight = slot.data.color, setupDark = slot.data.darkColor;\n                light.r = setupLight.r;\n                light.g = setupLight.g;\n                light.b = setupLight.b;\n                dark.r = setupDark.r;\n                dark.g = setupDark.g;\n                dark.b = setupDark.b;\n            }\n            light.r += (r - light.r) * alpha;\n            light.g += (g - light.g) * alpha;\n            light.b += (b - light.b) * alpha;\n            dark.r += (r2 - dark.r) * alpha;\n            dark.g += (g2 - dark.g) * alpha;\n            dark.b += (b2 - dark.b) * alpha;\n        }\n    }\n}\n/** Changes a slot's {@link Slot#attachment}. */\nexport class AttachmentTimeline extends Timeline {\n    constructor(frameCount, slotIndex) {\n        super(frameCount, [\n            Property.attachment + \"|\" + slotIndex\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n        this.attachmentNames = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the attachment name for the specified key frame. */\n    setFrame(frame, time, attachmentName) {\n        this.frames[frame] = time;\n        this.attachmentNames[frame] = attachmentName;\n    }\n    apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName);\n            return;\n        }\n        if (time < this.frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName);\n            return;\n        }\n        this.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\n    }\n    setAttachment(skeleton, slot, attachmentName) {\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n    }\n}\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\nexport class DeformTimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, slotIndex, attachment) {\n        super(frameCount, bezierCount, [\n            Property.deform + \"|\" + slotIndex + \"|\" + attachment.id\n        ]);\n        this.slotIndex = 0;\n        this.slotIndex = slotIndex;\n        this.attachment = attachment;\n        this.vertices = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the vertices for the specified key frame.\n     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n    setFrame(frame, time, vertices) {\n        this.frames[frame] = time;\n        this.vertices[frame] = vertices;\n    }\n    /** @param value1 Ignored (0 is used for a deform timeline).\n     * @param value2 Ignored (1 is used for a deform timeline). */\n    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n        let curves = this.curves;\n        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n        if (value == 0)\n            curves[frame] = 2 /*BEZIER*/ + i;\n        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;\n        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;\n        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;\n        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\n        let x = time1 + dx, y = dy;\n        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n            curves[i] = x;\n            curves[i + 1] = y;\n            dx += ddx;\n            dy += ddy;\n            ddx += dddx;\n            ddy += dddy;\n            x += dx;\n            y += dy;\n        }\n    }\n    getCurvePercent(time, frame) {\n        let curves = this.curves;\n        let i = curves[frame];\n        switch (i) {\n            case 0 /*LINEAR*/:\n                let x = this.frames[frame];\n                return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n            case 1 /*STEPPED*/:\n                return 0;\n        }\n        i -= 2 /*BEZIER*/;\n        if (curves[i] > time) {\n            let x = this.frames[frame];\n            return curves[i + 1] * (time - x) / (curves[i] - x);\n        }\n        let n = i + 18 /*BEZIER_SIZE*/;\n        for (i += 2; i < n; i += 2) {\n            if (curves[i] >= time) {\n                let x = curves[i - 2], y = curves[i - 1];\n                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n            }\n        }\n        let x = curves[n - 2], y = curves[n - 1];\n        return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let slot = skeleton.slots[this.slotIndex];\n        if (!slot.bone.active)\n            return;\n        let slotAttachment = slot.getAttachment();\n        if (!(slotAttachment instanceof VertexAttachment) || slotAttachment.deformAttachment != this.attachment)\n            return;\n        let deform = slot.deform;\n        if (deform.length == 0)\n            blend = MixBlend.setup;\n        let vertices = this.vertices;\n        let vertexCount = vertices[0].length;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            let vertexAttachment = slotAttachment;\n            switch (blend) {\n                case MixBlend.setup:\n                    deform.length = 0;\n                    return;\n                case MixBlend.first:\n                    if (alpha == 1) {\n                        deform.length = 0;\n                        return;\n                    }\n                    deform.length = vertexCount;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (var i = 0; i < vertexCount; i++)\n                            deform[i] += (setupVertices[i] - deform[i]) * alpha;\n                    }\n                    else {\n                        // Weighted deform offsets.\n                        alpha = 1 - alpha;\n                        for (var i = 0; i < vertexCount; i++)\n                            deform[i] *= alpha;\n                    }\n            }\n            return;\n        }\n        deform.length = vertexCount;\n        if (time >= frames[frames.length - 1]) { // Time is after last frame.\n            let lastVertices = vertices[frames.length - 1];\n            if (alpha == 1) {\n                if (blend == MixBlend.add) {\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += lastVertices[i] - setupVertices[i];\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += lastVertices[i];\n                    }\n                }\n                else\n                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n            }\n            else {\n                switch (blend) {\n                    case MixBlend.setup: {\n                        let vertexAttachment = slotAttachment;\n                        if (!vertexAttachment.bones) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++) {\n                                let setup = setupVertices[i];\n                                deform[i] = setup + (lastVertices[i] - setup) * alpha;\n                            }\n                        }\n                        else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] = lastVertices[i] * alpha;\n                        }\n                        break;\n                    }\n                    case MixBlend.first:\n                    case MixBlend.replace:\n                        for (let i = 0; i < vertexCount; i++)\n                            deform[i] += (lastVertices[i] - deform[i]) * alpha;\n                        break;\n                    case MixBlend.add:\n                        let vertexAttachment = slotAttachment;\n                        if (!vertexAttachment.bones) {\n                            // Unweighted vertex positions, with alpha.\n                            let setupVertices = vertexAttachment.vertices;\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n                        }\n                        else {\n                            // Weighted deform offsets, with alpha.\n                            for (let i = 0; i < vertexCount; i++)\n                                deform[i] += lastVertices[i] * alpha;\n                        }\n                }\n            }\n            return;\n        }\n        // Interpolate between the previous frame and the current frame.\n        let frame = Timeline.search1(frames, time);\n        let percent = this.getCurvePercent(time, frame);\n        let prevVertices = vertices[frame];\n        let nextVertices = vertices[frame + 1];\n        if (alpha == 1) {\n            if (blend == MixBlend.add) {\n                let vertexAttachment = slotAttachment;\n                if (!vertexAttachment.bones) {\n                    // Unweighted vertex positions, with alpha.\n                    let setupVertices = vertexAttachment.vertices;\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n                    }\n                }\n                else {\n                    // Weighted deform offsets, with alpha.\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += prev + (nextVertices[i] - prev) * percent;\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < vertexCount; i++) {\n                    let prev = prevVertices[i];\n                    deform[i] = prev + (nextVertices[i] - prev) * percent;\n                }\n            }\n        }\n        else {\n            switch (blend) {\n                case MixBlend.setup: {\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i], setup = setupVertices[i];\n                            deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n                        }\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n                        }\n                    }\n                    break;\n                }\n                case MixBlend.first:\n                case MixBlend.replace:\n                    for (let i = 0; i < vertexCount; i++) {\n                        let prev = prevVertices[i];\n                        deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n                    }\n                    break;\n                case MixBlend.add:\n                    let vertexAttachment = slotAttachment;\n                    if (!vertexAttachment.bones) {\n                        // Unweighted vertex positions, with alpha.\n                        let setupVertices = vertexAttachment.vertices;\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n                        }\n                    }\n                    else {\n                        // Weighted deform offsets, with alpha.\n                        for (let i = 0; i < vertexCount; i++) {\n                            let prev = prevVertices[i];\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n                        }\n                    }\n            }\n        }\n    }\n}\n/** Fires an {@link Event} when specific animation times are reached. */\nexport class EventTimeline extends Timeline {\n    constructor(frameCount) {\n        super(frameCount, EventTimeline.propertyIds);\n        this.events = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the event for the specified key frame. */\n    setFrame(frame, event) {\n        this.frames[frame] = event.time;\n        this.events[frame] = event;\n    }\n    /** Fires events for frames > `lastTime` and <= `time`. */\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        if (!firedEvents)\n            return;\n        let frames = this.frames;\n        let frameCount = this.frames.length;\n        if (lastTime > time) { // Fire events after last time for looped animations.\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n            lastTime = -1;\n        }\n        else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n            return;\n        if (time < frames[0])\n            return; // Time is before first frame.\n        let i = 0;\n        if (lastTime < frames[0])\n            i = 0;\n        else {\n            i = Timeline.search1(frames, lastTime) + 1;\n            let frameTime = frames[i];\n            while (i > 0) { // Fire multiple events with the same frame.\n                if (frames[i - 1] != frameTime)\n                    break;\n                i--;\n            }\n        }\n        for (; i < frameCount && time >= frames[i]; i++)\n            firedEvents.push(this.events[i]);\n    }\n}\nEventTimeline.propertyIds = [\"\" + Property.event];\n/** Changes a skeleton's {@link Skeleton#drawOrder}. */\nexport class DrawOrderTimeline extends Timeline {\n    constructor(frameCount) {\n        super(frameCount, DrawOrderTimeline.propertyIds);\n        this.drawOrders = new Array(frameCount);\n    }\n    getFrameCount() {\n        return this.frames.length;\n    }\n    /** Sets the time in seconds and the draw order for the specified key frame.\n     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n     *           draw order. */\n    setFrame(frame, time, drawOrder) {\n        this.frames[frame] = time;\n        this.drawOrders[frame] = drawOrder;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        if (direction == MixDirection.mixOut) {\n            if (blend == MixBlend.setup)\n                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n            return;\n        }\n        if (time < this.frames[0]) {\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n            return;\n        }\n        let drawOrderToSetupIndex = this.drawOrders[Timeline.search1(this.frames, time)];\n        if (!drawOrderToSetupIndex)\n            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n        else {\n            let drawOrder = skeleton.drawOrder;\n            let slots = skeleton.slots;\n            for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n                drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n        }\n    }\n}\nDrawOrderTimeline.propertyIds = [\"\" + Property.drawOrder];\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\nexport class IkConstraintTimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, ikConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.ikConstraint + \"|\" + ikConstraintIndex\n        ]);\n        this.ikConstraintIndex = ikConstraintIndex;\n    }\n    getFrameEntries() {\n        return 6 /*ENTRIES*/;\n    }\n    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\n    setFrame(frame, time, mix, softness, bendDirection, compress, stretch) {\n        frame *= 6 /*ENTRIES*/;\n        this.frames[frame] = time;\n        this.frames[frame + 1 /*MIX*/] = mix;\n        this.frames[frame + 2 /*SOFTNESS*/] = softness;\n        this.frames[frame + 3 /*BEND_DIRECTION*/] = bendDirection;\n        this.frames[frame + 4 /*COMPRESS*/] = compress ? 1 : 0;\n        this.frames[frame + 5 /*STRETCH*/] = stretch ? 1 : 0;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.ikConstraints[this.ikConstraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mix = constraint.data.mix;\n                    constraint.softness = constraint.data.softness;\n                    constraint.bendDirection = constraint.data.bendDirection;\n                    constraint.compress = constraint.data.compress;\n                    constraint.stretch = constraint.data.stretch;\n                    return;\n                case MixBlend.first:\n                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n                    constraint.bendDirection = constraint.data.bendDirection;\n                    constraint.compress = constraint.data.compress;\n                    constraint.stretch = constraint.data.stretch;\n            }\n            return;\n        }\n        let mix = 0, softness = 0;\n        let i = Timeline.search(frames, time, 6 /*ENTRIES*/);\n        let curveType = this.curves[i / 6 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                mix = frames[i + 1 /*MIX*/];\n                softness = frames[i + 2 /*SOFTNESS*/];\n                let t = (time - before) / (frames[i + 6 /*ENTRIES*/] - before);\n                mix += (frames[i + 6 /*ENTRIES*/ + 1 /*MIX*/] - mix) * t;\n                softness += (frames[i + 6 /*ENTRIES*/ + 2 /*SOFTNESS*/] - softness) * t;\n                break;\n            case 1 /*STEPPED*/:\n                mix = frames[i + 1 /*MIX*/];\n                softness = frames[i + 2 /*SOFTNESS*/];\n                break;\n            default:\n                mix = this.getBezierValue(time, i, 1 /*MIX*/, curveType - 2 /*BEZIER*/);\n                softness = this.getBezierValue(time, i, 2 /*SOFTNESS*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\n            constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\n            if (direction == MixDirection.mixOut) {\n                constraint.bendDirection = constraint.data.bendDirection;\n                constraint.compress = constraint.data.compress;\n                constraint.stretch = constraint.data.stretch;\n            }\n            else {\n                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n            }\n        }\n        else {\n            constraint.mix += (mix - constraint.mix) * alpha;\n            constraint.softness += (softness - constraint.softness) * alpha;\n            if (direction == MixDirection.mixIn) {\n                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n            }\n        }\n    }\n}\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\nexport class TransformConstraintTimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, transformConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.transformConstraint + \"|\" + transformConstraintIndex\n        ]);\n        this.transformConstraintIndex = transformConstraintIndex;\n    }\n    getFrameEntries() {\n        return 7 /*ENTRIES*/;\n    }\n    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n    setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY) {\n        let frames = this.frames;\n        frame *= 7 /*ENTRIES*/;\n        frames[frame] = time;\n        frames[frame + 1 /*ROTATE*/] = mixRotate;\n        frames[frame + 2 /*X*/] = mixX;\n        frames[frame + 3 /*Y*/] = mixY;\n        frames[frame + 4 /*SCALEX*/] = mixScaleX;\n        frames[frame + 5 /*SCALEY*/] = mixScaleY;\n        frames[frame + 6 /*SHEARY*/] = mixShearY;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.transformConstraints[this.transformConstraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            let data = constraint.data;\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mixRotate = data.mixRotate;\n                    constraint.mixX = data.mixX;\n                    constraint.mixY = data.mixY;\n                    constraint.mixScaleX = data.mixScaleX;\n                    constraint.mixScaleY = data.mixScaleY;\n                    constraint.mixShearY = data.mixShearY;\n                    return;\n                case MixBlend.first:\n                    constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\n                    constraint.mixX += (data.mixX - constraint.mixX) * alpha;\n                    constraint.mixY += (data.mixY - constraint.mixY) * alpha;\n                    constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\n                    constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\n                    constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\n            }\n            return;\n        }\n        let rotate, x, y, scaleX, scaleY, shearY;\n        let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n        let curveType = this.curves[i / 7 /*ENTRIES*/];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                scaleX = frames[i + 4 /*SCALEX*/];\n                scaleY = frames[i + 5 /*SCALEY*/];\n                shearY = frames[i + 6 /*SHEARY*/];\n                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n                rotate += (frames[i + 7 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n                x += (frames[i + 7 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n                y += (frames[i + 7 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n                scaleX += (frames[i + 7 /*ENTRIES*/ + 4 /*SCALEX*/] - scaleX) * t;\n                scaleY += (frames[i + 7 /*ENTRIES*/ + 5 /*SCALEY*/] - scaleY) * t;\n                shearY += (frames[i + 7 /*ENTRIES*/ + 6 /*SHEARY*/] - shearY) * t;\n                break;\n            case 1 /*STEPPED*/:\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                scaleX = frames[i + 4 /*SCALEX*/];\n                scaleY = frames[i + 5 /*SCALEY*/];\n                shearY = frames[i + 6 /*SHEARY*/];\n                break;\n            default:\n                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n                scaleX = this.getBezierValue(time, i, 4 /*SCALEX*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n                scaleY = this.getBezierValue(time, i, 5 /*SCALEY*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n                shearY = this.getBezierValue(time, i, 6 /*SHEARY*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n            constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\n            constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\n            constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\n        }\n        else {\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n            constraint.mixX += (x - constraint.mixX) * alpha;\n            constraint.mixY += (y - constraint.mixY) * alpha;\n            constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\n            constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\n            constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\n        }\n    }\n}\n/** Changes a path constraint's {@link PathConstraint#position}. */\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\n        this.pathConstraintIndex = pathConstraintIndex;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.position = constraint.data.position;\n                    return;\n                case MixBlend.first:\n                    constraint.position += (constraint.data.position - constraint.position) * alpha;\n            }\n            return;\n        }\n        let position = this.getCurveValue(time);\n        if (blend == MixBlend.setup)\n            constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n        else\n            constraint.position += (position - constraint.position) * alpha;\n    }\n}\n/** Changes a path constraint's {@link PathConstraint#spacing}. */\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\n        /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n        this.pathConstraintIndex = 0;\n        this.pathConstraintIndex = pathConstraintIndex;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.spacing = constraint.data.spacing;\n                    return;\n                case MixBlend.first:\n                    constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n            }\n            return;\n        }\n        let spacing = this.getCurveValue(time);\n        if (blend == MixBlend.setup)\n            constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n        else\n            constraint.spacing += (spacing - constraint.spacing) * alpha;\n    }\n}\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n * {@link PathConstraint#getMixY()}. */\nexport class PathConstraintMixTimeline extends CurveTimeline {\n    constructor(frameCount, bezierCount, pathConstraintIndex) {\n        super(frameCount, bezierCount, [\n            Property.pathConstraintMix + \"|\" + pathConstraintIndex\n        ]);\n        /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n        this.pathConstraintIndex = 0;\n        this.pathConstraintIndex = pathConstraintIndex;\n    }\n    getFrameEntries() {\n        return 4 /*ENTRIES*/;\n    }\n    setFrame(frame, time, mixRotate, mixX, mixY) {\n        let frames = this.frames;\n        frame <<= 2;\n        frames[frame] = time;\n        frames[frame + 1 /*ROTATE*/] = mixRotate;\n        frames[frame + 2 /*X*/] = mixX;\n        frames[frame + 3 /*Y*/] = mixY;\n    }\n    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n        let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n        if (!constraint.active)\n            return;\n        let frames = this.frames;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    constraint.mixRotate = constraint.data.mixRotate;\n                    constraint.mixX = constraint.data.mixX;\n                    constraint.mixY = constraint.data.mixY;\n                    return;\n                case MixBlend.first:\n                    constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\n                    constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\n                    constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\n            }\n            return;\n        }\n        let rotate, x, y;\n        let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n        let curveType = this.curves[i >> 2];\n        switch (curveType) {\n            case 0 /*LINEAR*/:\n                let before = frames[i];\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n                rotate += (frames[i + 4 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n                x += (frames[i + 4 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n                y += (frames[i + 4 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n                break;\n            case 1 /*STEPPED*/:\n                rotate = frames[i + 1 /*ROTATE*/];\n                x = frames[i + 2 /*X*/];\n                y = frames[i + 3 /*Y*/];\n                break;\n            default:\n                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        }\n        if (blend == MixBlend.setup) {\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n            constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n            constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n        }\n        else {\n            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n            constraint.mixX += (x - constraint.mixX) * alpha;\n            constraint.mixY += (y - constraint.mixY) * alpha;\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, MixBlend, AttachmentTimeline, MixDirection, RotateTimeline, DrawOrderTimeline, Timeline, EventTimeline } from \"./Animation\";\nimport { StringSet, Pool, Utils, MathUtils } from \"./Utils\";\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\nexport class AnimationState {\n    constructor(data) {\n        /** The list of tracks that currently have animations, which may contain null entries. */\n        this.tracks = new Array();\n        /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n         * or faster. Defaults to 1.\n         *\n         * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n        this.timeScale = 1;\n        this.unkeyedState = 0;\n        this.events = new Array();\n        this.listeners = new Array();\n        this.queue = new EventQueue(this);\n        this.propertyIDs = new StringSet();\n        this.animationsChanged = false;\n        this.trackEntryPool = new Pool(() => new TrackEntry());\n        this.data = data;\n    }\n    static emptyAnimation() {\n        if (!_emptyAnimation)\n            _emptyAnimation = new Animation(\"<empty>\", [], 0);\n        return _emptyAnimation;\n    }\n    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n    update(delta) {\n        delta *= this.timeScale;\n        let tracks = this.tracks;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let current = tracks[i];\n            if (!current)\n                continue;\n            current.animationLast = current.nextAnimationLast;\n            current.trackLast = current.nextTrackLast;\n            let currentDelta = delta * current.timeScale;\n            if (current.delay > 0) {\n                current.delay -= currentDelta;\n                if (current.delay > 0)\n                    continue;\n                currentDelta = -current.delay;\n                current.delay = 0;\n            }\n            let next = current.next;\n            if (next) {\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n                let nextTime = current.trackLast - next.delay;\n                if (nextTime >= 0) {\n                    next.delay = 0;\n                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n                    current.trackTime += currentDelta;\n                    this.setCurrent(i, next, true);\n                    while (next.mixingFrom) {\n                        next.mixTime += delta;\n                        next = next.mixingFrom;\n                    }\n                    continue;\n                }\n            }\n            else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\n                tracks[i] = null;\n                this.queue.end(current);\n                this.clearNext(current);\n                continue;\n            }\n            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\n                // End mixing from entries once all have completed.\n                let from = current.mixingFrom;\n                current.mixingFrom = null;\n                if (from)\n                    from.mixingTo = null;\n                while (from) {\n                    this.queue.end(from);\n                    from = from.mixingFrom;\n                }\n            }\n            current.trackTime += currentDelta;\n        }\n        this.queue.drain();\n    }\n    /** Returns true when all mixing from entries are complete. */\n    updateMixingFrom(to, delta) {\n        let from = to.mixingFrom;\n        if (!from)\n            return true;\n        let finished = this.updateMixingFrom(from, delta);\n        from.animationLast = from.nextAnimationLast;\n        from.trackLast = from.nextTrackLast;\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n            if (from.totalAlpha == 0 || to.mixDuration == 0) {\n                to.mixingFrom = from.mixingFrom;\n                if (from.mixingFrom)\n                    from.mixingFrom.mixingTo = to;\n                to.interruptAlpha = from.interruptAlpha;\n                this.queue.end(from);\n            }\n            return finished;\n        }\n        from.trackTime += delta * from.timeScale;\n        to.mixTime += delta;\n        return false;\n    }\n    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n     * animation state can be applied to multiple skeletons to pose them identically.\n     * @returns True if any animations were applied. */\n    apply(skeleton) {\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        if (this.animationsChanged)\n            this._animationsChanged();\n        let events = this.events;\n        let tracks = this.tracks;\n        let applied = false;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let current = tracks[i];\n            if (!current || current.delay > 0)\n                continue;\n            applied = true;\n            let blend = i == 0 ? MixBlend.first : current.mixBlend;\n            // Apply mixing from entries first.\n            let mix = current.alpha;\n            if (current.mixingFrom)\n                mix *= this.applyMixingFrom(current, skeleton, blend);\n            else if (current.trackTime >= current.trackEnd && !current.next)\n                mix = 0;\n            // Apply current entry.\n            let animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;\n            let applyEvents = events;\n            if (current.reverse) {\n                applyTime = current.animation.duration - applyTime;\n                applyEvents = null;\n            }\n            let timelines = current.animation.timelines;\n            let timelineCount = timelines.length;\n            if ((i == 0 && mix == 1) || blend == MixBlend.add) {\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n                    // (https://github.com/pixijs/pixi-spine/issues/302)\n                    Utils.webkit602BugfixHelper(mix, blend);\n                    var timeline = timelines[ii];\n                    if (timeline instanceof AttachmentTimeline)\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n                    else\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\n                }\n            }\n            else {\n                let timelineMode = current.timelineMode;\n                let firstFrame = current.timelinesRotation.length != timelineCount << 1;\n                if (firstFrame)\n                    current.timelinesRotation.length = timelineCount << 1;\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    let timeline = timelines[ii];\n                    let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\n                    if (timeline instanceof RotateTimeline) {\n                        this.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\n                    }\n                    else if (timeline instanceof AttachmentTimeline) {\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n                    }\n                    else {\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                        Utils.webkit602BugfixHelper(mix, blend);\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\n                    }\n                }\n            }\n            this.queueEvents(current, animationTime);\n            events.length = 0;\n            current.nextAnimationLast = animationTime;\n            current.nextTrackLast = current.trackTime;\n        }\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n        // the time is before the first key).\n        var setupState = this.unkeyedState + SETUP;\n        var slots = skeleton.slots;\n        for (var i = 0, n = skeleton.slots.length; i < n; i++) {\n            var slot = slots[i];\n            if (slot.attachmentState == setupState) {\n                var attachmentName = slot.data.attachmentName;\n                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n            }\n        }\n        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\n        this.queue.drain();\n        return applied;\n    }\n    applyMixingFrom(to, skeleton, blend) {\n        let from = to.mixingFrom;\n        if (from.mixingFrom)\n            this.applyMixingFrom(from, skeleton, blend);\n        let mix = 0;\n        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.\n            mix = 1;\n            if (blend == MixBlend.first)\n                blend = MixBlend.setup;\n        }\n        else {\n            mix = to.mixTime / to.mixDuration;\n            if (mix > 1)\n                mix = 1;\n            if (blend != MixBlend.first)\n                blend = from.mixBlend;\n        }\n        let attachments = mix < from.attachmentThreshold, drawOrder = mix < from.drawOrderThreshold;\n        let timelines = from.animation.timelines;\n        let timelineCount = timelines.length;\n        let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);\n        let animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;\n        let events = null;\n        if (from.reverse)\n            applyTime = from.animation.duration - applyTime;\n        else if (mix < from.eventThreshold)\n            events = this.events;\n        if (blend == MixBlend.add) {\n            for (let i = 0; i < timelineCount; i++)\n                timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\n        }\n        else {\n            let timelineMode = from.timelineMode;\n            let timelineHoldMix = from.timelineHoldMix;\n            let firstFrame = from.timelinesRotation.length != timelineCount << 1;\n            if (firstFrame)\n                from.timelinesRotation.length = timelineCount << 1;\n            from.totalAlpha = 0;\n            for (let i = 0; i < timelineCount; i++) {\n                let timeline = timelines[i];\n                let direction = MixDirection.mixOut;\n                let timelineBlend;\n                let alpha = 0;\n                switch (timelineMode[i]) {\n                    case SUBSEQUENT:\n                        if (!drawOrder && timeline instanceof DrawOrderTimeline)\n                            continue;\n                        timelineBlend = blend;\n                        alpha = alphaMix;\n                        break;\n                    case FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaMix;\n                        break;\n                    case HOLD_SUBSEQUENT:\n                        timelineBlend = blend;\n                        alpha = alphaHold;\n                        break;\n                    case HOLD_FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaHold;\n                        break;\n                    default:\n                        timelineBlend = MixBlend.setup;\n                        let holdMix = timelineHoldMix[i];\n                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n                        break;\n                }\n                from.totalAlpha += alpha;\n                if (timeline instanceof RotateTimeline)\n                    this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\n                else if (timeline instanceof AttachmentTimeline)\n                    this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\n                else {\n                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                    Utils.webkit602BugfixHelper(alpha, blend);\n                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\n                        direction = MixDirection.mixIn;\n                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\n                }\n            }\n        }\n        if (to.mixDuration > 0)\n            this.queueEvents(from, animationTime);\n        this.events.length = 0;\n        from.nextAnimationLast = animationTime;\n        from.nextTrackLast = from.trackTime;\n        return mix;\n    }\n    applyAttachmentTimeline(timeline, skeleton, time, blend, attachments) {\n        var slot = skeleton.slots[timeline.slotIndex];\n        if (!slot.bone.active)\n            return;\n        if (time < timeline.frames[0]) { // Time is before first frame.\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n        }\n        else\n            this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n        if (slot.attachmentState <= this.unkeyedState)\n            slot.attachmentState = this.unkeyedState + SETUP;\n    }\n    setAttachment(skeleton, slot, attachmentName, attachments) {\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n        if (attachments)\n            slot.attachmentState = this.unkeyedState + CURRENT;\n    }\n    applyRotateTimeline(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {\n        if (firstFrame)\n            timelinesRotation[i] = 0;\n        if (alpha == 1) {\n            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n            return;\n        }\n        let bone = skeleton.bones[timeline.boneIndex];\n        if (!bone.active)\n            return;\n        let frames = timeline.frames;\n        let r1 = 0, r2 = 0;\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.rotation = bone.data.rotation;\n                default:\n                    return;\n                case MixBlend.first:\n                    r1 = bone.rotation;\n                    r2 = bone.data.rotation;\n            }\n        }\n        else {\n            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n            r2 = bone.data.rotation + timeline.getCurveValue(time);\n        }\n        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n        let total = 0, diff = r2 - r1;\n        diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\n        if (diff == 0) {\n            total = timelinesRotation[i];\n        }\n        else {\n            let lastTotal = 0, lastDiff = 0;\n            if (firstFrame) {\n                lastTotal = 0;\n                lastDiff = diff;\n            }\n            else {\n                lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n                lastDiff = timelinesRotation[i + 1]; // Difference between bones.\n            }\n            let current = diff > 0, dir = lastTotal >= 0;\n            // Detect cross at 0 (not 180).\n            if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n                // A cross after a 360 rotation is a loop.\n                if (Math.abs(lastTotal) > 180)\n                    lastTotal += 360 * MathUtils.signum(lastTotal);\n                dir = current;\n            }\n            total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\n            if (dir != current)\n                total += 360 * MathUtils.signum(lastTotal);\n            timelinesRotation[i] = total;\n        }\n        timelinesRotation[i + 1] = diff;\n        bone.rotation = r1 + total * alpha;\n    }\n    queueEvents(entry, animationTime) {\n        let animationStart = entry.animationStart, animationEnd = entry.animationEnd;\n        let duration = animationEnd - animationStart;\n        let trackLastWrapped = entry.trackLast % duration;\n        // Queue events before complete.\n        let events = this.events;\n        let i = 0, n = events.length;\n        for (; i < n; i++) {\n            let event = events[i];\n            if (event.time < trackLastWrapped)\n                break;\n            if (event.time > animationEnd)\n                continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n\n        // console.log(animationTime)\n        // Queue complete if completed a loop iteration or the animation.\n        let complete = false;\n        if (entry.loop >= 1)\n            complete = duration === 0 || trackLastWrapped > entry.trackTime % duration;\n        else\n            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n        if (complete){\n            entry.loop--;\n            this.queue.complete(entry);\n        }\n        // Queue events after complete.\n        for (; i < n; i++) {\n            let event = events[i];\n            if (event.time < animationStart)\n                continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n    }\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTracks() {\n        let oldDrainDisabled = this.queue.drainDisabled;\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++)\n            this.clearTrack(i);\n        this.tracks.length = 0;\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n    /** Removes all animations from the track, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTrack(trackIndex) {\n        if (trackIndex >= this.tracks.length)\n            return;\n        let current = this.tracks[trackIndex];\n        if (!current)\n            return;\n        this.queue.end(current);\n        this.clearNext(current);\n        let entry = current;\n        while (true) {\n            let from = entry.mixingFrom;\n            if (!from)\n                break;\n            this.queue.end(from);\n            entry.mixingFrom = null;\n            entry.mixingTo = null;\n            entry = from;\n        }\n        this.tracks[current.trackIndex] = null;\n        this.queue.drain();\n    }\n    setCurrent(index, current, interrupt) {\n        let from = this.expandToIndex(index);\n        this.tracks[index] = current;\n        current.previous = null;\n        if (from) {\n            if (interrupt)\n                this.queue.interrupt(from);\n            current.mixingFrom = from;\n            from.mixingTo = current;\n            current.mixTime = 0;\n            // Store the interrupted mix percentage.\n            if (from.mixingFrom && from.mixDuration > 0)\n                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n        }\n        this.queue.start(current);\n    }\n    /** Sets an animation by name.\n      *\n      * See {@link #setAnimationWith()}. */\n    setAnimation(trackIndex, animationName, loop = 0) {\n        let animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation)\n            throw new Error(\"Animation not found: \" + animationName);\n        return this.setAnimationWith(trackIndex, animation, loop);\n    }\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n     * applied to a skeleton, it is replaced (not mixed from).\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    setAnimationWith(trackIndex, animation, loop = 0) {\n        if (!animation)\n            throw new Error(\"animation cannot be null.\");\n        let interrupt = true;\n        let current = this.expandToIndex(trackIndex);\n        if (current) {\n            if (current.nextTrackLast == -1) {\n                // Don't mix from an entry that was never applied.\n                this.tracks[trackIndex] = current.mixingFrom;\n                this.queue.interrupt(current);\n                this.queue.end(current);\n                this.clearNext(current);\n                current = current.mixingFrom;\n                interrupt = false;\n            }\n            else\n                this.clearNext(current);\n        }\n        let entry = this.trackEntry(trackIndex, animation, loop, current);\n        this.setCurrent(trackIndex, entry, interrupt);\n        this.queue.drain();\n        return entry;\n    }\n    /** Queues an animation by name.\n     *\n     * See {@link #addAnimationWith()}. */\n    addAnimation(trackIndex, animationName, loop = 0, delay = 0) {\n        let animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation)\n            throw new Error(\"Animation not found: \" + animationName);\n        return this.addAnimationWith(trackIndex, animation, loop, delay);\n    }\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n     * equivalent to calling {@link #setAnimationWith()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n     *           previous entry is looping, its next loop completion is used instead of its duration.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addAnimationWith(trackIndex, animation, loop = 0, delay = 0) {\n        if (!animation)\n            throw new Error(\"animation cannot be null.\");\n        let last = this.expandToIndex(trackIndex);\n        if (last) {\n            while (last.next)\n                last = last.next;\n        }\n        let entry = this.trackEntry(trackIndex, animation, loop, last);\n        if (!last) {\n            this.setCurrent(trackIndex, entry, true);\n            this.queue.drain();\n        }\n        else {\n            last.next = entry;\n            entry.previous = last;\n            if (delay <= 0)\n                delay += last.getTrackComplete() - entry.mixDuration;\n        }\n        entry.delay = delay;\n        return entry;\n    }\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n     *\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n     * 0 still mixes out over one frame.\n     *\n     * Mixing in is done by first setting an empty animation, then adding an animation using\n     * {@link #addAnimation()} and on the returned track entry, set the\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n    setEmptyAnimation(trackIndex, mixDuration = 0) {\n        let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n        return entry;\n    }\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n     * {@link #setEmptyAnimation()}.\n     *\n     * See {@link #setEmptyAnimation()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n     *           loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addEmptyAnimation(trackIndex, mixDuration = 0, delay = 0) {\n        let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\n        if (delay <= 0)\n            entry.delay += entry.mixDuration - mixDuration;\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n        return entry;\n    }\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n      * duration. */\n    setEmptyAnimations(mixDuration = 0) {\n        let oldDrainDisabled = this.queue.drainDisabled;\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++) {\n            let current = this.tracks[i];\n            if (current)\n                this.setEmptyAnimation(current.trackIndex, mixDuration);\n        }\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n    expandToIndex(index) {\n        if (index < this.tracks.length)\n            return this.tracks[index];\n        Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n        this.tracks.length = index + 1;\n        return null;\n    }\n    /** @param last May be null. */\n    trackEntry(trackIndex, animation, loop, last) {\n        let entry = this.trackEntryPool.obtain();\n        entry.trackIndex = trackIndex;\n        entry.animation = animation;\n        entry.loop = loop;\n        entry.holdPrevious = false;\n        entry.eventThreshold = 0;\n        entry.attachmentThreshold = 0;\n        entry.drawOrderThreshold = 0;\n        entry.animationStart = 0;\n        entry.animationEnd = animation.duration;\n        entry.animationLast = -1;\n        entry.nextAnimationLast = -1;\n        entry.delay = 0;\n        entry.trackTime = 0;\n        entry.trackLast = -1;\n        entry.nextTrackLast = -1;\n        entry.trackEnd = Number.MAX_VALUE;\n        entry.timeScale = 1;\n        entry.alpha = 1;\n        entry.interruptAlpha = 1;\n        entry.mixTime = 0;\n        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\n        entry.mixBlend = MixBlend.replace;\n        return entry;\n    }\n    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\n    clearNext(entry) {\n        let next = entry.next;\n        while (next) {\n            this.queue.dispose(next);\n            next = next.next;\n        }\n        entry.next = null;\n    }\n    _animationsChanged() {\n        this.animationsChanged = false;\n        this.propertyIDs.clear();\n        let tracks = this.tracks;\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let entry = tracks[i];\n            if (!entry)\n                continue;\n            while (entry.mixingFrom)\n                entry = entry.mixingFrom;\n            do {\n                if (!entry.mixingTo || entry.mixBlend != MixBlend.add)\n                    this.computeHold(entry);\n                entry = entry.mixingTo;\n            } while (entry);\n        }\n    }\n    computeHold(entry) {\n        let to = entry.mixingTo;\n        let timelines = entry.animation.timelines;\n        let timelinesCount = entry.animation.timelines.length;\n        let timelineMode = entry.timelineMode;\n        timelineMode.length = timelinesCount;\n        let timelineHoldMix = entry.timelineHoldMix;\n        timelineHoldMix.length = 0;\n        let propertyIDs = this.propertyIDs;\n        if (to && to.holdPrevious) {\n            for (let i = 0; i < timelinesCount; i++)\n                timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\n            return;\n        }\n        outer: for (let i = 0; i < timelinesCount; i++) {\n            let timeline = timelines[i];\n            let ids = timeline.getPropertyIds();\n            if (!propertyIDs.addAll(ids))\n                timelineMode[i] = SUBSEQUENT;\n            else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline\n                || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\n                timelineMode[i] = FIRST;\n            }\n            else {\n                for (let next = to.mixingTo; next; next = next.mixingTo) {\n                    if (next.animation.hasTimeline(ids))\n                        continue;\n                    if (entry.mixDuration > 0) {\n                        timelineMode[i] = HOLD_MIX;\n                        timelineHoldMix[i] = next;\n                        continue outer;\n                    }\n                    break;\n                }\n                timelineMode[i] = HOLD_FIRST;\n            }\n        }\n    }\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n    getCurrent(trackIndex) {\n        if (trackIndex >= this.tracks.length)\n            return null;\n        return this.tracks[trackIndex];\n    }\n    /** Adds a listener to receive events for all track entries. */\n    addListener(listener) {\n        if (!listener)\n            throw new Error(\"listener cannot be null.\");\n        this.listeners.push(listener);\n    }\n    /** Removes the listener added with {@link #addListener()}. */\n    removeListener(listener) {\n        let index = this.listeners.indexOf(listener);\n        if (index >= 0)\n            this.listeners.splice(index, 1);\n    }\n    /** Removes all listeners added with {@link #addListener()}. */\n    clearListeners() {\n        this.listeners.length = 0;\n    }\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n     * are not wanted because new animations are being set. */\n    clearListenerNotifications() {\n        this.queue.clear();\n    }\n}\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\nexport class TrackEntry {\n    constructor() {\n        /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n         * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n         * the values from the lower tracks.\n         *\n         * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n         * called. */\n        this.mixBlend = MixBlend.replace;\n        this.timelineMode = new Array();\n        this.timelineHoldMix = new Array();\n        this.timelinesRotation = new Array();\n    }\n    reset() {\n        this.next = null;\n        this.previous = null;\n        this.mixingFrom = null;\n        this.mixingTo = null;\n        this.animation = null;\n        this.listener = null;\n        this.timelineMode.length = 0;\n        this.timelineHoldMix.length = 0;\n        this.timelinesRotation.length = 0;\n    }\n    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n     * `animationStart` time. */\n    getAnimationTime() {\n        // console.log(this.loop)\n        if (this.loop < 0) {\n            return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n        }\n        if (this.loop > 0) {\n            let duration = this.animationEnd - this.animationStart;\n            if (duration === 0)\n                return this.animationStart;\n            return (this.trackTime % duration) + this.animationStart;\n        }\n        return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n    }\n    setAnimationLast(animationLast) {\n        this.animationLast = animationLast;\n        this.nextAnimationLast = animationLast;\n    }\n    /** Returns true if at least one loop has been completed.\n     *\n     * See {@link AnimationStateListener#complete()}. */\n    isComplete() {\n        return this.trackTime >= this.animationEnd - this.animationStart;\n    }\n    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n     * long way around when using {@link #alpha} and starting animations on other tracks.\n     *\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n    resetRotationDirections() {\n        this.timelinesRotation.length = 0;\n    }\n    getTrackComplete() {\n        let duration = this.animationEnd - this.animationStart;\n        if (duration !== 0) {\n            if (this.loop > 0)\n                return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\n            if (this.trackTime < duration)\n                return duration; // Before duration.\n        }\n        return this.trackTime; // Next update.\n    }\n}\nexport class EventQueue {\n    constructor(animState) {\n        this.objects = [];\n        this.drainDisabled = false;\n        this.animState = animState;\n    }\n    start(entry) {\n        this.objects.push(EventType.start);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n    interrupt(entry) {\n        this.objects.push(EventType.interrupt);\n        this.objects.push(entry);\n    }\n    end(entry) {\n        this.objects.push(EventType.end);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n    dispose(entry) {\n        this.objects.push(EventType.dispose);\n        this.objects.push(entry);\n    }\n    complete(entry) {\n        this.objects.push(EventType.complete);\n        this.objects.push(entry);\n    }\n    event(entry, event) {\n        this.objects.push(EventType.event);\n        this.objects.push(entry);\n        this.objects.push(event);\n    }\n    drain() {\n        if (this.drainDisabled)\n            return;\n        this.drainDisabled = true;\n        let objects = this.objects;\n        let listeners = this.animState.listeners;\n        for (let i = 0; i < objects.length; i += 2) {\n            let type = objects[i];\n            let entry = objects[i + 1];\n            switch (type) {\n                case EventType.start:\n                    if (entry.listener && entry.listener.start)\n                        entry.listener.start(entry);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].start)\n                            listeners[ii].start(entry);\n                    break;\n                case EventType.interrupt:\n                    if (entry.listener && entry.listener.interrupt)\n                        entry.listener.interrupt(entry);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].interrupt)\n                            listeners[ii].interrupt(entry);\n                    break;\n                case EventType.end:\n                    if (entry.listener && entry.listener.end)\n                        entry.listener.end(entry);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].end)\n                            listeners[ii].end(entry);\n                // Fall through.\n                case EventType.dispose:\n                    if (entry.listener && entry.listener.dispose)\n                        entry.listener.dispose(entry);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].dispose)\n                            listeners[ii].dispose(entry);\n                    this.animState.trackEntryPool.free(entry);\n                    break;\n                case EventType.complete:\n                    if (entry.listener && entry.listener.complete)\n                        entry.listener.complete(entry);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].complete)\n                            listeners[ii].complete(entry);\n                    break;\n                case EventType.event:\n                    let event = objects[i++ + 2];\n                    if (entry.listener && entry.listener.event)\n                        entry.listener.event(entry, event);\n                    for (let ii = 0; ii < listeners.length; ii++)\n                        if (listeners[ii].event)\n                            listeners[ii].event(entry, event);\n                    break;\n            }\n        }\n        this.clear();\n        this.drainDisabled = false;\n    }\n    clear() {\n        this.objects.length = 0;\n    }\n}\nexport var EventType;\n(function (EventType) {\n    EventType[EventType[\"start\"] = 0] = \"start\";\n    EventType[EventType[\"interrupt\"] = 1] = \"interrupt\";\n    EventType[EventType[\"end\"] = 2] = \"end\";\n    EventType[EventType[\"dispose\"] = 3] = \"dispose\";\n    EventType[EventType[\"complete\"] = 4] = \"complete\";\n    EventType[EventType[\"event\"] = 5] = \"event\";\n})(EventType || (EventType = {}));\nexport class AnimationStateAdapter {\n    start(entry) {\n    }\n    interrupt(entry) {\n    }\n    end(entry) {\n    }\n    dispose(entry) {\n    }\n    complete(entry) {\n    }\n    event(entry, event) {\n    }\n}\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nexport const SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nexport const FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nexport const HOLD_MIX = 4;\nexport const SETUP = 1;\nexport const CURRENT = 2;\nlet _emptyAnimation = null;","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */\nexport class AnimationStateData {\n    constructor(skeletonData) {\n        this.animationToMixTime = {};\n        /** The mix duration to use when no mix duration has been defined between two animations. */\n        this.defaultMix = 0;\n        if (!skeletonData)\n            throw new Error(\"skeletonData cannot be null.\");\n        this.skeletonData = skeletonData;\n    }\n    /** Sets a mix duration by animation name.\n     *\n     * See {@link #setMixWith()}. */\n    setMix(fromName, toName, duration) {\n        let from = this.skeletonData.findAnimation(fromName);\n        if (!from)\n            throw new Error(\"Animation not found: \" + fromName);\n        let to = this.skeletonData.findAnimation(toName);\n        if (!to)\n            throw new Error(\"Animation not found: \" + toName);\n        this.setMixWith(from, to, duration);\n    }\n    /** Sets the mix duration when changing from the specified animation to the other.\n     *\n     * See {@link TrackEntry#mixDuration}. */\n    setMixWith(from, to, duration) {\n        if (!from)\n            throw new Error(\"from cannot be null.\");\n        if (!to)\n            throw new Error(\"to cannot be null.\");\n        let key = from.name + \".\" + to.name;\n        this.animationToMixTime[key] = duration;\n    }\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n      * no mix duration has been set. */\n    getMix(from, to) {\n        let key = from.name + \".\" + to.name;\n        let value = this.animationToMixTime[key];\n        return value === undefined ? this.defaultMix : value;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"../Utils\";\nimport { VertexAttachment } from \"./Attachment\";\n/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\n * effects, and more.\n *\n * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\n * Guide. */\nexport class BoundingBoxAttachment extends VertexAttachment {\n    constructor(name) {\n        super(name);\n        this.color = new Color(1, 1, 1, 1);\n    }\n    copy() {\n        let copy = new BoundingBoxAttachment(this.name);\n        this.copyTo(copy);\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm91bmRpbmdCb3hBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL0JvdW5kaW5nQm94QXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0UsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxjQUFjLENBQUM7QUFFNUQ7Ozs7WUFJWTtBQUNaLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxnQkFBZ0I7SUFHMUQsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUhiLFVBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUk5QixDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIn0=","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"../Utils\";\nimport { VertexAttachment } from \"./Attachment\";\n/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */\nexport class ClippingAttachment extends VertexAttachment {\n    constructor(name) {\n        super(name);\n        // Nonessential.\n        /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\n         * are not usually rendered at runtime. */\n        this.color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff\n    }\n    copy() {\n        let copy = new ClippingAttachment(this.name);\n        this.copyTo(copy);\n        copy.endSlot = this.endSlot;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpcHBpbmdBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL0NsaXBwaW5nQXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxjQUFjLENBQUM7QUFFNUQsK0dBQStHO0FBQy9HLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxnQkFBZ0I7SUFVdkQsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQU5iLGdCQUFnQjtRQUNoQjtrREFDMEM7UUFDMUMsVUFBSyxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVztJQUl6RCxDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRCJ9","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nexport class Texture {\n    constructor(image) {\n        this._image = image;\n    }\n    getImage() {\n        return this._image;\n    }\n}\nexport var TextureFilter;\n(function (TextureFilter) {\n    TextureFilter[TextureFilter[\"Nearest\"] = 9728] = \"Nearest\";\n    TextureFilter[TextureFilter[\"Linear\"] = 9729] = \"Linear\";\n    TextureFilter[TextureFilter[\"MipMap\"] = 9987] = \"MipMap\";\n    TextureFilter[TextureFilter[\"MipMapNearestNearest\"] = 9984] = \"MipMapNearestNearest\";\n    TextureFilter[TextureFilter[\"MipMapLinearNearest\"] = 9985] = \"MipMapLinearNearest\";\n    TextureFilter[TextureFilter[\"MipMapNearestLinear\"] = 9986] = \"MipMapNearestLinear\";\n    TextureFilter[TextureFilter[\"MipMapLinearLinear\"] = 9987] = \"MipMapLinearLinear\"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n})(TextureFilter || (TextureFilter = {}));\nexport var TextureWrap;\n(function (TextureWrap) {\n    TextureWrap[TextureWrap[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n    TextureWrap[TextureWrap[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n    TextureWrap[TextureWrap[\"Repeat\"] = 10497] = \"Repeat\"; // WebGLRenderingContext.REPEAT\n})(TextureWrap || (TextureWrap = {}));\nexport class TextureRegion {\n    constructor() {\n        this.u = 0;\n        this.v = 0;\n        this.u2 = 0;\n        this.v2 = 0;\n        this.width = 0;\n        this.height = 0;\n        this.degrees = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.originalWidth = 0;\n        this.originalHeight = 0;\n    }\n}\nexport class FakeTexture extends Texture {\n    setFilters(minFilter, magFilter) { }\n    setWraps(uWrap, vWrap) { }\n    dispose() { }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TextureFilter, TextureWrap, TextureRegion } from \"./Texture\";\nimport { Utils } from \"./Utils\";\nexport class TextureAtlas {\n    constructor(atlasText) {\n        this.pages = new Array();\n        this.regions = new Array();\n        let reader = new TextureAtlasReader(atlasText);\n        let entry = new Array(4);\n        let page = null;\n        let region = null;\n        let pageFields = {};\n        pageFields[\"size\"] = () => {\n            page.width = parseInt(entry[1]);\n            page.height = parseInt(entry[2]);\n        };\n        pageFields[\"format\"] = () => {\n            // page.format = Format[tuple[0]]; we don't need format in WebGL\n        };\n        pageFields[\"filter\"] = () => {\n            page.minFilter = Utils.enumValue(TextureFilter, entry[1]);\n            page.magFilter = Utils.enumValue(TextureFilter, entry[2]);\n        };\n        pageFields[\"repeat\"] = () => {\n            if (entry[1].indexOf('x') != -1)\n                page.uWrap = TextureWrap.Repeat;\n            if (entry[1].indexOf('y') != -1)\n                page.vWrap = TextureWrap.Repeat;\n        };\n        pageFields[\"pma\"] = () => {\n            page.pma = entry[1] == \"true\";\n        };\n        var regionFields = {};\n        regionFields[\"xy\"] = () => {\n            region.x = parseInt(entry[1]);\n            region.y = parseInt(entry[2]);\n        };\n        regionFields[\"size\"] = () => {\n            region.width = parseInt(entry[1]);\n            region.height = parseInt(entry[2]);\n        };\n        regionFields[\"bounds\"] = () => {\n            region.x = parseInt(entry[1]);\n            region.y = parseInt(entry[2]);\n            region.width = parseInt(entry[3]);\n            region.height = parseInt(entry[4]);\n        };\n        regionFields[\"offset\"] = () => {\n            region.offsetX = parseInt(entry[1]);\n            region.offsetY = parseInt(entry[2]);\n        };\n        regionFields[\"orig\"] = () => {\n            region.originalWidth = parseInt(entry[1]);\n            region.originalHeight = parseInt(entry[2]);\n        };\n        regionFields[\"offsets\"] = () => {\n            region.offsetX = parseInt(entry[1]);\n            region.offsetY = parseInt(entry[2]);\n            region.originalWidth = parseInt(entry[3]);\n            region.originalHeight = parseInt(entry[4]);\n        };\n        regionFields[\"rotate\"] = () => {\n            let value = entry[1];\n            if (value == \"true\")\n                region.degrees = 90;\n            else if (value != \"false\")\n                region.degrees = parseInt(value);\n        };\n        regionFields[\"index\"] = () => {\n            region.index = parseInt(entry[1]);\n        };\n        let line = reader.readLine();\n        // Ignore empty lines before first entry.\n        while (line && line.trim().length == 0)\n            line = reader.readLine();\n        // Header entries.\n        while (true) {\n            if (!line || line.trim().length == 0)\n                break;\n            if (reader.readEntry(entry, line) == 0)\n                break; // Silently ignore all header fields.\n            line = reader.readLine();\n        }\n        // Page and region entries.\n        let names = null;\n        let values = null;\n        while (true) {\n            if (line === null)\n                break;\n            if (line.trim().length == 0) {\n                page = null;\n                line = reader.readLine();\n            }\n            else if (!page) {\n                page = new TextureAtlasPage();\n                page.name = line.trim();\n                while (true) {\n                    if (reader.readEntry(entry, line = reader.readLine()) == 0)\n                        break;\n                    let field = pageFields[entry[0]];\n                    if (field)\n                        field();\n                }\n                this.pages.push(page);\n            }\n            else {\n                region = new TextureAtlasRegion();\n                region.page = page;\n                region.name = line;\n                while (true) {\n                    let count = reader.readEntry(entry, line = reader.readLine());\n                    if (count == 0)\n                        break;\n                    let field = regionFields[entry[0]];\n                    if (field)\n                        field();\n                    else {\n                        if (!names) {\n                            names = [];\n                            values = [];\n                        }\n                        names.push(entry[0]);\n                        let entryValues = [];\n                        for (let i = 0; i < count; i++)\n                            entryValues.push(parseInt(entry[i + 1]));\n                        values.push(entryValues);\n                    }\n                }\n                if (region.originalWidth == 0 && region.originalHeight == 0) {\n                    region.originalWidth = region.width;\n                    region.originalHeight = region.height;\n                }\n                if (names && names.length > 0) {\n                    region.names = names;\n                    region.values = values;\n                    names = null;\n                    values = null;\n                }\n                region.u = region.x / page.width;\n                region.v = region.y / page.height;\n                if (region.degrees == 90) {\n                    region.u2 = (region.x + region.height) / page.width;\n                    region.v2 = (region.y + region.width) / page.height;\n                }\n                else {\n                    region.u2 = (region.x + region.width) / page.width;\n                    region.v2 = (region.y + region.height) / page.height;\n                }\n                this.regions.push(region);\n            }\n        }\n    }\n    findRegion(name) {\n        for (let i = 0; i < this.regions.length; i++) {\n            if (this.regions[i].name == name) {\n                return this.regions[i];\n            }\n        }\n        return null;\n    }\n    setTextures(assetManager, path = \"\") {\n        for (let page of this.pages)\n            page.setTexture(assetManager.get(path));\n    }\n    dispose() {\n        for (let i = 0; i < this.pages.length; i++) {\n            this.pages[i].texture.dispose();\n        }\n    }\n}\nclass TextureAtlasReader {\n    constructor(text) {\n        this.index = 0;\n        this.lines = text.split(/\\r\\n|\\r|\\n/);\n    }\n    readLine() {\n        if (this.index >= this.lines.length)\n            return null;\n        return this.lines[this.index++];\n    }\n    readEntry(entry, line) {\n        if (!line)\n            return 0;\n        line = line.trim();\n        if (line.length == 0)\n            return 0;\n        let colon = line.indexOf(':');\n        if (colon == -1)\n            return 0;\n        entry[0] = line.substr(0, colon).trim();\n        for (let i = 1, lastMatch = colon + 1;; i++) {\n            let comma = line.indexOf(',', lastMatch);\n            if (comma == -1) {\n                entry[i] = line.substr(lastMatch).trim();\n                return i;\n            }\n            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();\n            lastMatch = comma + 1;\n            if (i == 4)\n                return 4;\n        }\n    }\n}\nexport class TextureAtlasPage {\n    constructor() {\n        this.minFilter = TextureFilter.Nearest;\n        this.magFilter = TextureFilter.Nearest;\n        this.uWrap = TextureWrap.ClampToEdge;\n        this.vWrap = TextureWrap.ClampToEdge;\n    }\n    setTexture(texture) {\n        this.texture = texture;\n        texture.setFilters(this.minFilter, this.magFilter);\n        texture.setWraps(this.uWrap, this.vWrap);\n    }\n}\nexport class TextureAtlasRegion extends TextureRegion {\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TextureAtlasRegion } from \"../TextureAtlas\";\nimport { Color, Utils } from \"../Utils\";\nimport { VertexAttachment } from \"./Attachment\";\n/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n *\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */\nexport class MeshAttachment extends VertexAttachment {\n    constructor(name) {\n        super(name);\n        /** The color to tint the mesh. */\n        this.color = new Color(1, 1, 1, 1);\n        this.tempColor = new Color(0, 0, 0, 0);\n    }\n    /** Calculates {@link #uvs} using {@link #regionUVs} and the {@link #region}. Must be called after changing the region UVs or\n     * region. */\n    updateUVs() {\n        let regionUVs = this.regionUVs;\n        if (!this.uvs || this.uvs.length != regionUVs.length)\n            this.uvs = Utils.newFloatArray(regionUVs.length);\n        let uvs = this.uvs;\n        let n = this.uvs.length;\n        let u = this.region.u, v = this.region.v, width = 0, height = 0;\n        if (this.region instanceof TextureAtlasRegion) {\n            let region = this.region, image = region.page.texture.getImage();\n            let textureWidth = image.width, textureHeight = image.height;\n            switch (region.degrees) {\n                case 90:\n                    u -= (region.originalHeight - region.offsetY - region.height) / textureWidth;\n                    v -= (region.originalWidth - region.offsetX - region.width) / textureHeight;\n                    width = region.originalHeight / textureWidth;\n                    height = region.originalWidth / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + regionUVs[i + 1] * width;\n                        uvs[i + 1] = v + (1 - regionUVs[i]) * height;\n                    }\n                    return;\n                case 180:\n                    u -= (region.originalWidth - region.offsetX - region.width) / textureWidth;\n                    v -= region.offsetY / textureHeight;\n                    width = region.originalWidth / textureWidth;\n                    height = region.originalHeight / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + (1 - regionUVs[i]) * width;\n                        uvs[i + 1] = v + (1 - regionUVs[i + 1]) * height;\n                    }\n                    return;\n                case 270:\n                    u -= region.offsetY / textureWidth;\n                    v -= region.offsetX / textureHeight;\n                    width = region.originalHeight / textureWidth;\n                    height = region.originalWidth / textureHeight;\n                    for (let i = 0; i < n; i += 2) {\n                        uvs[i] = u + (1 - regionUVs[i + 1]) * width;\n                        uvs[i + 1] = v + regionUVs[i] * height;\n                    }\n                    return;\n            }\n            u -= region.offsetX / textureWidth;\n            v -= (region.originalHeight - region.offsetY - region.height) / textureHeight;\n            width = region.originalWidth / textureWidth;\n            height = region.originalHeight / textureHeight;\n        }\n        else if (!this.region) {\n            u = v = 0;\n            width = height = 1;\n        }\n        else {\n            width = this.region.u2 - u;\n            height = this.region.v2 - v;\n        }\n        for (let i = 0; i < n; i += 2) {\n            uvs[i] = u + regionUVs[i] * width;\n            uvs[i + 1] = v + regionUVs[i + 1] * height;\n        }\n    }\n    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\n     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */\n    getParentMesh() {\n        return this.parentMesh;\n    }\n    /** @param parentMesh May be null. */\n    setParentMesh(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh) {\n            this.bones = parentMesh.bones;\n            this.vertices = parentMesh.vertices;\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\n        }\n    }\n    copy() {\n        if (this.parentMesh)\n            return this.newLinkedMesh();\n        let copy = new MeshAttachment(this.name);\n        copy.region = this.region;\n        copy.path = this.path;\n        copy.color.setFromColor(this.color);\n        this.copyTo(copy);\n        copy.regionUVs = new Array(this.regionUVs.length);\n        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\n        copy.uvs = new Array(this.uvs.length);\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);\n        copy.triangles = new Array(this.triangles.length);\n        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\n        copy.hullLength = this.hullLength;\n        // Nonessential.\n        if (this.edges) {\n            copy.edges = new Array(this.edges.length);\n            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\n        }\n        copy.width = this.width;\n        copy.height = this.height;\n        return copy;\n    }\n    /** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/\n    newLinkedMesh() {\n        let copy = new MeshAttachment(this.name);\n        copy.region = this.region;\n        copy.path = this.path;\n        copy.color.setFromColor(this.color);\n        copy.deformAttachment = this.deformAttachment;\n        copy.setParentMesh(this.parentMesh ? this.parentMesh : this);\n        copy.updateUVs();\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzaEF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXR0YWNobWVudHMvTWVzaEF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRy9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxLQUFLLEVBQW1CLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxjQUFjLENBQUM7QUFFNUQ7OzsrRkFHK0Y7QUFDL0YsTUFBTSxPQUFPLGNBQWUsU0FBUSxnQkFBZ0I7SUFvQ25ELFlBQWEsSUFBWTtRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFwQmIsa0NBQWtDO1FBQ2xDLFVBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQWdCOUIsY0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBSWxDLENBQUM7SUFFRDtpQkFDYTtJQUNiLFNBQVM7UUFDUixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3hCLElBQUks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LElBQUksS0FBSyxDQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQVMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFFbEMsZ0JBQWdCO1FBQ2hCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakU7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTFCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELGtIQUFrSDtJQUNsSCxhQUFhO1FBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDOUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QifQ==","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, Utils } from \"../Utils\";\nimport { VertexAttachment } from \"./Attachment\";\n/** An attachment whose vertices make up a composite Bezier curve.\n *\n * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */\nexport class PathAttachment extends VertexAttachment {\n    constructor(name) {\n        super(name);\n        /** If true, the start and end knots are connected. */\n        this.closed = false;\n        /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n         * calculations are performed but calculating positions along the path is less accurate. */\n        this.constantSpeed = false;\n        /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n         * rendered at runtime. */\n        this.color = new Color(1, 1, 1, 1);\n    }\n    copy() {\n        let copy = new PathAttachment(this.name);\n        this.copyTo(copy);\n        copy.lengths = new Array(this.lengths.length);\n        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n        copy.closed = closed;\n        copy.constantSpeed = this.constantSpeed;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aEF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXR0YWNobWVudHMvUGF0aEF0dGFjaG1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBYyxNQUFNLGNBQWMsQ0FBQztBQUU1RDs7OEdBRThHO0FBQzlHLE1BQU0sT0FBTyxjQUFlLFNBQVEsZ0JBQWdCO0lBZ0JuRCxZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBWmIsc0RBQXNEO1FBQ3RELFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZjttR0FDMkY7UUFDM0Ysa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFFdEI7a0NBQzBCO1FBQzFCLFVBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUk5QixDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLENBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRCJ9","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, MathUtils } from \"../Utils\";\nimport { VertexAttachment } from \"./Attachment\";\n/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\n * skin.\n *\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */\nexport class PointAttachment extends VertexAttachment {\n    constructor(name) {\n        super(name);\n        /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n         * are not usually rendered at runtime. */\n        this.color = new Color(0.38, 0.94, 0, 1);\n    }\n    computeWorldPosition(bone, point) {\n        point.x = this.x * bone.a + this.y * bone.b + bone.worldX;\n        point.y = this.x * bone.c + this.y * bone.d + bone.worldY;\n        return point;\n    }\n    computeWorldRotation(bone) {\n        let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);\n        let x = cos * bone.a + sin * bone.b;\n        let y = cos * bone.c + sin * bone.d;\n        return Math.atan2(y, x) * MathUtils.radDeg;\n    }\n    copy() {\n        let copy = new PointAttachment(this.name);\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.rotation = this.rotation;\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9pbnRBdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F0dGFjaG1lbnRzL1BvaW50QXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLEtBQUssRUFBVyxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDckQsT0FBTyxFQUFFLGdCQUFnQixFQUFjLE1BQU0sY0FBYyxDQUFDO0FBRTVEOzs7OzJHQUkyRztBQUMzRyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxnQkFBZ0I7SUFPcEQsWUFBYSxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUxiO2tEQUMwQztRQUMxQyxVQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFJcEMsQ0FBQztJQUVELG9CQUFvQixDQUFFLElBQVUsRUFBRSxLQUFjO1FBQy9DLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELG9CQUFvQixDQUFFLElBQVU7UUFDL0IsSUFBSSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksSUFBSSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QifQ==","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, Utils } from \"../Utils\";\nimport { Attachment } from \"./Attachment\";\n/** An attachment that displays a textured quadrilateral.\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */\nexport class RegionAttachment extends Attachment {\n    constructor(name) {\n        super(name);\n        /** The local x translation. */\n        this.x = 0;\n        /** The local y translation. */\n        this.y = 0;\n        /** The local scaleX. */\n        this.scaleX = 1;\n        /** The local scaleY. */\n        this.scaleY = 1;\n        /** The local rotation. */\n        this.rotation = 0;\n        /** The width of the region attachment in Spine. */\n        this.width = 0;\n        /** The height of the region attachment in Spine. */\n        this.height = 0;\n        /** The color to tint the region attachment. */\n        this.color = new Color(1, 1, 1, 1);\n        /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n         *\n         * See {@link #updateOffset()}. */\n        this.offset = Utils.newFloatArray(8);\n        this.uvs = Utils.newFloatArray(8);\n        this.tempColor = new Color(1, 1, 1, 1);\n    }\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n    updateOffset() {\n        let region = this.region;\n        let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n        let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n        let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n        let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n        let localX2 = localX + this.region.width * regionScaleX;\n        let localY2 = localY + this.region.height * regionScaleY;\n        let radians = this.rotation * Math.PI / 180;\n        let cos = Math.cos(radians);\n        let sin = Math.sin(radians);\n        let x = this.x, y = this.y;\n        let localXCos = localX * cos + x;\n        let localXSin = localX * sin;\n        let localYCos = localY * cos + y;\n        let localYSin = localY * sin;\n        let localX2Cos = localX2 * cos + x;\n        let localX2Sin = localX2 * sin;\n        let localY2Cos = localY2 * cos + y;\n        let localY2Sin = localY2 * sin;\n        let offset = this.offset;\n        offset[0] = localXCos - localYSin;\n        offset[1] = localYCos + localXSin;\n        offset[2] = localXCos - localY2Sin;\n        offset[3] = localY2Cos + localXSin;\n        offset[4] = localX2Cos - localY2Sin;\n        offset[5] = localY2Cos + localX2Sin;\n        offset[6] = localX2Cos - localYSin;\n        offset[7] = localYCos + localX2Sin;\n    }\n    setRegion(region) {\n        this.region = region;\n        let uvs = this.uvs;\n        if (region.degrees == 90) {\n            uvs[2] = region.u;\n            uvs[3] = region.v2;\n            uvs[4] = region.u;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v;\n            uvs[0] = region.u2;\n            uvs[1] = region.v2;\n        }\n        else {\n            uvs[0] = region.u;\n            uvs[1] = region.v2;\n            uvs[2] = region.u;\n            uvs[3] = region.v;\n            uvs[4] = region.u2;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v2;\n        }\n    }\n    /** Transforms the attachment's four vertices to world coordinates.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\n    computeWorldVertices(bone, worldVertices, offset, stride) {\n        let vertexOffset = this.offset;\n        let x = bone.worldX, y = bone.worldY;\n        let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n        let offsetX = 0, offsetY = 0;\n        offsetX = vertexOffset[0];\n        offsetY = vertexOffset[1];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[2];\n        offsetY = vertexOffset[3];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[4];\n        offsetY = vertexOffset[5];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n        offsetX = vertexOffset[6];\n        offsetY = vertexOffset[7];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    }\n    copy() {\n        let copy = new RegionAttachment(this.name);\n        copy.region = this.region;\n        copy.rendererObject = this.rendererObject;\n        copy.path = this.path;\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.scaleX = this.scaleX;\n        copy.scaleY = this.scaleY;\n        copy.rotation = this.rotation;\n        copy.width = this.width;\n        copy.height = this.height;\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n        copy.color.setFromColor(this.color);\n        return copy;\n    }\n}\nRegionAttachment.X1 = 0;\nRegionAttachment.Y1 = 1;\nRegionAttachment.C1R = 2;\nRegionAttachment.C1G = 3;\nRegionAttachment.C1B = 4;\nRegionAttachment.C1A = 5;\nRegionAttachment.U1 = 6;\nRegionAttachment.V1 = 7;\nRegionAttachment.X2 = 8;\nRegionAttachment.Y2 = 9;\nRegionAttachment.C2R = 10;\nRegionAttachment.C2G = 11;\nRegionAttachment.C2B = 12;\nRegionAttachment.C2A = 13;\nRegionAttachment.U2 = 14;\nRegionAttachment.V2 = 15;\nRegionAttachment.X3 = 16;\nRegionAttachment.Y3 = 17;\nRegionAttachment.C3R = 18;\nRegionAttachment.C3G = 19;\nRegionAttachment.C3B = 20;\nRegionAttachment.C3A = 21;\nRegionAttachment.U3 = 22;\nRegionAttachment.V3 = 23;\nRegionAttachment.X4 = 24;\nRegionAttachment.Y4 = 25;\nRegionAttachment.C4R = 26;\nRegionAttachment.C4G = 27;\nRegionAttachment.C4B = 28;\nRegionAttachment.C4A = 29;\nRegionAttachment.U4 = 30;\nRegionAttachment.V4 = 31;\n//# sourceMappingURL=data:application/json;base64,","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { BoundingBoxAttachment } from \"./attachments/BoundingBoxAttachment\";\nimport { ClippingAttachment } from \"./attachments/ClippingAttachment\";\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { PointAttachment } from \"./attachments/PointAttachment\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment\";\n/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.\n *\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\n * Spine Runtimes Guide. */\nexport class AtlasAttachmentLoader {\n    constructor(atlas) {\n        this.atlas = atlas;\n    }\n    newRegionAttachment(skin, name, path) {\n        let region = this.atlas.findRegion(path);\n        if (!region)\n            throw new Error(\"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\");\n        region.renderObject = region;\n        let attachment = new RegionAttachment(name);\n        attachment.setRegion(region);\n        return attachment;\n    }\n    newMeshAttachment(skin, name, path) {\n        let region = this.atlas.findRegion(path);\n        if (!region)\n            throw new Error(\"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\");\n        region.renderObject = region;\n        let attachment = new MeshAttachment(name);\n        attachment.region = region;\n        return attachment;\n    }\n    newBoundingBoxAttachment(skin, name) {\n        return new BoundingBoxAttachment(name);\n    }\n    newPathAttachment(skin, name) {\n        return new PathAttachment(name);\n    }\n    newPointAttachment(skin, name) {\n        return new PointAttachment(name);\n    }\n    newClippingAttachment(skin, name) {\n        return new ClippingAttachment(name);\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"./Utils\";\n/** Stores the setup pose for a {@link Bone}. */\nexport class BoneData {\n    constructor(index, name, parent) {\n        /** The local x translation. */\n        this.x = 0;\n        /** The local y translation. */\n        this.y = 0;\n        /** The local rotation. */\n        this.rotation = 0;\n        /** The local scaleX. */\n        this.scaleX = 1;\n        /** The local scaleY. */\n        this.scaleY = 1;\n        /** The local shearX. */\n        this.shearX = 0;\n        /** The local shearX. */\n        this.shearY = 0;\n        /** The transform mode for how parent world transforms affect this bone. */\n        this.transformMode = TransformMode.Normal;\n        /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n          * bone.\n          * @see Skin#bones */\n        this.skinRequired = false;\n        /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n         * rendered at runtime. */\n        this.color = new Color();\n        if (index < 0)\n            throw new Error(\"index must be >= 0.\");\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.index = index;\n        this.name = name;\n        this.parent = parent;\n    }\n}\n/** Determines how a bone inherits world transforms from parent bones. */\nexport var TransformMode;\n(function (TransformMode) {\n    TransformMode[TransformMode[\"Normal\"] = 0] = \"Normal\";\n    TransformMode[TransformMode[\"OnlyTranslation\"] = 1] = \"OnlyTranslation\";\n    TransformMode[TransformMode[\"NoRotationOrReflection\"] = 2] = \"NoRotationOrReflection\";\n    TransformMode[TransformMode[\"NoScale\"] = 3] = \"NoScale\";\n    TransformMode[TransformMode[\"NoScaleOrReflection\"] = 4] = \"NoScaleOrReflection\";\n})(TransformMode || (TransformMode = {}));","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TransformMode } from \"./BoneData\";\nimport { MathUtils } from \"./Utils\";\n/** Stores a bone's current pose.\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform. */\nexport class Bone {\n    /** @param parent May be null. */\n    constructor(data, skeleton, parent) {\n        /** The immediate children of this bone. */\n        this.children = new Array();\n        /** The local x translation. */\n        this.x = 0;\n        /** The local y translation. */\n        this.y = 0;\n        /** The local rotation in degrees, counter clockwise. */\n        this.rotation = 0;\n        /** The local scaleX. */\n        this.scaleX = 0;\n        /** The local scaleY. */\n        this.scaleY = 0;\n        /** The local shearX. */\n        this.shearX = 0;\n        /** The local shearY. */\n        this.shearY = 0;\n        /** The applied local x translation. */\n        this.ax = 0;\n        /** The applied local y translation. */\n        this.ay = 0;\n        /** The applied local rotation in degrees, counter clockwise. */\n        this.arotation = 0;\n        /** The applied local scaleX. */\n        this.ascaleX = 0;\n        /** The applied local scaleY. */\n        this.ascaleY = 0;\n        /** The applied local shearX. */\n        this.ashearX = 0;\n        /** The applied local shearY. */\n        this.ashearY = 0;\n        /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.a = 0;\n        /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.b = 0;\n        /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.c = 0;\n        /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.d = 0;\n        /** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.worldY = 0;\n        /** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */\n        this.worldX = 0;\n        this.sorted = false;\n        this.active = false;\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.skeleton = skeleton;\n        this.parent = parent;\n        this.setToSetupPose();\n    }\n    /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n      * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\n    isActive() {\n        return this.active;\n    }\n    /** Computes the world transform using the parent bone and this bone's local applied transform. */\n    update() {\n        this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\n    }\n    /** Computes the world transform using the parent bone and this bone's local transform.\n     *\n     * See {@link #updateWorldTransformWith()}. */\n    updateWorldTransform() {\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n    }\n    /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\n     * specified local transform. Child bones are not updated.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */\n    updateWorldTransformWith(x, y, rotation, scaleX, scaleY, shearX, shearY) {\n        this.ax = x;\n        this.ay = y;\n        this.arotation = rotation;\n        this.ascaleX = scaleX;\n        this.ascaleY = scaleY;\n        this.ashearX = shearX;\n        this.ashearY = shearY;\n        let parent = this.parent;\n        if (!parent) { // Root bone.\n            let skeleton = this.skeleton;\n            let rotationY = rotation + 90 + shearY;\n            let sx = skeleton.scaleX;\n            let sy = skeleton.scaleY;\n            this.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\n            this.b = MathUtils.cosDeg(rotationY) * scaleY * sx;\n            this.c = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\n            this.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\n            this.worldX = x * sx + skeleton.x;\n            this.worldY = y * sy + skeleton.y;\n            return;\n        }\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        this.worldX = pa * x + pb * y + parent.worldX;\n        this.worldY = pc * x + pd * y + parent.worldY;\n        switch (this.data.transformMode) {\n            case TransformMode.Normal: {\n                let rotationY = rotation + 90 + shearY;\n                let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                let lb = MathUtils.cosDeg(rotationY) * scaleY;\n                let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                let ld = MathUtils.sinDeg(rotationY) * scaleY;\n                this.a = pa * la + pb * lc;\n                this.b = pa * lb + pb * ld;\n                this.c = pc * la + pd * lc;\n                this.d = pc * lb + pd * ld;\n                return;\n            }\n            case TransformMode.OnlyTranslation: {\n                let rotationY = rotation + 90 + shearY;\n                this.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n                this.b = MathUtils.cosDeg(rotationY) * scaleY;\n                this.c = MathUtils.sinDeg(rotation + shearX) * scaleX;\n                this.d = MathUtils.sinDeg(rotationY) * scaleY;\n                break;\n            }\n            case TransformMode.NoRotationOrReflection: {\n                let s = pa * pa + pc * pc;\n                let prx = 0;\n                if (s > 0.0001) {\n                    s = Math.abs(pa * pd - pb * pc) / s;\n                    pa /= this.skeleton.scaleX;\n                    pc /= this.skeleton.scaleY;\n                    pb = pc * s;\n                    pd = pa * s;\n                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n                }\n                else {\n                    pa = 0;\n                    pc = 0;\n                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n                }\n                let rx = rotation + shearX - prx;\n                let ry = rotation + shearY - prx + 90;\n                let la = MathUtils.cosDeg(rx) * scaleX;\n                let lb = MathUtils.cosDeg(ry) * scaleY;\n                let lc = MathUtils.sinDeg(rx) * scaleX;\n                let ld = MathUtils.sinDeg(ry) * scaleY;\n                this.a = pa * la - pb * lc;\n                this.b = pa * lb - pb * ld;\n                this.c = pc * la + pd * lc;\n                this.d = pc * lb + pd * ld;\n                break;\n            }\n            case TransformMode.NoScale:\n            case TransformMode.NoScaleOrReflection: {\n                let cos = MathUtils.cosDeg(rotation);\n                let sin = MathUtils.sinDeg(rotation);\n                let za = (pa * cos + pb * sin) / this.skeleton.scaleX;\n                let zc = (pc * cos + pd * sin) / this.skeleton.scaleY;\n                let s = Math.sqrt(za * za + zc * zc);\n                if (s > 0.00001)\n                    s = 1 / s;\n                za *= s;\n                zc *= s;\n                s = Math.sqrt(za * za + zc * zc);\n                if (this.data.transformMode == TransformMode.NoScale\n                    && (pa * pd - pb * pc < 0) != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\n                    s = -s;\n                let r = Math.PI / 2 + Math.atan2(zc, za);\n                let zb = Math.cos(r) * s;\n                let zd = Math.sin(r) * s;\n                let la = MathUtils.cosDeg(shearX) * scaleX;\n                let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n                let lc = MathUtils.sinDeg(shearX) * scaleX;\n                let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n                this.a = za * la + zb * lc;\n                this.b = za * lb + zb * ld;\n                this.c = zc * la + zd * lc;\n                this.d = zc * lb + zd * ld;\n                break;\n            }\n        }\n        this.a *= this.skeleton.scaleX;\n        this.b *= this.skeleton.scaleX;\n        this.c *= this.skeleton.scaleY;\n        this.d *= this.skeleton.scaleY;\n    }\n    /** Sets this bone's local transform to the setup pose. */\n    setToSetupPose() {\n        let data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n        this.shearX = data.shearX;\n        this.shearY = data.shearY;\n    }\n    /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\n    getWorldRotationX() {\n        return Math.atan2(this.c, this.a) * MathUtils.radDeg;\n    }\n    /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\n    getWorldRotationY() {\n        return Math.atan2(this.d, this.b) * MathUtils.radDeg;\n    }\n    /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\n    getWorldScaleX() {\n        return Math.sqrt(this.a * this.a + this.c * this.c);\n    }\n    /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\n    getWorldScaleY() {\n        return Math.sqrt(this.b * this.b + this.d * this.d);\n    }\n    /** Computes the applied transform values from the world transform.\n     *\n     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\n     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\n     * constraints).\n     *\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\n    updateAppliedTransform() {\n        let parent = this.parent;\n        if (!parent) {\n            this.ax = this.worldX - this.skeleton.x;\n            this.ay = this.worldY - this.skeleton.y;\n            this.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;\n            this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);\n            this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);\n            this.ashearX = 0;\n            this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;\n            return;\n        }\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        let pid = 1 / (pa * pd - pb * pc);\n        let dx = this.worldX - parent.worldX, dy = this.worldY - parent.worldY;\n        this.ax = (dx * pd * pid - dy * pb * pid);\n        this.ay = (dy * pa * pid - dx * pc * pid);\n        let ia = pid * pd;\n        let id = pid * pa;\n        let ib = pid * pb;\n        let ic = pid * pc;\n        let ra = ia * this.a - ib * this.c;\n        let rb = ia * this.b - ib * this.d;\n        let rc = id * this.c - ic * this.a;\n        let rd = id * this.d - ic * this.b;\n        this.ashearX = 0;\n        this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n        if (this.ascaleX > 0.0001) {\n            let det = ra * rd - rb * rc;\n            this.ascaleY = det / this.ascaleX;\n            this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n        }\n        else {\n            this.ascaleX = 0;\n            this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n            this.ashearY = 0;\n            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n        }\n    }\n    /** Transforms a point from world coordinates to the bone's local coordinates. */\n    worldToLocal(world) {\n        let invDet = 1 / (this.a * this.d - this.b * this.c);\n        let x = world.x - this.worldX, y = world.y - this.worldY;\n        world.x = x * this.d * invDet - y * this.b * invDet;\n        world.y = y * this.a * invDet - x * this.c * invDet;\n        return world;\n    }\n    /** Transforms a point from the bone's local coordinates to world coordinates. */\n    localToWorld(local) {\n        let x = local.x, y = local.y;\n        local.x = x * this.a + y * this.b + this.worldX;\n        local.y = x * this.c + y * this.d + this.worldY;\n        return local;\n    }\n    /** Transforms a world rotation to a local rotation. */\n    worldToLocalRotation(worldRotation) {\n        let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);\n        return Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;\n    }\n    /** Transforms a local rotation to a world rotation. */\n    localToWorldRotation(localRotation) {\n        localRotation -= this.rotation - this.shearX;\n        let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);\n        return Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;\n    }\n    /** Rotates the world transform the specified amount.\n     * <p>\n     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\n     * need to be called on any child bones, recursively. */\n    rotateWorld(degrees) {\n        let a = this.a, b = this.b, c = this.c, d = this.d;\n        let cos = MathUtils.cosDeg(degrees), sin = MathUtils.sinDeg(degrees);\n        this.a = cos * a - sin * c;\n        this.b = cos * b - sin * d;\n        this.c = sin * a + cos * c;\n        this.d = sin * b + cos * d;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** The base class for all constraint datas. */\nexport class ConstraintData {\n    constructor(name, order, skinRequired) {\n        this.name = name;\n        this.order = order;\n        this.skinRequired = skinRequired;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TextureAtlas } from \"./TextureAtlas\";\nexport class AssetManagerBase {\n    constructor(onLoad, textureLoader, pathPrefix = \"\", downloader = null) {\n        this.assets = {};\n        this.errors = {};\n        this.toLoad = 0;\n        this.loaded = 0;\n        this.onLoad = onLoad;\n        this.textureLoader = textureLoader;\n        this.pathPrefix = pathPrefix;\n        this.downloader = downloader || new Downloader();\n    }\n    start(path) {\n        this.toLoad++;\n        return this.pathPrefix + path;\n    }\n    success(callback, path, asset) {\n        this.toLoad--;\n        this.loaded++;\n        this.assets[path] = asset;\n        if (callback)\n            callback(path, asset);\n        if (this.toLoad < 1) {\n            this.onLoad();\n        }\n    }\n    error(callback, path, message) {\n        this.toLoad--;\n        this.loaded++;\n        this.errors[path] = message;\n        if (callback)\n            callback(path, message);\n    }\n    setRawDataURI(path, data) {\n        this.downloader.rawDataUris[this.pathPrefix + path] = data;\n    }\n    loadBinary(path, success = null, error = null) {\n        path = this.start(path);\n        this.downloader.downloadBinary(path, (data) => {\n            this.success(success, path, data);\n        }, (status, responseText) => {\n            this.error(error, path, `Couldn't load binary ${path}: status ${status}, ${responseText}`);\n        });\n    }\n    loadText(path, success = null, error = null) {\n        path = this.start(path);\n        this.downloader.downloadText(path, (data) => {\n            this.success(success, path, data);\n        }, (status, responseText) => {\n            this.error(error, path, `Couldn't load text ${path}: status ${status}, ${responseText}`);\n        });\n    }\n    loadJson(path, success = null, error = null) {\n        path = this.start(path);\n        this.downloader.downloadJson(path, (data) => {\n            this.success(success, path, data);\n        }, (status, responseText) => {\n            this.error(error, path, `Couldn't load JSON ${path}: status ${status}, ${responseText}`);\n        });\n    }\n    loadTexture(path, success = null, error = null) {\n        path = this.start(path);\n        let isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document);\n        let isWebWorker = !isBrowser; // && typeof importScripts !== 'undefined';\n        if (isWebWorker) {\n            fetch(path, { mode: \"cors\" }).then((response) => {\n                if (response.ok)\n                    return response.blob();\n                this.error(error, path, `Couldn't load image: ${path}`);\n                return null;\n            }).then((blob) => {\n                return blob ? createImageBitmap(blob, { premultiplyAlpha: \"none\", colorSpaceConversion: \"none\" }) : null;\n            }).then((bitmap) => {\n                if (bitmap)\n                    this.success(success, path, this.textureLoader(bitmap));\n            });\n        }\n        else {\n            let image = new Image();\n            image.crossOrigin = \"anonymous\";\n            image.onload = () => {\n                this.success(success, path, this.textureLoader(image));\n            };\n            image.onerror = () => {\n                this.error(error, path, `Couldn't load image: ${path}`);\n            };\n            if (this.downloader.rawDataUris[path])\n                path = this.downloader.rawDataUris[path];\n            image.src = path;\n        }\n    }\n    loadTextureAtlas(path, success = null, error = null) {\n        let index = path.lastIndexOf(\"/\");\n        let parent = index >= 0 ? path.substring(0, index + 1) : \"\";\n        path = this.start(path);\n        this.downloader.downloadText(path, (atlasText) => {\n            try {\n                let atlas = new TextureAtlas(atlasText);\n                let toLoad = atlas.pages.length, abort = false;\n                for (let page of atlas.pages) {\n                    this.loadTexture(parent + page.name, (imagePath, texture) => {\n                        if (!abort) {\n                            page.setTexture(texture);\n                            if (--toLoad == 0)\n                                this.success(success, path, atlas);\n                        }\n                    }, (imagePath, message) => {\n                        if (!abort)\n                            this.error(error, path, `Couldn't load texture atlas ${path} page image: ${imagePath}`);\n                        abort = true;\n                    });\n                }\n            }\n            catch (e) {\n                this.error(error, path, `Couldn't parse texture atlas ${path}: ${e.message}`);\n            }\n        }, (status, responseText) => {\n            this.error(error, path, `Couldn't load texture atlas ${path}: status ${status}, ${responseText}`);\n        });\n    }\n    get(path) {\n        return this.assets[this.pathPrefix + path];\n    }\n    require(path) {\n        path = this.pathPrefix + path;\n        let asset = this.assets[path];\n        if (asset)\n            return asset;\n        let error = this.errors[path];\n        throw Error(\"Asset not found: \" + path + (error ? \"\\n\" + error : \"\"));\n    }\n    remove(path) {\n        path = this.pathPrefix + path;\n        let asset = this.assets[path];\n        if (asset.dispose)\n            asset.dispose();\n        delete this.assets[path];\n        return asset;\n    }\n    removeAll() {\n        for (let key in this.assets) {\n            let asset = this.assets[key];\n            if (asset.dispose)\n                asset.dispose();\n        }\n        this.assets = {};\n    }\n    isLoadingComplete() {\n        return this.toLoad == 0;\n    }\n    getToLoad() {\n        return this.toLoad;\n    }\n    getLoaded() {\n        return this.loaded;\n    }\n    dispose() {\n        this.removeAll();\n    }\n    hasErrors() {\n        return Object.keys(this.errors).length > 0;\n    }\n    getErrors() {\n        return this.errors;\n    }\n}\nexport class Downloader {\n    constructor() {\n        this.callbacks = {};\n        this.rawDataUris = {};\n    }\n    dataUriToString(dataUri) {\n        if (!dataUri.startsWith(\"data:\")) {\n            throw new Error(\"Not a data URI.\");\n        }\n        let base64Idx = dataUri.indexOf(\"base64,\");\n        if (base64Idx != -1) {\n            base64Idx += \"base64,\".length;\n            return atob(dataUri.substr(base64Idx));\n        }\n        else {\n            return dataUri.substr(dataUri.indexOf(\",\") + 1);\n        }\n    }\n    base64ToUint8Array(base64) {\n        var binary_string = window.atob(base64);\n        var len = binary_string.length;\n        var bytes = new Uint8Array(len);\n        for (var i = 0; i < len; i++) {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes;\n    }\n    dataUriToUint8Array(dataUri) {\n        if (!dataUri.startsWith(\"data:\")) {\n            throw new Error(\"Not a data URI.\");\n        }\n        let base64Idx = dataUri.indexOf(\"base64,\");\n        if (base64Idx == -1)\n            throw new Error(\"Not a binary data URI.\");\n        base64Idx += \"base64,\".length;\n        return this.base64ToUint8Array(dataUri.substr(base64Idx));\n    }\n    downloadText(url, success, error) {\n        if (this.start(url, success, error))\n            return;\n        if (this.rawDataUris[url]) {\n            try {\n                let dataUri = this.rawDataUris[url];\n                this.finish(url, 200, this.dataUriToString(dataUri));\n            }\n            catch (e) {\n                this.finish(url, 400, JSON.stringify(e));\n            }\n            return;\n        }\n        let request = new XMLHttpRequest();\n        request.overrideMimeType(\"text/html\");\n        request.open(\"GET\", url, true);\n        let done = () => {\n            this.finish(url, request.status, request.responseText);\n        };\n        request.onload = done;\n        request.onerror = done;\n        request.send();\n    }\n    downloadJson(url, success, error) {\n        this.downloadText(url, (data) => {\n            success(JSON.parse(data));\n        }, error);\n    }\n    downloadBinary(url, success, error) {\n        if (this.start(url, success, error))\n            return;\n        if (this.rawDataUris[url]) {\n            try {\n                let dataUri = this.rawDataUris[url];\n                this.finish(url, 200, this.dataUriToUint8Array(dataUri));\n            }\n            catch (e) {\n                this.finish(url, 400, JSON.stringify(e));\n            }\n            return;\n        }\n        let request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n        let onerror = () => {\n            this.finish(url, request.status, request.response);\n        };\n        request.onload = () => {\n            if (request.status == 200)\n                this.finish(url, 200, new Uint8Array(request.response));\n            else\n                onerror();\n        };\n        request.onerror = onerror;\n        request.send();\n    }\n    start(url, success, error) {\n        let callbacks = this.callbacks[url];\n        try {\n            if (callbacks)\n                return true;\n            this.callbacks[url] = callbacks = [];\n        }\n        finally {\n            callbacks.push(success, error);\n        }\n    }\n    finish(url, status, data) {\n        let callbacks = this.callbacks[url];\n        delete this.callbacks[url];\n        let args = status == 200 ? [data] : [status, data];\n        for (let i = args.length - 1, n = callbacks.length; i < n; i += 2)\n            callbacks[i].apply(null, args);\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the current pose values for an {@link Event}.\n *\n * See Timeline {@link Timeline#apply()},\n * AnimationStateListener {@link AnimationStateListener#event()}, and\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class Event {\n    constructor(time, data) {\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        this.time = time;\n        this.data = data;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the setup pose values for an {@link Event}.\n *\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */\nexport class EventData {\n    constructor(name) {\n        this.name = name;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TransformMode } from \"./BoneData\";\nimport { MathUtils } from \"./Utils\";\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\n * the last bone is as close to the target bone as possible.\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraint {\n    constructor(data, skeleton) {\n        /** Controls the bend direction of the IK bones, either 1 or -1. */\n        this.bendDirection = 0;\n        /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n        this.compress = false;\n        /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n         * and the parent bone has local nonuniform scale, stretch is not applied. */\n        this.stretch = false;\n        /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n        this.mix = 1;\n        /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n        this.softness = 0;\n        this.active = false;\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.mix = data.mix;\n        this.softness = data.softness;\n        this.bendDirection = data.bendDirection;\n        this.compress = data.compress;\n        this.stretch = data.stretch;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++)\n            this.bones.push(skeleton.findBone(data.bones[i].name));\n        this.target = skeleton.findBone(data.target.name);\n    }\n    isActive() {\n        return this.active;\n    }\n    update() {\n        if (this.mix == 0)\n            return;\n        let target = this.target;\n        let bones = this.bones;\n        switch (bones.length) {\n            case 1:\n                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\n                break;\n            case 2:\n                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);\n                break;\n        }\n    }\n    /** Applies 1 bone IK. The target is specified in the world coordinate system. */\n    apply1(bone, targetX, targetY, compress, stretch, uniform, alpha) {\n        let p = bone.parent;\n        let pa = p.a, pb = p.b, pc = p.c, pd = p.d;\n        let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;\n        switch (bone.data.transformMode) {\n            case TransformMode.OnlyTranslation:\n                tx = targetX - bone.worldX;\n                ty = targetY - bone.worldY;\n                break;\n            case TransformMode.NoRotationOrReflection:\n                let s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\n                let sa = pa / bone.skeleton.scaleX;\n                let sc = pc / bone.skeleton.scaleY;\n                pb = -sc * s * bone.skeleton.scaleX;\n                pd = sa * s * bone.skeleton.scaleY;\n                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\n            // Fall through\n            default:\n                let x = targetX - p.worldX, y = targetY - p.worldY;\n                let d = pa * pd - pb * pc;\n                tx = (x * pd - y * pb) / d - bone.ax;\n                ty = (y * pa - x * pc) / d - bone.ay;\n        }\n        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\n        if (bone.ascaleX < 0)\n            rotationIK += 180;\n        if (rotationIK > 180)\n            rotationIK -= 360;\n        else if (rotationIK < -180)\n            rotationIK += 360;\n        let sx = bone.ascaleX, sy = bone.ascaleY;\n        if (compress || stretch) {\n            switch (bone.data.transformMode) {\n                case TransformMode.NoScale:\n                case TransformMode.NoScaleOrReflection:\n                    tx = targetX - bone.worldX;\n                    ty = targetY - bone.worldY;\n            }\n            let b = bone.data.length * sx, dd = Math.sqrt(tx * tx + ty * ty);\n            if ((compress && dd < b) || (stretch && dd > b) && b > 0.0001) {\n                let s = (dd / b - 1) * alpha + 1;\n                sx *= s;\n                if (uniform)\n                    sy *= s;\n            }\n        }\n        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY);\n    }\n    /** Applies 2 bone IK. The target is specified in the world coordinate system.\n     * @param child A direct descendant of the parent bone. */\n    apply2(parent, child, targetX, targetY, bendDir, stretch, uniform, softness, alpha) {\n        let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;\n        let os1 = 0, os2 = 0, s2 = 0;\n        if (psx < 0) {\n            psx = -psx;\n            os1 = 180;\n            s2 = -1;\n        }\n        else {\n            os1 = 0;\n            s2 = 1;\n        }\n        if (psy < 0) {\n            psy = -psy;\n            s2 = -s2;\n        }\n        if (csx < 0) {\n            csx = -csx;\n            os2 = 180;\n        }\n        else\n            os2 = 0;\n        let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = parent.a, b = parent.b, c = parent.c, d = parent.d;\n        let u = Math.abs(psx - psy) <= 0.0001;\n        if (!u || stretch) {\n            cy = 0;\n            cwx = a * cx + parent.worldX;\n            cwy = c * cx + parent.worldY;\n        }\n        else {\n            cy = child.ay;\n            cwx = a * cx + b * cy + parent.worldX;\n            cwy = c * cx + d * cy + parent.worldY;\n        }\n        let pp = parent.parent;\n        a = pp.a;\n        b = pp.b;\n        c = pp.c;\n        d = pp.d;\n        let id = 1 / (a * d - b * c), x = cwx - pp.worldX, y = cwy - pp.worldY;\n        let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;\n        let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n        if (l1 < 0.0001) {\n            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\n            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n            return;\n        }\n        x = targetX - pp.worldX;\n        y = targetY - pp.worldY;\n        let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;\n        let dd = tx * tx + ty * ty;\n        if (softness != 0) {\n            softness *= psx * (csx + 1) * 0.5;\n            let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;\n            if (sd > 0) {\n                let p = Math.min(1, sd / (softness * 2)) - 1;\n                p = (sd - softness * (1 - p * p)) / td;\n                tx -= p * tx;\n                ty -= p * ty;\n                dd = tx * tx + ty * ty;\n            }\n        }\n        outer: if (u) {\n            l2 *= psx;\n            let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1) {\n                cos = -1;\n                a2 = Math.PI * bendDir;\n            }\n            else if (cos > 1) {\n                cos = 1;\n                a2 = 0;\n                if (stretch) {\n                    a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\n                    sx *= a;\n                    if (uniform)\n                        sy *= a;\n                }\n            }\n            else\n                a2 = Math.acos(cos) * bendDir;\n            a = l1 + l2 * cos;\n            b = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n        }\n        else {\n            a = psx * l2;\n            b = psy * l2;\n            let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);\n            c = bb * l1 * l1 + aa * dd - aa * bb;\n            let c1 = -2 * bb * l1, c2 = bb - aa;\n            d = c1 * c1 - 4 * c2 * c;\n            if (d >= 0) {\n                let q = Math.sqrt(d);\n                if (c1 < 0)\n                    q = -q;\n                q = -(c1 + q) * 0.5;\n                let r0 = q / c2, r1 = c / q;\n                let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                if (r * r <= dd) {\n                    y = Math.sqrt(dd - r * r) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;\n            let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;\n            c = -a * l1 / (aa - bb);\n            if (c >= -1 && c <= 1) {\n                c = Math.acos(c);\n                x = a * Math.cos(c) + l1;\n                y = b * Math.sin(c);\n                d = x * x + y * y;\n                if (d < minDist) {\n                    minAngle = c;\n                    minDist = d;\n                    minX = x;\n                    minY = y;\n                }\n                if (d > maxDist) {\n                    maxAngle = c;\n                    maxDist = d;\n                    maxX = x;\n                    maxY = y;\n                }\n            }\n            if (dd <= (minDist + maxDist) * 0.5) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            }\n            else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n        let os = Math.atan2(cy, cx) * s2;\n        let rotation = parent.arotation;\n        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n        if (a1 > 180)\n            a1 -= 360;\n        else if (a1 < -180) //\n            a1 += 360;\n        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);\n        rotation = child.arotation;\n        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n        if (a2 > 180)\n            a2 -= 360;\n        else if (a2 < -180) //\n            a2 += 360;\n        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData\";\n/** Stores the setup pose for an {@link IkConstraint}.\n * <p>\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */\nexport class IkConstraintData extends ConstraintData {\n    constructor(name) {\n        super(name, 0, false);\n        /** The bones that are constrained by this IK constraint. */\n        this.bones = new Array();\n        /** Controls the bend direction of the IK bones, either 1 or -1. */\n        this.bendDirection = 1;\n        /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n        this.compress = false;\n        /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n         * and the parent bone has local nonuniform scale, stretch is not applied. */\n        this.stretch = false;\n        /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n         * is scaled on both the X and Y axes. */\n        this.uniform = false;\n        /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n        this.mix = 1;\n        /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n        this.softness = 0;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData\";\n/** Stores the setup pose for a {@link PathConstraint}.\n *\n * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraintData extends ConstraintData {\n    constructor(name) {\n        super(name, 0, false);\n        /** The bones that will be modified by this path constraint. */\n        this.bones = new Array();\n        this.mixRotate = 0;\n        this.mixX = 0;\n        this.mixY = 0;\n    }\n}\n/** Controls how the first bone is positioned along the path.\n *\n * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */\nexport var PositionMode;\n(function (PositionMode) {\n    PositionMode[PositionMode[\"Fixed\"] = 0] = \"Fixed\";\n    PositionMode[PositionMode[\"Percent\"] = 1] = \"Percent\";\n})(PositionMode || (PositionMode = {}));\n/** Controls how bones after the first bone are positioned along the path.\n *\n * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */\nexport var SpacingMode;\n(function (SpacingMode) {\n    SpacingMode[SpacingMode[\"Length\"] = 0] = \"Length\";\n    SpacingMode[SpacingMode[\"Fixed\"] = 1] = \"Fixed\";\n    SpacingMode[SpacingMode[\"Percent\"] = 2] = \"Percent\";\n    SpacingMode[SpacingMode[\"Proportional\"] = 3] = \"Proportional\";\n})(SpacingMode || (SpacingMode = {}));\n/** Controls how bones are rotated, translated, and scaled to match the path.\n *\n * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */\nexport var RotateMode;\n(function (RotateMode) {\n    RotateMode[RotateMode[\"Tangent\"] = 0] = \"Tangent\";\n    RotateMode[RotateMode[\"Chain\"] = 1] = \"Chain\";\n    RotateMode[RotateMode[\"ChainScale\"] = 2] = \"ChainScale\";\n})(RotateMode || (RotateMode = {}));","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { RotateMode, SpacingMode, PositionMode } from \"./PathConstraintData\";\nimport { Utils, MathUtils } from \"./Utils\";\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraint {\n    constructor(data, skeleton) {\n        /** The position along the path. */\n        this.position = 0;\n        /** The spacing between bones. */\n        this.spacing = 0;\n        this.mixRotate = 0;\n        this.mixX = 0;\n        this.mixY = 0;\n        this.spaces = new Array();\n        this.positions = new Array();\n        this.world = new Array();\n        this.curves = new Array();\n        this.lengths = new Array();\n        this.segments = new Array();\n        this.active = false;\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0, n = data.bones.length; i < n; i++)\n            this.bones.push(skeleton.findBone(data.bones[i].name));\n        this.target = skeleton.findSlot(data.target.name);\n        this.position = data.position;\n        this.spacing = data.spacing;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n    }\n    isActive() {\n        return this.active;\n    }\n    update() {\n        let attachment = this.target.getAttachment();\n        if (!(attachment instanceof PathAttachment))\n            return;\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;\n        if (mixRotate == 0 && mixX == 0 && mixY == 0)\n            return;\n        let data = this.data;\n        let tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;\n        let bones = this.bones;\n        let boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;\n        let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : null;\n        let spacing = this.spacing;\n        switch (data.spacingMode) {\n            case SpacingMode.Percent:\n                if (scale) {\n                    for (let i = 0, n = spacesCount - 1; i < n; i++) {\n                        let bone = bones[i];\n                        let setupLength = bone.data.length;\n                        if (setupLength < PathConstraint.epsilon)\n                            lengths[i] = 0;\n                        else {\n                            let x = setupLength * bone.a, y = setupLength * bone.c;\n                            lengths[i] = Math.sqrt(x * x + y * y);\n                        }\n                    }\n                }\n                Utils.arrayFill(spaces, 1, spacesCount, spacing);\n                break;\n            case SpacingMode.Proportional:\n                let sum = 0;\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let setupLength = bone.data.length;\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale)\n                            lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    }\n                    else {\n                        let x = setupLength * bone.a, y = setupLength * bone.c;\n                        let length = Math.sqrt(x * x + y * y);\n                        if (scale)\n                            lengths[i] = length;\n                        spaces[++i] = length;\n                        sum += length;\n                    }\n                }\n                if (sum > 0) {\n                    sum = spacesCount / sum * spacing;\n                    for (let i = 1; i < spacesCount; i++)\n                        spaces[i] *= sum;\n                }\n                break;\n            default:\n                let lengthSpacing = data.spacingMode == SpacingMode.Length;\n                for (let i = 0, n = spacesCount - 1; i < n;) {\n                    let bone = bones[i];\n                    let setupLength = bone.data.length;\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale)\n                            lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    }\n                    else {\n                        let x = setupLength * bone.a, y = setupLength * bone.c;\n                        let length = Math.sqrt(x * x + y * y);\n                        if (scale)\n                            lengths[i] = length;\n                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n                    }\n                }\n        }\n        let positions = this.computeWorldPositions(attachment, spacesCount, tangents);\n        let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;\n        let tip = false;\n        if (offsetRotation == 0)\n            tip = data.rotateMode == RotateMode.Chain;\n        else {\n            tip = false;\n            let p = this.target.bone;\n            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        }\n        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n            let bone = bones[i];\n            bone.worldX += (boneX - bone.worldX) * mixX;\n            bone.worldY += (boneY - bone.worldY) * mixY;\n            let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;\n            if (scale) {\n                let length = lengths[i];\n                if (length != 0) {\n                    let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\n                    bone.a *= s;\n                    bone.c *= s;\n                }\n            }\n            boneX = x;\n            boneY = y;\n            if (mixRotate > 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d, r = 0, cos = 0, sin = 0;\n                if (tangents)\n                    r = positions[p - 1];\n                else if (spaces[i + 1] == 0)\n                    r = positions[p + 2];\n                else\n                    r = Math.atan2(dy, dx);\n                r -= Math.atan2(c, a);\n                if (tip) {\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                    let length = bone.data.length;\n                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\n                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\n                }\n                else {\n                    r += offsetRotation;\n                }\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                cos = Math.cos(r);\n                sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    computeWorldPositions(path, spacesCount, tangents) {\n        let target = this.target;\n        let position = this.position;\n        let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world = null;\n        let closed = path.closed;\n        let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;\n        if (!path.constantSpeed) {\n            let lengths = path.lengths;\n            curveCount -= closed ? 1 : 2;\n            let pathLength = lengths[curveCount];\n            if (this.data.positionMode == PositionMode.Percent)\n                position *= pathLength;\n            let multiplier;\n            switch (this.data.spacingMode) {\n                case SpacingMode.Percent:\n                    multiplier = pathLength;\n                    break;\n                case SpacingMode.Proportional:\n                    multiplier = pathLength / spacesCount;\n                    break;\n                default:\n                    multiplier = 1;\n            }\n            world = Utils.setArraySize(this.world, 8);\n            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n                let space = spaces[i] * multiplier;\n                position += space;\n                let p = position;\n                if (closed) {\n                    p %= pathLength;\n                    if (p < 0)\n                        p += pathLength;\n                    curve = 0;\n                }\n                else if (p < 0) {\n                    if (prevCurve != PathConstraint.BEFORE) {\n                        prevCurve = PathConstraint.BEFORE;\n                        path.computeWorldVertices(target, 2, 4, world, 0, 2);\n                    }\n                    this.addBeforePosition(p, world, 0, out, o);\n                    continue;\n                }\n                else if (p > pathLength) {\n                    if (prevCurve != PathConstraint.AFTER) {\n                        prevCurve = PathConstraint.AFTER;\n                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n                    }\n                    this.addAfterPosition(p - pathLength, world, 0, out, o);\n                    continue;\n                }\n                // Determine curve containing position.\n                for (;; curve++) {\n                    let length = lengths[curve];\n                    if (p > length)\n                        continue;\n                    if (curve == 0)\n                        p /= length;\n                    else {\n                        let prev = lengths[curve - 1];\n                        p = (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n                if (curve != prevCurve) {\n                    prevCurve = curve;\n                    if (closed && curve == curveCount) {\n                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2);\n                    }\n                    else\n                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n                }\n                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));\n            }\n            return out;\n        }\n        // World vertices.\n        if (closed) {\n            verticesLength += 2;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n            world[verticesLength - 2] = world[0];\n            world[verticesLength - 1] = world[1];\n        }\n        else {\n            curveCount--;\n            verticesLength -= 4;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n        }\n        // Curve lengths.\n        let curves = Utils.setArraySize(this.curves, curveCount);\n        let pathLength = 0;\n        let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;\n        let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;\n        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n            cx1 = world[w];\n            cy1 = world[w + 1];\n            cx2 = world[w + 2];\n            cy2 = world[w + 3];\n            x2 = world[w + 4];\n            y2 = world[w + 5];\n            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n            ddfx = tmpx * 2 + dddfx;\n            ddfy = tmpy * 2 + dddfy;\n            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            ddfx += dddfx;\n            ddfy += dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx + dddfx;\n            dfy += ddfy + dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            curves[i] = pathLength;\n            x1 = x2;\n            y1 = y2;\n        }\n        if (this.data.positionMode == PositionMode.Percent)\n            position *= pathLength;\n        let multiplier;\n        switch (this.data.spacingMode) {\n            case SpacingMode.Percent:\n                multiplier = pathLength;\n                break;\n            case SpacingMode.Proportional:\n                multiplier = pathLength / spacesCount;\n                break;\n            default:\n                multiplier = 1;\n        }\n        let segments = this.segments;\n        let curveLength = 0;\n        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n            let space = spaces[i] * multiplier;\n            position += space;\n            let p = position;\n            if (closed) {\n                p %= pathLength;\n                if (p < 0)\n                    p += pathLength;\n                curve = 0;\n            }\n            else if (p < 0) {\n                this.addBeforePosition(p, world, 0, out, o);\n                continue;\n            }\n            else if (p > pathLength) {\n                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n                continue;\n            }\n            // Determine curve containing position.\n            for (;; curve++) {\n                let length = curves[curve];\n                if (p > length)\n                    continue;\n                if (curve == 0)\n                    p /= length;\n                else {\n                    let prev = curves[curve - 1];\n                    p = (p - prev) / (length - prev);\n                }\n                break;\n            }\n            // Curve segment lengths.\n            if (curve != prevCurve) {\n                prevCurve = curve;\n                let ii = curve * 6;\n                x1 = world[ii];\n                y1 = world[ii + 1];\n                cx1 = world[ii + 2];\n                cy1 = world[ii + 3];\n                cx2 = world[ii + 4];\n                cy2 = world[ii + 5];\n                x2 = world[ii + 6];\n                y2 = world[ii + 7];\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n                ddfx = tmpx * 2 + dddfx;\n                ddfy = tmpy * 2 + dddfy;\n                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[0] = curveLength;\n                for (ii = 1; ii < 8; ii++) {\n                    dfx += ddfx;\n                    dfy += ddfy;\n                    ddfx += dddfx;\n                    ddfy += dddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[ii] = curveLength;\n                }\n                dfx += ddfx;\n                dfy += ddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[8] = curveLength;\n                dfx += ddfx + dddfx;\n                dfy += ddfy + dddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[9] = curveLength;\n                segment = 0;\n            }\n            // Weight by segment length.\n            p *= curveLength;\n            for (;; segment++) {\n                let length = segments[segment];\n                if (p > length)\n                    continue;\n                if (segment == 0)\n                    p /= length;\n                else {\n                    let prev = segments[segment - 1];\n                    p = segment + (p - prev) / (length - prev);\n                }\n                break;\n            }\n            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n        }\n        return out;\n    }\n    addBeforePosition(p, temp, i, out, o) {\n        let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n    addAfterPosition(p, temp, i, out, o) {\n        let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n    addCurvePosition(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {\n        if (p == 0 || isNaN(p)) {\n            out[o] = x1;\n            out[o + 1] = y1;\n            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n            return;\n        }\n        let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;\n        let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;\n        let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n        out[o] = x;\n        out[o + 1] = y;\n        if (tangents) {\n            if (p < 0.001)\n                out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n            else\n                out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n        }\n    }\n}\nPathConstraint.NONE = -1;\nPathConstraint.BEFORE = -2;\nPathConstraint.AFTER = -3;\nPathConstraint.epsilon = 0.00001;","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment\";\nimport { Color } from \"./Utils\";\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons. */\nexport class Slot {\n    constructor(data, bone) {\n        /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n         * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n         *\n         * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\n        this.deform = new Array();\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!bone)\n            throw new Error(\"bone cannot be null.\");\n        this.data = data;\n        this.bone = bone;\n        this.color = new Color();\n        this.darkColor = !data.darkColor ? null : new Color();\n        this.setToSetupPose();\n    }\n    /** The skeleton this slot belongs to. */\n    getSkeleton() {\n        return this.bone.skeleton;\n    }\n    /** The current attachment for the slot, or null if the slot has no attachment. */\n    getAttachment() {\n        return this.attachment;\n    }\n    /** Sets the slot's attachment and, if the attachment changed, resets {@link #attachmentTime} and clears the {@link #deform}.\n     * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getDeformAttachment()} as the specified\n     * attachment.\n     * @param attachment May be null. */\n    setAttachment(attachment) {\n        if (this.attachment == attachment)\n            return;\n        if (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment)\n            || attachment.deformAttachment != this.attachment.deformAttachment) {\n            this.deform.length = 0;\n        }\n        this.attachment = attachment;\n        this.attachmentTime = this.bone.skeleton.time;\n    }\n    setAttachmentTime(time) {\n        this.attachmentTime = this.bone.skeleton.time - time;\n    }\n    /** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\n     * {@link Skeleton#time}. */\n    getAttachmentTime() {\n        return this.bone.skeleton.time - this.attachmentTime;\n    }\n    /** Sets this slot to the setup pose. */\n    setToSetupPose() {\n        this.color.setFromColor(this.data.color);\n        if (this.darkColor)\n            this.darkColor.setFromColor(this.data.darkColor);\n        if (!this.data.attachmentName)\n            this.attachment = null;\n        else {\n            this.attachment = null;\n            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n        }\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Vector2, MathUtils } from \"./Utils\";\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraint {\n    constructor(data, skeleton) {\n        this.mixRotate = 0;\n        this.mixX = 0;\n        this.mixY = 0;\n        this.mixScaleX = 0;\n        this.mixScaleY = 0;\n        this.mixShearY = 0;\n        this.temp = new Vector2();\n        this.active = false;\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        if (!skeleton)\n            throw new Error(\"skeleton cannot be null.\");\n        this.data = data;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n        this.mixScaleX = data.mixScaleX;\n        this.mixScaleY = data.mixScaleY;\n        this.mixShearY = data.mixShearY;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++)\n            this.bones.push(skeleton.findBone(data.bones[i].name));\n        this.target = skeleton.findBone(data.target.name);\n    }\n    isActive() {\n        return this.active;\n    }\n    update() {\n        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleX == 0 && this.mixShearY == 0)\n            return;\n        if (this.data.local) {\n            if (this.data.relative)\n                this.applyRelativeLocal();\n            else\n                this.applyAbsoluteLocal();\n        }\n        else {\n            if (this.data.relative)\n                this.applyRelativeWorld();\n            else\n                this.applyAbsoluteWorld();\n        }\n    }\n    applyAbsoluteWorld() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n        let target = this.target;\n        let ta = target.a, tb = target.b, tc = target.c, td = target.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect;\n        let offsetShearY = this.data.offsetShearY * degRadReflect;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (mixRotate != 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                bone.worldX += (temp.x - bone.worldX) * mixX;\n                bone.worldY += (temp.y - bone.worldY) * mixY;\n            }\n            if (mixScaleX != 0) {\n                let s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);\n                if (s != 0)\n                    s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;\n                bone.a *= s;\n                bone.c *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);\n                if (s != 0)\n                    s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;\n                bone.b *= s;\n                bone.d *= s;\n            }\n            if (mixShearY > 0) {\n                let b = bone.b, d = bone.d;\n                let by = Math.atan2(d, b);\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r = by + (r + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                bone.b = Math.cos(r) * s;\n                bone.d = Math.sin(r) * s;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    applyRelativeWorld() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let translate = mixX != 0 || mixY != 0;\n        let target = this.target;\n        let ta = target.a, tb = target.b, tc = target.c, td = target.d;\n        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        let offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (mixRotate != 0) {\n                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;\n                let r = Math.atan2(tc, ta) + offsetRotation;\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                let cos = Math.cos(r), sin = Math.sin(r);\n                bone.a = cos * a - sin * c;\n                bone.b = cos * b - sin * d;\n                bone.c = sin * a + cos * c;\n                bone.d = sin * b + cos * d;\n            }\n            if (translate) {\n                let temp = this.temp;\n                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n                bone.worldX += temp.x * mixX;\n                bone.worldY += temp.y * mixY;\n            }\n            if (mixScaleX != 0) {\n                let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;\n                bone.a *= s;\n                bone.c *= s;\n            }\n            if (mixScaleY != 0) {\n                let s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;\n                bone.b *= s;\n                bone.d *= s;\n            }\n            if (mixShearY > 0) {\n                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n                if (r > MathUtils.PI)\n                    r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI) //\n                    r += MathUtils.PI2;\n                let b = bone.b, d = bone.d;\n                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;\n                let s = Math.sqrt(b * b + d * d);\n                bone.b = Math.cos(r) * s;\n                bone.d = Math.sin(r) * s;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n    applyAbsoluteLocal() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let target = this.target;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            let rotation = bone.arotation;\n            if (mixRotate != 0) {\n                let r = target.arotation - rotation + this.data.offsetRotation;\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                rotation += r * mixRotate;\n            }\n            let x = bone.ax, y = bone.ay;\n            x += (target.ax - x + this.data.offsetX) * mixX;\n            y += (target.ay - y + this.data.offsetY) * mixY;\n            let scaleX = bone.ascaleX, scaleY = bone.ascaleY;\n            if (mixScaleX != 0 && scaleX != 0)\n                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;\n            if (mixScaleY != 0 && scaleY != 0)\n                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;\n            let shearY = bone.ashearY;\n            if (mixShearY != 0) {\n                let r = target.ashearY - shearY + this.data.offsetShearY;\n                r -= (16384 - ((16384.499999999996 - r / 360) | 0)) * 360;\n                shearY += r * mixShearY;\n            }\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n    applyRelativeLocal() {\n        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;\n        let target = this.target;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            let rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;\n            let x = bone.ax + (target.ax + this.data.offsetX) * mixX;\n            let y = bone.ay + (target.ay + this.data.offsetY) * mixY;\n            let scaleX = bone.ascaleX * (((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);\n            let scaleY = bone.ascaleY * (((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);\n            let shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;\n            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n        }\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\nimport { PathAttachment } from \"./attachments/PathAttachment\";\nimport { RegionAttachment } from \"./attachments/RegionAttachment\";\nimport { Bone } from \"./Bone\";\nimport { IkConstraint } from \"./IkConstraint\";\nimport { PathConstraint } from \"./PathConstraint\";\nimport { Slot } from \"./Slot\";\nimport { TransformConstraint } from \"./TransformConstraint\";\nimport { Color, Utils, MathUtils } from \"./Utils\";\n/** Stores the current pose for a skeleton.\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */\nexport class Skeleton {\n    constructor(data) {\n        /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */\n        this._updateCache = new Array();\n        /** Returns the skeleton's time. This can be used for tracking, such as with Slot {@link Slot#attachmentTime}.\n         * <p>\n         * See {@link #update()}. */\n        this.time = 0;\n        /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n          * inheritance. */\n        this.scaleX = 1;\n        /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n          * inheritance. */\n        this.scaleY = 1;\n        /** Sets the skeleton X position, which is added to the root bone worldX position. */\n        this.x = 0;\n        /** Sets the skeleton Y position, which is added to the root bone worldY position. */\n        this.y = 0;\n        if (!data)\n            throw new Error(\"data cannot be null.\");\n        this.data = data;\n        this.bones = new Array();\n        for (let i = 0; i < data.bones.length; i++) {\n            let boneData = data.bones[i];\n            let bone;\n            if (!boneData.parent)\n                bone = new Bone(boneData, this, null);\n            else {\n                let parent = this.bones[boneData.parent.index];\n                bone = new Bone(boneData, this, parent);\n                parent.children.push(bone);\n            }\n            this.bones.push(bone);\n        }\n        this.slots = new Array();\n        this.drawOrder = new Array();\n        for (let i = 0; i < data.slots.length; i++) {\n            let slotData = data.slots[i];\n            let bone = this.bones[slotData.boneData.index];\n            let slot = new Slot(slotData, bone);\n            this.slots.push(slot);\n            this.drawOrder.push(slot);\n        }\n        this.ikConstraints = new Array();\n        for (let i = 0; i < data.ikConstraints.length; i++) {\n            let ikConstraintData = data.ikConstraints[i];\n            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n        }\n        this.transformConstraints = new Array();\n        for (let i = 0; i < data.transformConstraints.length; i++) {\n            let transformConstraintData = data.transformConstraints[i];\n            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n        }\n        this.pathConstraints = new Array();\n        for (let i = 0; i < data.pathConstraints.length; i++) {\n            let pathConstraintData = data.pathConstraints[i];\n            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n        }\n        this.color = new Color(1, 1, 1, 1);\n        this.updateCache();\n    }\n    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\n     * constraints, or weighted path attachments are added or removed. */\n    updateCache() {\n        let updateCache = this._updateCache;\n        updateCache.length = 0;\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.sorted = bone.data.skinRequired;\n            bone.active = !bone.sorted;\n        }\n        if (this.skin) {\n            let skinBones = this.skin.bones;\n            for (let i = 0, n = this.skin.bones.length; i < n; i++) {\n                let bone = this.bones[skinBones[i].index];\n                do {\n                    bone.sorted = false;\n                    bone.active = true;\n                    bone = bone.parent;\n                } while (bone);\n            }\n        }\n        // IK first, lowest hierarchy depth first.\n        let ikConstraints = this.ikConstraints;\n        let transformConstraints = this.transformConstraints;\n        let pathConstraints = this.pathConstraints;\n        let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length;\n        let constraintCount = ikCount + transformCount + pathCount;\n        outer: for (let i = 0; i < constraintCount; i++) {\n            for (let ii = 0; ii < ikCount; ii++) {\n                let constraint = ikConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortIkConstraint(constraint);\n                    continue outer;\n                }\n            }\n            for (let ii = 0; ii < transformCount; ii++) {\n                let constraint = transformConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortTransformConstraint(constraint);\n                    continue outer;\n                }\n            }\n            for (let ii = 0; ii < pathCount; ii++) {\n                let constraint = pathConstraints[ii];\n                if (constraint.data.order == i) {\n                    this.sortPathConstraint(constraint);\n                    continue outer;\n                }\n            }\n        }\n        for (let i = 0, n = bones.length; i < n; i++)\n            this.sortBone(bones[i]);\n    }\n    sortIkConstraint(constraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        let target = constraint.target;\n        this.sortBone(target);\n        let constrained = constraint.bones;\n        let parent = constrained[0];\n        this.sortBone(parent);\n        if (constrained.length == 1) {\n            this._updateCache.push(constraint);\n            this.sortReset(parent.children);\n        }\n        else {\n            let child = constrained[constrained.length - 1];\n            this.sortBone(child);\n            this._updateCache.push(constraint);\n            this.sortReset(parent.children);\n            child.sorted = true;\n        }\n    }\n    sortPathConstraint(constraint) {\n        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        let slot = constraint.target;\n        let slotIndex = slot.data.index;\n        let slotBone = slot.bone;\n        if (this.skin)\n            this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n        if (this.data.defaultSkin && this.data.defaultSkin != this.skin)\n            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n        for (let i = 0, n = this.data.skins.length; i < n; i++)\n            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n        let attachment = slot.getAttachment();\n        if (attachment instanceof PathAttachment)\n            this.sortPathConstraintAttachmentWith(attachment, slotBone);\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        for (let i = 0; i < boneCount; i++)\n            this.sortBone(constrained[i]);\n        this._updateCache.push(constraint);\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n    sortTransformConstraint(constraint) {\n        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));\n        if (!constraint.active)\n            return;\n        this.sortBone(constraint.target);\n        let constrained = constraint.bones;\n        let boneCount = constrained.length;\n        if (constraint.data.local) {\n            for (let i = 0; i < boneCount; i++) {\n                let child = constrained[i];\n                this.sortBone(child.parent);\n                this.sortBone(child);\n            }\n        }\n        else {\n            for (let i = 0; i < boneCount; i++) {\n                this.sortBone(constrained[i]);\n            }\n        }\n        this._updateCache.push(constraint);\n        for (let i = 0; i < boneCount; i++)\n            this.sortReset(constrained[i].children);\n        for (let i = 0; i < boneCount; i++)\n            constrained[i].sorted = true;\n    }\n    sortPathConstraintAttachment(skin, slotIndex, slotBone) {\n        let attachments = skin.attachments[slotIndex];\n        if (!attachments)\n            return;\n        for (let key in attachments) {\n            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n        }\n    }\n    sortPathConstraintAttachmentWith(attachment, slotBone) {\n        if (!(attachment instanceof PathAttachment))\n            return;\n        let pathBones = attachment.bones;\n        if (!pathBones)\n            this.sortBone(slotBone);\n        else {\n            let bones = this.bones;\n            for (let i = 0, n = pathBones.length; i < n;) {\n                let nn = pathBones[i++];\n                nn += i;\n                while (i < nn)\n                    this.sortBone(bones[pathBones[i++]]);\n            }\n        }\n    }\n    sortBone(bone) {\n        if (bone.sorted)\n            return;\n        let parent = bone.parent;\n        if (parent)\n            this.sortBone(parent);\n        bone.sorted = true;\n        this._updateCache.push(bone);\n    }\n    sortReset(bones) {\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (!bone.active)\n                continue;\n            if (bone.sorted)\n                this.sortReset(bone.children);\n            bone.sorted = false;\n        }\n    }\n    /** Updates the world transform for each bone and applies all constraints.\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide. */\n    updateWorldTransform() {\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            bone.ax = bone.x;\n            bone.ay = bone.y;\n            bone.arotation = bone.rotation;\n            bone.ascaleX = bone.scaleX;\n            bone.ascaleY = bone.scaleY;\n            bone.ashearX = bone.shearX;\n            bone.ashearY = bone.shearY;\n        }\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++)\n            updateCache[i].update();\n    }\n    updateWorldTransformWith(parent) {\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\n        let rootBone = this.getRootBone();\n        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;\n        rootBone.worldX = pa * this.x + pb * this.y + parent.worldX;\n        rootBone.worldY = pc * this.x + pd * this.y + parent.worldY;\n        let rotationY = rootBone.rotation + 90 + rootBone.shearY;\n        let la = MathUtils.cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n        let lb = MathUtils.cosDeg(rotationY) * rootBone.scaleY;\n        let lc = MathUtils.sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX;\n        let ld = MathUtils.sinDeg(rotationY) * rootBone.scaleY;\n        rootBone.a = (pa * la + pb * lc) * this.scaleX;\n        rootBone.b = (pa * lb + pb * ld) * this.scaleX;\n        rootBone.c = (pc * la + pd * lc) * this.scaleY;\n        rootBone.d = (pc * lb + pd * ld) * this.scaleY;\n        // Update everything except root bone.\n        let updateCache = this._updateCache;\n        for (let i = 0, n = updateCache.length; i < n; i++) {\n            let updatable = updateCache[i];\n            if (updatable != rootBone)\n                updatable.update();\n        }\n    }\n    /** Sets the bones, constraints, and slots to their setup pose values. */\n    setToSetupPose() {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    }\n    /** Sets the bones and constraints to their setup pose values. */\n    setBonesToSetupPose() {\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n        let ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            let constraint = ikConstraints[i];\n            constraint.mix = constraint.data.mix;\n            constraint.softness = constraint.data.softness;\n            constraint.bendDirection = constraint.data.bendDirection;\n            constraint.compress = constraint.data.compress;\n            constraint.stretch = constraint.data.stretch;\n        }\n        let transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            let constraint = transformConstraints[i];\n            let data = constraint.data;\n            constraint.mixRotate = data.mixRotate;\n            constraint.mixX = data.mixX;\n            constraint.mixY = data.mixY;\n            constraint.mixScaleX = data.mixScaleX;\n            constraint.mixScaleY = data.mixScaleY;\n            constraint.mixShearY = data.mixShearY;\n        }\n        let pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            let constraint = pathConstraints[i];\n            let data = constraint.data;\n            constraint.position = data.position;\n            constraint.spacing = data.spacing;\n            constraint.mixRotate = data.mixRotate;\n            constraint.mixX = data.mixX;\n            constraint.mixY = data.mixY;\n        }\n    }\n    /** Sets the slots and draw order to their setup pose values. */\n    setSlotsToSetupPose() {\n        let slots = this.slots;\n        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n        for (let i = 0, n = slots.length; i < n; i++)\n            slots[i].setToSetupPose();\n    }\n    /** @returns May return null. */\n    getRootBone() {\n        if (this.bones.length == 0)\n            return null;\n        return this.bones[0];\n    }\n    /** @returns May be null. */\n    findBone(boneName) {\n        if (!boneName)\n            throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (bone.data.name == boneName)\n                return bone;\n        }\n        return null;\n    }\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @returns May be null. */\n    findSlot(slotName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName)\n                return slot;\n        }\n        return null;\n    }\n    /** Sets a skin by name.\n     *\n     * See {@link #setSkin()}. */\n    setSkinByName(skinName) {\n        let skin = this.data.findSkin(skinName);\n        if (!skin)\n            throw new Error(\"Skin not found: \" + skinName);\n        this.setSkin(skin);\n    }\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the\n     * skin is changed, {@link #updateCache()} is called.\n     *\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n     * old skin, each slot's setup mode attachment is attached from the new skin.\n     *\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n     * @param newSkin May be null. */\n    setSkin(newSkin) {\n        if (newSkin == this.skin)\n            return;\n        if (newSkin) {\n            if (this.skin)\n                newSkin.attachAll(this, this.skin);\n            else {\n                let slots = this.slots;\n                for (let i = 0, n = slots.length; i < n; i++) {\n                    let slot = slots[i];\n                    let name = slot.data.attachmentName;\n                    if (name) {\n                        let attachment = newSkin.getAttachment(i, name);\n                        if (attachment)\n                            slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n        this.updateCache();\n    }\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\n     * name.\n     *\n     * See {@link #getAttachment()}.\n     * @returns May be null. */\n    getAttachmentByName(slotName, attachmentName) {\n        return this.getAttachment(this.data.findSlot(slotName).index, attachmentName);\n    }\n    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n     *\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n     * @returns May be null. */\n    getAttachment(slotIndex, attachmentName) {\n        if (!attachmentName)\n            throw new Error(\"attachmentName cannot be null.\");\n        if (this.skin) {\n            let attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment)\n                return attachment;\n        }\n        if (this.data.defaultSkin)\n            return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    }\n    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with\n     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.\n     * @param attachmentName May be null to clear the slot's attachment. */\n    setAttachment(slotName, attachmentName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.data.name == slotName) {\n                let attachment = null;\n                if (attachmentName) {\n                    attachment = this.getAttachment(i, attachmentName);\n                    if (!attachment)\n                        throw new Error(\"Attachment not found: \" + attachmentName + \", for slot: \" + slotName);\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw new Error(\"Slot not found: \" + slotName);\n    }\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findIkConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            let ikConstraint = ikConstraints[i];\n            if (ikConstraint.data.name == constraintName)\n                return ikConstraint;\n        }\n        return null;\n    }\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it repeatedly.\n     * @return May be null. */\n    findTransformConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            let constraint = transformConstraints[i];\n            if (constraint.data.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null. */\n    findPathConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            let constraint = pathConstraints[i];\n            if (constraint.data.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n     * @param size An output value, the width and height of the AABB.\n     * @param temp Working memory to temporarily store attachments' computed world vertices. */\n    getBounds(offset, size, temp = new Array(2)) {\n        if (!offset)\n            throw new Error(\"offset cannot be null.\");\n        if (!size)\n            throw new Error(\"size cannot be null.\");\n        let drawOrder = this.drawOrder;\n        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let slot = drawOrder[i];\n            if (!slot.bone.active)\n                continue;\n            let verticesLength = 0;\n            let vertices = null;\n            let attachment = slot.getAttachment();\n            if (attachment instanceof RegionAttachment) {\n                verticesLength = 8;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                attachment.computeWorldVertices(slot.bone, vertices, 0, 2);\n            }\n            else if (attachment instanceof MeshAttachment) {\n                let mesh = attachment;\n                verticesLength = mesh.worldVerticesLength;\n                vertices = Utils.setArraySize(temp, verticesLength, 0);\n                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n            }\n            if (vertices) {\n                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n                    let x = vertices[ii], y = vertices[ii + 1];\n                    minX = Math.min(minX, x);\n                    minY = Math.min(minY, y);\n                    maxX = Math.max(maxX, x);\n                    maxY = Math.max(maxY, y);\n                }\n            }\n        }\n        offset.set(minX, minY);\n        size.set(maxX - minX, maxY - minY);\n    }\n    /** Increments the skeleton's {@link #time}. */\n    update(delta) {\n        this.time += delta;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide. */\nexport class SkeletonData {\n    constructor() {\n        /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n        this.bones = new Array(); // Ordered parents first.\n        /** The skeleton's slots. */\n        this.slots = new Array(); // Setup pose draw order.\n        this.skins = new Array();\n        /** The skeleton's events. */\n        this.events = new Array();\n        /** The skeleton's animations. */\n        this.animations = new Array();\n        /** The skeleton's IK constraints. */\n        this.ikConstraints = new Array();\n        /** The skeleton's transform constraints. */\n        this.transformConstraints = new Array();\n        /** The skeleton's path constraints. */\n        this.pathConstraints = new Array();\n        // Nonessential\n        /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\n        this.fps = 0;\n    }\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findBone(boneName) {\n        if (!boneName)\n            throw new Error(\"boneName cannot be null.\");\n        let bones = this.bones;\n        for (let i = 0, n = bones.length; i < n; i++) {\n            let bone = bones[i];\n            if (bone.name == boneName)\n                return bone;\n        }\n        return null;\n    }\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSlot(slotName) {\n        if (!slotName)\n            throw new Error(\"slotName cannot be null.\");\n        let slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n            let slot = slots[i];\n            if (slot.name == slotName)\n                return slot;\n        }\n        return null;\n    }\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSkin(skinName) {\n        if (!skinName)\n            throw new Error(\"skinName cannot be null.\");\n        let skins = this.skins;\n        for (let i = 0, n = skins.length; i < n; i++) {\n            let skin = skins[i];\n            if (skin.name == skinName)\n                return skin;\n        }\n        return null;\n    }\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findEvent(eventDataName) {\n        if (!eventDataName)\n            throw new Error(\"eventDataName cannot be null.\");\n        let events = this.events;\n        for (let i = 0, n = events.length; i < n; i++) {\n            let event = events[i];\n            if (event.name == eventDataName)\n                return event;\n        }\n        return null;\n    }\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n     * call it multiple times.\n     * @returns May be null. */\n    findAnimation(animationName) {\n        if (!animationName)\n            throw new Error(\"animationName cannot be null.\");\n        let animations = this.animations;\n        for (let i = 0, n = animations.length; i < n; i++) {\n            let animation = animations[i];\n            if (animation.name == animationName)\n                return animation;\n        }\n        return null;\n    }\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findIkConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let ikConstraints = this.ikConstraints;\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            let constraint = ikConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it multiple times.\n     * @return May be null. */\n    findTransformConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let transformConstraints = this.transformConstraints;\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            let constraint = transformConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findPathConstraint(constraintName) {\n        if (!constraintName)\n            throw new Error(\"constraintName cannot be null.\");\n        let pathConstraints = this.pathConstraints;\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            let constraint = pathConstraints[i];\n            if (constraint.name == constraintName)\n                return constraint;\n        }\n        return null;\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { MeshAttachment } from \"./attachments/MeshAttachment\";\n/** Stores an entry in the skin consisting of the slot index, name, and attachment **/\nexport class SkinEntry {\n    constructor(slotIndex, name, attachment) {\n        this.slotIndex = slotIndex;\n        this.name = name;\n        this.attachment = attachment;\n    }\n}\n/** Stores attachments by slot index and attachment name.\n *\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */\nexport class Skin {\n    constructor(name) {\n        this.attachments = new Array();\n        this.bones = Array();\n        this.constraints = new Array();\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        this.name = name;\n    }\n    /** Adds an attachment to the skin for the specified slot index and name. */\n    setAttachment(slotIndex, name, attachment) {\n        if (!attachment)\n            throw new Error(\"attachment cannot be null.\");\n        let attachments = this.attachments;\n        if (slotIndex >= attachments.length)\n            attachments.length = slotIndex + 1;\n        if (!attachments[slotIndex])\n            attachments[slotIndex] = {};\n        attachments[slotIndex][name] = attachment;\n    }\n    /** Adds all attachments, bones, and constraints from the specified skin to this skin. */\n    addSkin(skin) {\n        for (let i = 0; i < skin.bones.length; i++) {\n            let bone = skin.bones[i];\n            let contained = false;\n            for (let ii = 0; ii < this.bones.length; ii++) {\n                if (this.bones[ii] == bone) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.bones.push(bone);\n        }\n        for (let i = 0; i < skin.constraints.length; i++) {\n            let constraint = skin.constraints[i];\n            let contained = false;\n            for (let ii = 0; ii < this.constraints.length; ii++) {\n                if (this.constraints[ii] == constraint) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.constraints.push(constraint);\n        }\n        let attachments = skin.getAttachments();\n        for (let i = 0; i < attachments.length; i++) {\n            var attachment = attachments[i];\n            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n        }\n    }\n    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\n    copySkin(skin) {\n        for (let i = 0; i < skin.bones.length; i++) {\n            let bone = skin.bones[i];\n            let contained = false;\n            for (let ii = 0; ii < this.bones.length; ii++) {\n                if (this.bones[ii] == bone) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.bones.push(bone);\n        }\n        for (let i = 0; i < skin.constraints.length; i++) {\n            let constraint = skin.constraints[i];\n            let contained = false;\n            for (let ii = 0; ii < this.constraints.length; ii++) {\n                if (this.constraints[ii] == constraint) {\n                    contained = true;\n                    break;\n                }\n            }\n            if (!contained)\n                this.constraints.push(constraint);\n        }\n        let attachments = skin.getAttachments();\n        for (let i = 0; i < attachments.length; i++) {\n            var attachment = attachments[i];\n            if (!attachment.attachment)\n                continue;\n            if (attachment.attachment instanceof MeshAttachment) {\n                attachment.attachment = attachment.attachment.newLinkedMesh();\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n            }\n            else {\n                attachment.attachment = attachment.attachment.copy();\n                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n            }\n        }\n    }\n    /** Returns the attachment for the specified slot index and name, or null. */\n    getAttachment(slotIndex, name) {\n        let dictionary = this.attachments[slotIndex];\n        return dictionary ? dictionary[name] : null;\n    }\n    /** Removes the attachment in the skin for the specified slot index and name, if any. */\n    removeAttachment(slotIndex, name) {\n        let dictionary = this.attachments[slotIndex];\n        if (dictionary)\n            dictionary[name] = null;\n    }\n    /** Returns all attachments in this skin. */\n    getAttachments() {\n        let entries = new Array();\n        for (var i = 0; i < this.attachments.length; i++) {\n            let slotAttachments = this.attachments[i];\n            if (slotAttachments) {\n                for (let name in slotAttachments) {\n                    let attachment = slotAttachments[name];\n                    if (attachment)\n                        entries.push(new SkinEntry(i, name, attachment));\n                }\n            }\n        }\n        return entries;\n    }\n    /** Returns all attachments in this skin for the specified slot index. */\n    getAttachmentsForSlot(slotIndex, attachments) {\n        let slotAttachments = this.attachments[slotIndex];\n        if (slotAttachments) {\n            for (let name in slotAttachments) {\n                let attachment = slotAttachments[name];\n                if (attachment)\n                    attachments.push(new SkinEntry(slotIndex, name, attachment));\n            }\n        }\n    }\n    /** Clears all attachments, bones, and constraints. */\n    clear() {\n        this.attachments.length = 0;\n        this.bones.length = 0;\n        this.constraints.length = 0;\n    }\n    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n    attachAll(skeleton, oldSkin) {\n        let slotIndex = 0;\n        for (let i = 0; i < skeleton.slots.length; i++) {\n            let slot = skeleton.slots[i];\n            let slotAttachment = slot.getAttachment();\n            if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n                let dictionary = oldSkin.attachments[slotIndex];\n                for (let key in dictionary) {\n                    let skinAttachment = dictionary[key];\n                    if (slotAttachment == skinAttachment) {\n                        let attachment = this.getAttachment(slotIndex, key);\n                        if (attachment)\n                            slot.setAttachment(attachment);\n                        break;\n                    }\n                }\n            }\n            slotIndex++;\n        }\n    }\n}","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"./Utils\";\n/** Stores the setup pose for a {@link Slot}. */\nexport class SlotData {\n    constructor(index, name, boneData) {\n        /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n         * color tinting. */\n        this.color = new Color(1, 1, 1, 1);\n        if (index < 0)\n            throw new Error(\"index must be >= 0.\");\n        if (!name)\n            throw new Error(\"name cannot be null.\");\n        if (!boneData)\n            throw new Error(\"boneData cannot be null.\");\n        this.index = index;\n        this.name = name;\n        this.boneData = boneData;\n    }\n}\n/** Determines how images are blended with existing pixels when drawn. */\nexport var BlendMode;\n(function (BlendMode) {\n    BlendMode[BlendMode[\"Normal\"] = 0] = \"Normal\";\n    BlendMode[BlendMode[\"Additive\"] = 1] = \"Additive\";\n    BlendMode[BlendMode[\"Multiply\"] = 2] = \"Multiply\";\n    BlendMode[BlendMode[\"Screen\"] = 3] = \"Screen\";\n})(BlendMode || (BlendMode = {}));","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { ConstraintData } from \"./ConstraintData\";\n/** Stores the setup pose for a {@link TransformConstraint}.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */\nexport class TransformConstraintData extends ConstraintData {\n    constructor(name) {\n        super(name, 0, false);\n        /** The bones that will be modified by this transform constraint. */\n        this.bones = new Array();\n        this.mixRotate = 0;\n        this.mixX = 0;\n        this.mixY = 0;\n        this.mixScaleX = 0;\n        this.mixScaleY = 0;\n        this.mixShearY = 0;\n        /** An offset added to the constrained bone rotation. */\n        this.offsetRotation = 0;\n        /** An offset added to the constrained bone X translation. */\n        this.offsetX = 0;\n        /** An offset added to the constrained bone Y translation. */\n        this.offsetY = 0;\n        /** An offset added to the constrained bone scaleX. */\n        this.offsetScaleX = 0;\n        /** An offset added to the constrained bone scaleY. */\n        this.offsetScaleY = 0;\n        /** An offset added to the constrained bone shearY. */\n        this.offsetShearY = 0;\n        this.relative = false;\n        this.local = false;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNmb3JtQ29uc3RyYWludERhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVHJhbnNmb3JtQ29uc3RyYWludERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrRUEyQitFO0FBRS9FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdsRDs7bUhBRW1IO0FBQ25ILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxjQUFjO0lBb0MxRCxZQUFhLElBQVk7UUFDeEIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFuQ3ZCLG9FQUFvRTtRQUNwRSxVQUFLLEdBQUcsSUFBSSxLQUFLLEVBQVksQ0FBQztRQUs5QixjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsU0FBSSxHQUFHLENBQUMsQ0FBQztRQUNULFNBQUksR0FBRyxDQUFDLENBQUM7UUFDVCxjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFFZCx3REFBd0Q7UUFDeEQsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFFbkIsNkRBQTZEO1FBQzdELFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWiw2REFBNkQ7UUFDN0QsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUVaLHNEQUFzRDtRQUN0RCxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQUVqQixzREFBc0Q7UUFDdEQsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFFakIsc0RBQXNEO1FBQ3RELGlCQUFZLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsVUFBSyxHQUFHLEtBQUssQ0FBQztJQUlkLENBQUM7Q0FDRCJ9","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, AttachmentTimeline, RGBATimeline, RGBTimeline, RGBA2Timeline, RGB2Timeline, AlphaTimeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline } from \"./Animation\";\nimport { BoneData } from \"./BoneData\";\nimport { Event } from \"./Event\";\nimport { EventData } from \"./EventData\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { PathConstraintData, PositionMode, SpacingMode } from \"./PathConstraintData\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { Skin } from \"./Skin\";\nimport { SlotData } from \"./SlotData\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\nimport { Color, Utils } from \"./Utils\";\n/** Loads skeleton data in the Spine binary format.\n *\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonBinary {\n    constructor(attachmentLoader) {\n        /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n         * runtime than were used in Spine.\n         *\n         * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n        this.scale = 1;\n        this.linkedMeshes = new Array();\n        this.attachmentLoader = attachmentLoader;\n    }\n    readSkeletonData(binary) {\n        let scale = this.scale;\n        let skeletonData = new SkeletonData();\n        skeletonData.name = \"\"; // BOZO\n        let input = new BinaryInput(binary);\n        let lowHash = input.readInt32();\n        let highHash = input.readInt32();\n        skeletonData.hash = highHash == 0 && lowHash == 0 ? null : highHash.toString(16) + lowHash.toString(16);\n        skeletonData.version = input.readString();\n        skeletonData.x = input.readFloat();\n        skeletonData.y = input.readFloat();\n        skeletonData.width = input.readFloat();\n        skeletonData.height = input.readFloat();\n        let nonessential = input.readBoolean();\n        if (nonessential) {\n            skeletonData.fps = input.readFloat();\n            skeletonData.imagesPath = input.readString();\n            skeletonData.audioPath = input.readString();\n        }\n        let n = 0;\n        // Strings.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++)\n            input.strings.push(input.readString());\n        // Bones.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let name = input.readString();\n            let parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\n            let data = new BoneData(i, name, parent);\n            data.rotation = input.readFloat();\n            data.x = input.readFloat() * scale;\n            data.y = input.readFloat() * scale;\n            data.scaleX = input.readFloat();\n            data.scaleY = input.readFloat();\n            data.shearX = input.readFloat();\n            data.shearY = input.readFloat();\n            data.length = input.readFloat() * scale;\n            data.transformMode = input.readInt(true);\n            data.skinRequired = input.readBoolean();\n            if (nonessential)\n                Color.rgba8888ToColor(data.color, input.readInt32());\n            skeletonData.bones.push(data);\n        }\n        // Slots.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let slotName = input.readString();\n            let boneData = skeletonData.bones[input.readInt(true)];\n            let data = new SlotData(i, slotName, boneData);\n            Color.rgba8888ToColor(data.color, input.readInt32());\n            let darkColor = input.readInt32();\n            if (darkColor != -1)\n                Color.rgb888ToColor(data.darkColor = new Color(), darkColor);\n            data.attachmentName = input.readStringRef();\n            data.blendMode = input.readInt(true);\n            skeletonData.slots.push(data);\n        }\n        // IK constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let data = new IkConstraintData(input.readString());\n            data.order = input.readInt(true);\n            data.skinRequired = input.readBoolean();\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.bones[input.readInt(true)];\n            data.mix = input.readFloat();\n            data.softness = input.readFloat() * scale;\n            data.bendDirection = input.readByte();\n            data.compress = input.readBoolean();\n            data.stretch = input.readBoolean();\n            data.uniform = input.readBoolean();\n            skeletonData.ikConstraints.push(data);\n        }\n        // Transform constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let data = new TransformConstraintData(input.readString());\n            data.order = input.readInt(true);\n            data.skinRequired = input.readBoolean();\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.bones[input.readInt(true)];\n            data.local = input.readBoolean();\n            data.relative = input.readBoolean();\n            data.offsetRotation = input.readFloat();\n            data.offsetX = input.readFloat() * scale;\n            data.offsetY = input.readFloat() * scale;\n            data.offsetScaleX = input.readFloat();\n            data.offsetScaleY = input.readFloat();\n            data.offsetShearY = input.readFloat();\n            data.mixRotate = input.readFloat();\n            data.mixX = input.readFloat();\n            data.mixY = input.readFloat();\n            data.mixScaleX = input.readFloat();\n            data.mixScaleY = input.readFloat();\n            data.mixShearY = input.readFloat();\n            skeletonData.transformConstraints.push(data);\n        }\n        // Path constraints.\n        n = input.readInt(true);\n        for (let i = 0, nn; i < n; i++) {\n            let data = new PathConstraintData(input.readString());\n            data.order = input.readInt(true);\n            data.skinRequired = input.readBoolean();\n            nn = input.readInt(true);\n            for (let ii = 0; ii < nn; ii++)\n                data.bones.push(skeletonData.bones[input.readInt(true)]);\n            data.target = skeletonData.slots[input.readInt(true)];\n            data.positionMode = input.readInt(true);\n            data.spacingMode = input.readInt(true);\n            data.rotateMode = input.readInt(true);\n            data.offsetRotation = input.readFloat();\n            data.position = input.readFloat();\n            if (data.positionMode == PositionMode.Fixed)\n                data.position *= scale;\n            data.spacing = input.readFloat();\n            if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                data.spacing *= scale;\n            data.mixRotate = input.readFloat();\n            data.mixX = input.readFloat();\n            data.mixY = input.readFloat();\n            skeletonData.pathConstraints.push(data);\n        }\n        // Default skin.\n        let defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\n        if (defaultSkin) {\n            skeletonData.defaultSkin = defaultSkin;\n            skeletonData.skins.push(defaultSkin);\n        }\n        // Skins.\n        {\n            let i = skeletonData.skins.length;\n            Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\n            for (; i < n; i++)\n                skeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\n        }\n        // Linked meshes.\n        n = this.linkedMeshes.length;\n        for (let i = 0; i < n; i++) {\n            let linkedMesh = this.linkedMeshes[i];\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent : linkedMesh.mesh;\n            linkedMesh.mesh.setParentMesh(parent);\n            linkedMesh.mesh.updateUVs();\n        }\n        this.linkedMeshes.length = 0;\n        // Events.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++) {\n            let data = new EventData(input.readStringRef());\n            data.intValue = input.readInt(false);\n            data.floatValue = input.readFloat();\n            data.stringValue = input.readString();\n            data.audioPath = input.readString();\n            if (data.audioPath) {\n                data.volume = input.readFloat();\n                data.balance = input.readFloat();\n            }\n            skeletonData.events.push(data);\n        }\n        // Animations.\n        n = input.readInt(true);\n        for (let i = 0; i < n; i++)\n            skeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\n        return skeletonData;\n    }\n    readSkin(input, skeletonData, defaultSkin, nonessential) {\n        let skin = null;\n        let slotCount = 0;\n        if (defaultSkin) {\n            slotCount = input.readInt(true);\n            if (slotCount == 0)\n                return null;\n            skin = new Skin(\"default\");\n        }\n        else {\n            skin = new Skin(input.readStringRef());\n            skin.bones.length = input.readInt(true);\n            for (let i = 0, n = skin.bones.length; i < n; i++)\n                skin.bones[i] = skeletonData.bones[input.readInt(true)];\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\n            for (let i = 0, n = input.readInt(true); i < n; i++)\n                skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\n            slotCount = input.readInt(true);\n        }\n        for (let i = 0; i < slotCount; i++) {\n            let slotIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let name = input.readStringRef();\n                let attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\n                if (attachment)\n                    skin.setAttachment(slotIndex, name, attachment);\n            }\n        }\n        return skin;\n    }\n    readAttachment(input, skeletonData, skin, slotIndex, attachmentName, nonessential) {\n        let scale = this.scale;\n        let name = input.readStringRef();\n        if (!name)\n            name = attachmentName;\n        switch (input.readByte()) {\n            case AttachmentType.Region: {\n                let path = input.readStringRef();\n                let rotation = input.readFloat();\n                let x = input.readFloat();\n                let y = input.readFloat();\n                let scaleX = input.readFloat();\n                let scaleY = input.readFloat();\n                let width = input.readFloat();\n                let height = input.readFloat();\n                let color = input.readInt32();\n                if (!path)\n                    path = name;\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n                if (!region)\n                    return null;\n                region.path = path;\n                region.x = x * scale;\n                region.y = y * scale;\n                region.scaleX = scaleX;\n                region.scaleY = scaleY;\n                region.rotation = rotation;\n                region.width = width * scale;\n                region.height = height * scale;\n                Color.rgba8888ToColor(region.color, color);\n                region.updateOffset();\n                return region;\n            }\n            case AttachmentType.BoundingBox: {\n                let vertexCount = input.readInt(true);\n                let vertices = this.readVertices(input, vertexCount);\n                let color = nonessential ? input.readInt32() : 0;\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                if (!box)\n                    return null;\n                box.worldVerticesLength = vertexCount << 1;\n                box.vertices = vertices.vertices;\n                box.bones = vertices.bones;\n                if (nonessential)\n                    Color.rgba8888ToColor(box.color, color);\n                return box;\n            }\n            case AttachmentType.Mesh: {\n                let path = input.readStringRef();\n                let color = input.readInt32();\n                let vertexCount = input.readInt(true);\n                let uvs = this.readFloatArray(input, vertexCount << 1, 1);\n                let triangles = this.readShortArray(input);\n                let vertices = this.readVertices(input, vertexCount);\n                let hullLength = input.readInt(true);\n                let edges = null;\n                let width = 0, height = 0;\n                if (nonessential) {\n                    edges = this.readShortArray(input);\n                    width = input.readFloat();\n                    height = input.readFloat();\n                }\n                if (!path)\n                    path = name;\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                Color.rgba8888ToColor(mesh.color, color);\n                mesh.bones = vertices.bones;\n                mesh.vertices = vertices.vertices;\n                mesh.worldVerticesLength = vertexCount << 1;\n                mesh.triangles = triangles;\n                mesh.regionUVs = uvs;\n                mesh.updateUVs();\n                mesh.hullLength = hullLength << 1;\n                if (nonessential) {\n                    mesh.edges = edges;\n                    mesh.width = width * scale;\n                    mesh.height = height * scale;\n                }\n                return mesh;\n            }\n            case AttachmentType.LinkedMesh: {\n                let path = input.readStringRef();\n                let color = input.readInt32();\n                let skinName = input.readStringRef();\n                let parent = input.readStringRef();\n                let inheritDeform = input.readBoolean();\n                let width = 0, height = 0;\n                if (nonessential) {\n                    width = input.readFloat();\n                    height = input.readFloat();\n                }\n                if (!path)\n                    path = name;\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                Color.rgba8888ToColor(mesh.color, color);\n                if (nonessential) {\n                    mesh.width = width * scale;\n                    mesh.height = height * scale;\n                }\n                this.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\n                return mesh;\n            }\n            case AttachmentType.Path: {\n                let closed = input.readBoolean();\n                let constantSpeed = input.readBoolean();\n                let vertexCount = input.readInt(true);\n                let vertices = this.readVertices(input, vertexCount);\n                let lengths = Utils.newArray(vertexCount / 3, 0);\n                for (let i = 0, n = lengths.length; i < n; i++)\n                    lengths[i] = input.readFloat() * scale;\n                let color = nonessential ? input.readInt32() : 0;\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\n                if (!path)\n                    return null;\n                path.closed = closed;\n                path.constantSpeed = constantSpeed;\n                path.worldVerticesLength = vertexCount << 1;\n                path.vertices = vertices.vertices;\n                path.bones = vertices.bones;\n                path.lengths = lengths;\n                if (nonessential)\n                    Color.rgba8888ToColor(path.color, color);\n                return path;\n            }\n            case AttachmentType.Point: {\n                let rotation = input.readFloat();\n                let x = input.readFloat();\n                let y = input.readFloat();\n                let color = nonessential ? input.readInt32() : 0;\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\n                if (!point)\n                    return null;\n                point.x = x * scale;\n                point.y = y * scale;\n                point.rotation = rotation;\n                if (nonessential)\n                    Color.rgba8888ToColor(point.color, color);\n                return point;\n            }\n            case AttachmentType.Clipping: {\n                let endSlotIndex = input.readInt(true);\n                let vertexCount = input.readInt(true);\n                let vertices = this.readVertices(input, vertexCount);\n                let color = nonessential ? input.readInt32() : 0;\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n                if (!clip)\n                    return null;\n                clip.endSlot = skeletonData.slots[endSlotIndex];\n                clip.worldVerticesLength = vertexCount << 1;\n                clip.vertices = vertices.vertices;\n                clip.bones = vertices.bones;\n                if (nonessential)\n                    Color.rgba8888ToColor(clip.color, color);\n                return clip;\n            }\n        }\n        return null;\n    }\n    readVertices(input, vertexCount) {\n        let scale = this.scale;\n        let verticesLength = vertexCount << 1;\n        let vertices = new Vertices();\n        if (!input.readBoolean()) {\n            vertices.vertices = this.readFloatArray(input, verticesLength, scale);\n            return vertices;\n        }\n        let weights = new Array();\n        let bonesArray = new Array();\n        for (let i = 0; i < vertexCount; i++) {\n            let boneCount = input.readInt(true);\n            bonesArray.push(boneCount);\n            for (let ii = 0; ii < boneCount; ii++) {\n                bonesArray.push(input.readInt(true));\n                weights.push(input.readFloat() * scale);\n                weights.push(input.readFloat() * scale);\n                weights.push(input.readFloat());\n            }\n        }\n        vertices.vertices = Utils.toFloatArray(weights);\n        vertices.bones = bonesArray;\n        return vertices;\n    }\n    readFloatArray(input, n, scale) {\n        let array = new Array(n);\n        if (scale == 1) {\n            for (let i = 0; i < n; i++)\n                array[i] = input.readFloat();\n        }\n        else {\n            for (let i = 0; i < n; i++)\n                array[i] = input.readFloat() * scale;\n        }\n        return array;\n    }\n    readShortArray(input) {\n        let n = input.readInt(true);\n        let array = new Array(n);\n        for (let i = 0; i < n; i++)\n            array[i] = input.readShort();\n        return array;\n    }\n    readAnimation(input, name, skeletonData) {\n        input.readInt(true); // Number of timelines.\n        let timelines = new Array();\n        let scale = this.scale;\n        let tempColor1 = new Color();\n        let tempColor2 = new Color();\n        // Slot timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let slotIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let timelineType = input.readByte();\n                let frameCount = input.readInt(true);\n                let frameLast = frameCount - 1;\n                switch (timelineType) {\n                    case SLOT_ATTACHMENT: {\n                        let timeline = new AttachmentTimeline(frameCount, slotIndex);\n                        for (let frame = 0; frame < frameCount; frame++)\n                            timeline.setFrame(frame, input.readFloat(), input.readStringRef());\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGBA: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBATimeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let a = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, a);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let r2 = input.readUnsignedByte() / 255.0;\n                            let g2 = input.readUnsignedByte() / 255.0;\n                            let b2 = input.readUnsignedByte() / 255.0;\n                            let a2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, a2, 1);\n                            }\n                            time = time2;\n                            r = r2;\n                            g = g2;\n                            b = b2;\n                            a = a2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGB: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBTimeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let r2 = input.readUnsignedByte() / 255.0;\n                            let g2 = input.readUnsignedByte() / 255.0;\n                            let b2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, r2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, g2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, b2, 1);\n                            }\n                            time = time2;\n                            r = r2;\n                            g = g2;\n                            b = b2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGBA2: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGBA2Timeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let a = input.readUnsignedByte() / 255.0;\n                        let r2 = input.readUnsignedByte() / 255.0;\n                        let g2 = input.readUnsignedByte() / 255.0;\n                        let b2 = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, a, r2, g2, b2);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let nr = input.readUnsignedByte() / 255.0;\n                            let ng = input.readUnsignedByte() / 255.0;\n                            let nb = input.readUnsignedByte() / 255.0;\n                            let na = input.readUnsignedByte() / 255.0;\n                            let nr2 = input.readUnsignedByte() / 255.0;\n                            let ng2 = input.readUnsignedByte() / 255.0;\n                            let nb2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, a, na, 1);\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, r2, nr2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, g2, ng2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 6, time, time2, b2, nb2, 1);\n                            }\n                            time = time2;\n                            r = nr;\n                            g = ng;\n                            b = nb;\n                            a = na;\n                            r2 = nr2;\n                            g2 = ng2;\n                            b2 = nb2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_RGB2: {\n                        let bezierCount = input.readInt(true);\n                        let timeline = new RGB2Timeline(frameCount, bezierCount, slotIndex);\n                        let time = input.readFloat();\n                        let r = input.readUnsignedByte() / 255.0;\n                        let g = input.readUnsignedByte() / 255.0;\n                        let b = input.readUnsignedByte() / 255.0;\n                        let r2 = input.readUnsignedByte() / 255.0;\n                        let g2 = input.readUnsignedByte() / 255.0;\n                        let b2 = input.readUnsignedByte() / 255.0;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, r, g, b, r2, g2, b2);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let nr = input.readUnsignedByte() / 255.0;\n                            let ng = input.readUnsignedByte() / 255.0;\n                            let nb = input.readUnsignedByte() / 255.0;\n                            let nr2 = input.readUnsignedByte() / 255.0;\n                            let ng2 = input.readUnsignedByte() / 255.0;\n                            let nb2 = input.readUnsignedByte() / 255.0;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, r, nr, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, g, ng, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, b, nb, 1);\n                                    setBezier(input, timeline, bezier++, frame, 3, time, time2, r2, nr2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 4, time, time2, g2, ng2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 5, time, time2, b2, nb2, 1);\n                            }\n                            time = time2;\n                            r = nr;\n                            g = ng;\n                            b = nb;\n                            r2 = nr2;\n                            g2 = ng2;\n                            b2 = nb2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                    case SLOT_ALPHA: {\n                        let timeline = new AlphaTimeline(frameCount, input.readInt(true), slotIndex);\n                        let time = input.readFloat(), a = input.readUnsignedByte() / 255;\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, a);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat();\n                            let a2 = input.readUnsignedByte() / 255;\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, a, a2, 1);\n                            }\n                            time = time2;\n                            a = a2;\n                        }\n                        timelines.push(timeline);\n                        break;\n                    }\n                }\n            }\n        }\n        // Bone timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let boneIndex = input.readInt(true);\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let type = input.readByte(), frameCount = input.readInt(true), bezierCount = input.readInt(true);\n                switch (type) {\n                    case BONE_ROTATE:\n                        timelines.push(readTimeline1(input, new RotateTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_TRANSLATE:\n                        timelines.push(readTimeline2(input, new TranslateTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_TRANSLATEX:\n                        timelines.push(readTimeline1(input, new TranslateXTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_TRANSLATEY:\n                        timelines.push(readTimeline1(input, new TranslateYTimeline(frameCount, bezierCount, boneIndex), scale));\n                        break;\n                    case BONE_SCALE:\n                        timelines.push(readTimeline2(input, new ScaleTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SCALEX:\n                        timelines.push(readTimeline1(input, new ScaleXTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SCALEY:\n                        timelines.push(readTimeline1(input, new ScaleYTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEAR:\n                        timelines.push(readTimeline2(input, new ShearTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEARX:\n                        timelines.push(readTimeline1(input, new ShearXTimeline(frameCount, bezierCount, boneIndex), 1));\n                        break;\n                    case BONE_SHEARY:\n                        timelines.push(readTimeline1(input, new ShearYTimeline(frameCount, bezierCount, boneIndex), 1));\n                }\n            }\n        }\n        // IK constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n            let timeline = new IkConstraintTimeline(frameCount, input.readInt(true), index);\n            let time = input.readFloat(), mix = input.readFloat(), softness = input.readFloat() * scale;\n            for (let frame = 0, bezier = 0;; frame++) {\n                timeline.setFrame(frame, time, mix, softness, input.readByte(), input.readBoolean(), input.readBoolean());\n                if (frame == frameLast)\n                    break;\n                let time2 = input.readFloat(), mix2 = input.readFloat(), softness2 = input.readFloat() * scale;\n                switch (input.readByte()) {\n                    case CURVE_STEPPED:\n                        timeline.setStepped(frame);\n                        break;\n                    case CURVE_BEZIER:\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mix, mix2, 1);\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, softness, softness2, scale);\n                }\n                time = time2;\n                mix = mix2;\n                softness = softness2;\n            }\n            timelines.push(timeline);\n        }\n        // Transform constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true), frameCount = input.readInt(true), frameLast = frameCount - 1;\n            let timeline = new TransformConstraintTimeline(frameCount, input.readInt(true), index);\n            let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat(), mixScaleX = input.readFloat(), mixScaleY = input.readFloat(), mixShearY = input.readFloat();\n            for (let frame = 0, bezier = 0;; frame++) {\n                timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n                if (frame == frameLast)\n                    break;\n                let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat(), mixScaleX2 = input.readFloat(), mixScaleY2 = input.readFloat(), mixShearY2 = input.readFloat();\n                switch (input.readByte()) {\n                    case CURVE_STEPPED:\n                        timeline.setStepped(frame);\n                        break;\n                    case CURVE_BEZIER:\n                        setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                        setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n                        setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n                        setBezier(input, timeline, bezier++, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n                        setBezier(input, timeline, bezier++, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n                        setBezier(input, timeline, bezier++, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n                }\n                time = time2;\n                mixRotate = mixRotate2;\n                mixX = mixX2;\n                mixY = mixY2;\n                mixScaleX = mixScaleX2;\n                mixScaleY = mixScaleY2;\n                mixShearY = mixShearY2;\n            }\n            timelines.push(timeline);\n        }\n        // Path constraint timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let index = input.readInt(true);\n            let data = skeletonData.pathConstraints[index];\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                switch (input.readByte()) {\n                    case PATH_POSITION:\n                        timelines\n                            .push(readTimeline1(input, new PathConstraintPositionTimeline(input.readInt(true), input.readInt(true), index), data.positionMode == PositionMode.Fixed ? scale : 1));\n                        break;\n                    case PATH_SPACING:\n                        timelines\n                            .push(readTimeline1(input, new PathConstraintSpacingTimeline(input.readInt(true), input.readInt(true), index), data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed ? scale : 1));\n                        break;\n                    case PATH_MIX:\n                        let timeline = new PathConstraintMixTimeline(input.readInt(true), input.readInt(true), index);\n                        let time = input.readFloat(), mixRotate = input.readFloat(), mixX = input.readFloat(), mixY = input.readFloat();\n                        for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\n                            if (frame == frameLast)\n                                break;\n                            let time2 = input.readFloat(), mixRotate2 = input.readFloat(), mixX2 = input.readFloat(), mixY2 = input.readFloat();\n                            switch (input.readByte()) {\n                                case CURVE_STEPPED:\n                                    timeline.setStepped(frame);\n                                    break;\n                                case CURVE_BEZIER:\n                                    setBezier(input, timeline, bezier++, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 1, time, time2, mixX, mixX2, 1);\n                                    setBezier(input, timeline, bezier++, frame, 2, time, time2, mixY, mixY2, 1);\n                            }\n                            time = time2;\n                            mixRotate = mixRotate2;\n                            mixX = mixX2;\n                            mixY = mixY2;\n                        }\n                        timelines.push(timeline);\n                }\n            }\n        }\n        // Deform timelines.\n        for (let i = 0, n = input.readInt(true); i < n; i++) {\n            let skin = skeletonData.skins[input.readInt(true)];\n            for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n                let slotIndex = input.readInt(true);\n                for (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\n                    let attachmentName = input.readStringRef();\n                    let attachment = skin.getAttachment(slotIndex, attachmentName);\n                    let weighted = attachment.bones;\n                    let vertices = attachment.vertices;\n                    let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n                    let frameCount = input.readInt(true);\n                    let frameLast = frameCount - 1;\n                    let bezierCount = input.readInt(true);\n                    let timeline = new DeformTimeline(frameCount, bezierCount, slotIndex, attachment);\n                    let time = input.readFloat();\n                    for (let frame = 0, bezier = 0;; frame++) {\n                        let deform;\n                        let end = input.readInt(true);\n                        if (end == 0)\n                            deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                        else {\n                            deform = Utils.newFloatArray(deformLength);\n                            let start = input.readInt(true);\n                            end += start;\n                            if (scale == 1) {\n                                for (let v = start; v < end; v++)\n                                    deform[v] = input.readFloat();\n                            }\n                            else {\n                                for (let v = start; v < end; v++)\n                                    deform[v] = input.readFloat() * scale;\n                            }\n                            if (!weighted) {\n                                for (let v = 0, vn = deform.length; v < vn; v++)\n                                    deform[v] += vertices[v];\n                            }\n                        }\n                        timeline.setFrame(frame, time, deform);\n                        if (frame == frameLast)\n                            break;\n                        let time2 = input.readFloat();\n                        switch (input.readByte()) {\n                            case CURVE_STEPPED:\n                                timeline.setStepped(frame);\n                                break;\n                            case CURVE_BEZIER:\n                                setBezier(input, timeline, bezier++, frame, 0, time, time2, 0, 1, 1);\n                        }\n                        time = time2;\n                    }\n                    timelines.push(timeline);\n                }\n            }\n        }\n        // Draw order timeline.\n        let drawOrderCount = input.readInt(true);\n        if (drawOrderCount > 0) {\n            let timeline = new DrawOrderTimeline(drawOrderCount);\n            let slotCount = skeletonData.slots.length;\n            for (let i = 0; i < drawOrderCount; i++) {\n                let time = input.readFloat();\n                let offsetCount = input.readInt(true);\n                let drawOrder = Utils.newArray(slotCount, 0);\n                for (let ii = slotCount - 1; ii >= 0; ii--)\n                    drawOrder[ii] = -1;\n                let unchanged = Utils.newArray(slotCount - offsetCount, 0);\n                let originalIndex = 0, unchangedIndex = 0;\n                for (let ii = 0; ii < offsetCount; ii++) {\n                    let slotIndex = input.readInt(true);\n                    // Collect unchanged items.\n                    while (originalIndex != slotIndex)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Set changed items.\n                    drawOrder[originalIndex + input.readInt(true)] = originalIndex++;\n                }\n                // Collect remaining unchanged items.\n                while (originalIndex < slotCount)\n                    unchanged[unchangedIndex++] = originalIndex++;\n                // Fill in unchanged items.\n                for (let ii = slotCount - 1; ii >= 0; ii--)\n                    if (drawOrder[ii] == -1)\n                        drawOrder[ii] = unchanged[--unchangedIndex];\n                timeline.setFrame(i, time, drawOrder);\n            }\n            timelines.push(timeline);\n        }\n        // Event timeline.\n        let eventCount = input.readInt(true);\n        if (eventCount > 0) {\n            let timeline = new EventTimeline(eventCount);\n            for (let i = 0; i < eventCount; i++) {\n                let time = input.readFloat();\n                let eventData = skeletonData.events[input.readInt(true)];\n                let event = new Event(time, eventData);\n                event.intValue = input.readInt(false);\n                event.floatValue = input.readFloat();\n                event.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\n                if (event.data.audioPath) {\n                    event.volume = input.readFloat();\n                    event.balance = input.readFloat();\n                }\n                timeline.setFrame(i, event);\n            }\n            timelines.push(timeline);\n        }\n        let duration = 0;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            duration = Math.max(duration, timelines[i].getDuration());\n        return new Animation(name, timelines, duration);\n    }\n}\nexport class BinaryInput {\n    constructor(data, strings = new Array(), index = 0, buffer = new DataView(data.buffer)) {\n        this.strings = strings;\n        this.index = index;\n        this.buffer = buffer;\n    }\n    readByte() {\n        return this.buffer.getInt8(this.index++);\n    }\n    readUnsignedByte() {\n        return this.buffer.getUint8(this.index++);\n    }\n    readShort() {\n        let value = this.buffer.getInt16(this.index);\n        this.index += 2;\n        return value;\n    }\n    readInt32() {\n        let value = this.buffer.getInt32(this.index);\n        this.index += 4;\n        return value;\n    }\n    readInt(optimizePositive) {\n        let b = this.readByte();\n        let result = b & 0x7F;\n        if ((b & 0x80) != 0) {\n            b = this.readByte();\n            result |= (b & 0x7F) << 7;\n            if ((b & 0x80) != 0) {\n                b = this.readByte();\n                result |= (b & 0x7F) << 14;\n                if ((b & 0x80) != 0) {\n                    b = this.readByte();\n                    result |= (b & 0x7F) << 21;\n                    if ((b & 0x80) != 0) {\n                        b = this.readByte();\n                        result |= (b & 0x7F) << 28;\n                    }\n                }\n            }\n        }\n        return optimizePositive ? result : ((result >>> 1) ^ -(result & 1));\n    }\n    readStringRef() {\n        let index = this.readInt(true);\n        return index == 0 ? null : this.strings[index - 1];\n    }\n    readString() {\n        let byteCount = this.readInt(true);\n        switch (byteCount) {\n            case 0:\n                return null;\n            case 1:\n                return \"\";\n        }\n        byteCount--;\n        let chars = \"\";\n        let charCount = 0;\n        for (let i = 0; i < byteCount;) {\n            let b = this.readByte();\n            switch (b >> 4) {\n                case 12:\n                case 13:\n                    chars += String.fromCharCode(((b & 0x1F) << 6 | this.readByte() & 0x3F));\n                    i += 2;\n                    break;\n                case 14:\n                    chars += String.fromCharCode(((b & 0x0F) << 12 | (this.readByte() & 0x3F) << 6 | this.readByte() & 0x3F));\n                    i += 3;\n                    break;\n                default:\n                    chars += String.fromCharCode(b);\n                    i++;\n            }\n        }\n        return chars;\n    }\n    readFloat() {\n        let value = this.buffer.getFloat32(this.index);\n        this.index += 4;\n        return value;\n    }\n    readBoolean() {\n        return this.readByte() != 0;\n    }\n}\nclass LinkedMesh {\n    constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n        this.mesh = mesh;\n        this.skin = skin;\n        this.slotIndex = slotIndex;\n        this.parent = parent;\n        this.inheritDeform = inheritDeform;\n    }\n}\nclass Vertices {\n    constructor(bones = null, vertices = null) {\n        this.bones = bones;\n        this.vertices = vertices;\n    }\n}\nvar AttachmentType;\n(function (AttachmentType) {\n    AttachmentType[AttachmentType[\"Region\"] = 0] = \"Region\";\n    AttachmentType[AttachmentType[\"BoundingBox\"] = 1] = \"BoundingBox\";\n    AttachmentType[AttachmentType[\"Mesh\"] = 2] = \"Mesh\";\n    AttachmentType[AttachmentType[\"LinkedMesh\"] = 3] = \"LinkedMesh\";\n    AttachmentType[AttachmentType[\"Path\"] = 4] = \"Path\";\n    AttachmentType[AttachmentType[\"Point\"] = 5] = \"Point\";\n    AttachmentType[AttachmentType[\"Clipping\"] = 6] = \"Clipping\";\n})(AttachmentType || (AttachmentType = {}));\nfunction readTimeline1(input, timeline, scale) {\n    let time = input.readFloat(), value = input.readFloat() * scale;\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n        timeline.setFrame(frame, time, value);\n        if (frame == frameLast)\n            break;\n        let time2 = input.readFloat(), value2 = input.readFloat() * scale;\n        switch (input.readByte()) {\n            case CURVE_STEPPED:\n                timeline.setStepped(frame);\n                break;\n            case CURVE_BEZIER:\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value, value2, scale);\n        }\n        time = time2;\n        value = value2;\n    }\n    return timeline;\n}\nfunction readTimeline2(input, timeline, scale) {\n    let time = input.readFloat(), value1 = input.readFloat() * scale, value2 = input.readFloat() * scale;\n    for (let frame = 0, bezier = 0, frameLast = timeline.getFrameCount() - 1;; frame++) {\n        timeline.setFrame(frame, time, value1, value2);\n        if (frame == frameLast)\n            break;\n        let time2 = input.readFloat(), nvalue1 = input.readFloat() * scale, nvalue2 = input.readFloat() * scale;\n        switch (input.readByte()) {\n            case CURVE_STEPPED:\n                timeline.setStepped(frame);\n                break;\n            case CURVE_BEZIER:\n                setBezier(input, timeline, bezier++, frame, 0, time, time2, value1, nvalue1, scale);\n                setBezier(input, timeline, bezier++, frame, 1, time, time2, value2, nvalue2, scale);\n        }\n        time = time2;\n        value1 = nvalue1;\n        value2 = nvalue2;\n    }\n    return timeline;\n}\nfunction setBezier(input, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {\n    timeline.setBezier(bezier, frame, value, time1, value1, input.readFloat(), input.readFloat() * scale, input.readFloat(), input.readFloat() * scale, time2, value2);\n}\nconst BONE_ROTATE = 0;\nconst BONE_TRANSLATE = 1;\nconst BONE_TRANSLATEX = 2;\nconst BONE_TRANSLATEY = 3;\nconst BONE_SCALE = 4;\nconst BONE_SCALEX = 5;\nconst BONE_SCALEY = 6;\nconst BONE_SHEAR = 7;\nconst BONE_SHEARX = 8;\nconst BONE_SHEARY = 9;\nconst SLOT_ATTACHMENT = 0;\nconst SLOT_RGBA = 1;\nconst SLOT_RGB = 2;\nconst SLOT_RGBA2 = 3;\nconst SLOT_RGB2 = 4;\nconst SLOT_ALPHA = 5;\nconst PATH_POSITION = 0;\nconst PATH_SPACING = 1;\nconst PATH_MIX = 2;\nconst CURVE_LINEAR = 0;\nconst CURVE_STEPPED = 1;\nconst CURVE_BEZIER = 2;","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, AttachmentTimeline, RGBATimeline, RGBTimeline, AlphaTimeline, RGBA2Timeline, RGB2Timeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline } from \"./Animation\";\nimport { BoneData, TransformMode } from \"./BoneData\";\nimport { EventData } from \"./EventData\";\nimport { Event } from \"./Event\";\nimport { IkConstraintData } from \"./IkConstraintData\";\nimport { PathConstraintData, PositionMode, SpacingMode, RotateMode } from \"./PathConstraintData\";\nimport { SkeletonData } from \"./SkeletonData\";\nimport { Skin } from \"./Skin\";\nimport { SlotData, BlendMode } from \"./SlotData\";\nimport { TransformConstraintData } from \"./TransformConstraintData\";\nimport { Utils, Color } from \"./Utils\";\n/** Loads skeleton data in the Spine JSON format.\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonJson {\n    constructor(attachmentLoader) {\n        /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n         * runtime than were used in Spine.\n         *\n         * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n        this.scale = 1;\n        this.linkedMeshes = new Array();\n        this.attachmentLoader = attachmentLoader;\n    }\n    readSkeletonData(json) {\n        let scale = this.scale;\n        let skeletonData = new SkeletonData();\n        let root = typeof (json) === \"string\" ? JSON.parse(json) : json;\n        // Skeleton\n        let skeletonMap = root.skeleton;\n        if (skeletonMap) {\n            skeletonData.hash = skeletonMap.hash;\n            skeletonData.version = skeletonMap.spine;\n            skeletonData.x = skeletonMap.x;\n            skeletonData.y = skeletonMap.y;\n            skeletonData.width = skeletonMap.width;\n            skeletonData.height = skeletonMap.height;\n            skeletonData.fps = skeletonMap.fps;\n            skeletonData.imagesPath = skeletonMap.images;\n        }\n        // Bones\n        if (root.bones) {\n            for (let i = 0; i < root.bones.length; i++) {\n                let boneMap = root.bones[i];\n                let parent = null;\n                let parentName = getValue(boneMap, \"parent\", null);\n                if (parentName)\n                    parent = skeletonData.findBone(parentName);\n                let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n                data.length = getValue(boneMap, \"length\", 0) * scale;\n                data.x = getValue(boneMap, \"x\", 0) * scale;\n                data.y = getValue(boneMap, \"y\", 0) * scale;\n                data.rotation = getValue(boneMap, \"rotation\", 0);\n                data.scaleX = getValue(boneMap, \"scaleX\", 1);\n                data.scaleY = getValue(boneMap, \"scaleY\", 1);\n                data.shearX = getValue(boneMap, \"shearX\", 0);\n                data.shearY = getValue(boneMap, \"shearY\", 0);\n                data.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\n                data.skinRequired = getValue(boneMap, \"skin\", false);\n                let color = getValue(boneMap, \"color\", null);\n                if (color)\n                    data.color.setFromString(color);\n                skeletonData.bones.push(data);\n            }\n        }\n        // Slots.\n        if (root.slots) {\n            for (let i = 0; i < root.slots.length; i++) {\n                let slotMap = root.slots[i];\n                let boneData = skeletonData.findBone(slotMap.bone);\n                let data = new SlotData(skeletonData.slots.length, slotMap.name, boneData);\n                let color = getValue(slotMap, \"color\", null);\n                if (color)\n                    data.color.setFromString(color);\n                let dark = getValue(slotMap, \"dark\", null);\n                if (dark)\n                    data.darkColor = Color.fromString(dark);\n                data.attachmentName = getValue(slotMap, \"attachment\", null);\n                data.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, \"blend\", \"normal\"));\n                skeletonData.slots.push(data);\n            }\n        }\n        // IK constraints\n        if (root.ik) {\n            for (let i = 0; i < root.ik.length; i++) {\n                let constraintMap = root.ik[i];\n                let data = new IkConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++)\n                    data.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n                data.target = skeletonData.findBone(constraintMap.target);\n                data.mix = getValue(constraintMap, \"mix\", 1);\n                data.softness = getValue(constraintMap, \"softness\", 0) * scale;\n                data.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n                data.compress = getValue(constraintMap, \"compress\", false);\n                data.stretch = getValue(constraintMap, \"stretch\", false);\n                data.uniform = getValue(constraintMap, \"uniform\", false);\n                skeletonData.ikConstraints.push(data);\n            }\n        }\n        // Transform constraints.\n        if (root.transform) {\n            for (let i = 0; i < root.transform.length; i++) {\n                let constraintMap = root.transform[i];\n                let data = new TransformConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++)\n                    data.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n                let targetName = constraintMap.target;\n                data.target = skeletonData.findBone(targetName);\n                data.local = getValue(constraintMap, \"local\", false);\n                data.relative = getValue(constraintMap, \"relative\", false);\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n                data.offsetX = getValue(constraintMap, \"x\", 0) * scale;\n                data.offsetY = getValue(constraintMap, \"y\", 0) * scale;\n                data.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\n                data.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\n                data.offsetShearY = getValue(constraintMap, \"shearY\", 0);\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n                data.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\n                data.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\n                data.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\n                skeletonData.transformConstraints.push(data);\n            }\n        }\n        // Path constraints.\n        if (root.path) {\n            for (let i = 0; i < root.path.length; i++) {\n                let constraintMap = root.path[i];\n                let data = new PathConstraintData(constraintMap.name);\n                data.order = getValue(constraintMap, \"order\", 0);\n                data.skinRequired = getValue(constraintMap, \"skin\", false);\n                for (let ii = 0; ii < constraintMap.bones.length; ii++)\n                    data.bones.push(skeletonData.findBone(constraintMap.bones[ii]));\n                let targetName = constraintMap.target;\n                data.target = skeletonData.findSlot(targetName);\n                data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\n                data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\n                data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\n                data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n                data.position = getValue(constraintMap, \"position\", 0);\n                if (data.positionMode == PositionMode.Fixed)\n                    data.position *= scale;\n                data.spacing = getValue(constraintMap, \"spacing\", 0);\n                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                    data.spacing *= scale;\n                data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n                data.mixX = getValue(constraintMap, \"mixX\", 1);\n                data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n                skeletonData.pathConstraints.push(data);\n            }\n        }\n        // Skins.\n        if (root.skins) {\n            // 目前有2种格式，一个是官方demo里面skin是数组形式，一种是eva的demo里面是键值对形式\n            if (root.skins instanceof Array) {\n                for (let i = 0; i < root.skins.length; i++) {\n                    let skinMap = root.skins[i];\n                    let skin = new Skin(skinMap.name);\n                    if (skinMap.bones) {\n                        for (let ii = 0; ii < skinMap.bones.length; ii++)\n                            skin.bones.push(skeletonData.findBone(skinMap.bones[ii]));\n                    }\n                    if (skinMap.ik) {\n                        for (let ii = 0; ii < skinMap.ik.length; ii++)\n                            skin.constraints.push(skeletonData.findIkConstraint(skinMap.ik[ii]));\n                    }\n                    if (skinMap.transform) {\n                        for (let ii = 0; ii < skinMap.transform.length; ii++)\n                            skin.constraints.push(skeletonData.findTransformConstraint(skinMap.transform[ii]));\n                    }\n                    if (skinMap.path) {\n                        for (let ii = 0; ii < skinMap.path.length; ii++)\n                            skin.constraints.push(skeletonData.findPathConstraint(skinMap.path[ii]));\n                    }\n                    for (let slotName in skinMap.attachments) {\n                        let slot = skeletonData.findSlot(slotName);\n                        let slotMap = skinMap.attachments[slotName];\n                        for (let entryName in slotMap) {\n                            let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n                            if (attachment)\n                                skin.setAttachment(slot.index, entryName, attachment);\n                        }\n                    }\n                    skeletonData.skins.push(skin);\n                    if (skin.name == \"default\")\n                        skeletonData.defaultSkin = skin;\n                }\n            } else {\n                for (let i in root.skins) {\n                    let skinMap = root.skins[i];\n                    let skin = new Skin(i);\n                    if (skinMap.bones) {\n                        for (let ii = 0; ii < skinMap.bones.length; ii++)\n                            skin.bones.push(skeletonData.findBone(skinMap.bones[ii]));\n                    }\n                    if (skinMap.ik) {\n                        for (let ii = 0; ii < skinMap.ik.length; ii++)\n                            skin.constraints.push(skeletonData.findIkConstraint(skinMap.ik[ii]));\n                    }\n                    if (skinMap.transform) {\n                        for (let ii = 0; ii < skinMap.transform.length; ii++)\n                            skin.constraints.push(skeletonData.findTransformConstraint(skinMap.transform[ii]));\n                    }\n                    if (skinMap.path) {\n                        for (let ii = 0; ii < skinMap.path.length; ii++)\n                            skin.constraints.push(skeletonData.findPathConstraint(skinMap.path[ii]));\n                    }\n                    for (let slotName in skinMap) {\n                        let slot = skeletonData.findSlot(slotName);\n                        let slotMap = skinMap[slotName];\n                        for (let entryName in slotMap) {\n                            let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n                            if (attachment)\n                                skin.setAttachment(slot.index, entryName, attachment);\n                        }\n                    }\n                    skeletonData.skins.push(skin);\n                    if (i == \"default\")\n                        skeletonData.defaultSkin = skin;\n                }\n            }\n            \n        }\n        // Linked meshes.\n        for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n            let linkedMesh = this.linkedMeshes[i];\n            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent : linkedMesh.mesh;\n            linkedMesh.mesh.setParentMesh(parent);\n            linkedMesh.mesh.updateUVs();\n        }\n        this.linkedMeshes.length = 0;\n        // Events.\n        if (root.events) {\n            for (let eventName in root.events) {\n                let eventMap = root.events[eventName];\n                let data = new EventData(eventName);\n                data.intValue = getValue(eventMap, \"int\", 0);\n                data.floatValue = getValue(eventMap, \"float\", 0);\n                data.stringValue = getValue(eventMap, \"string\", \"\");\n                data.audioPath = getValue(eventMap, \"audio\", null);\n                if (data.audioPath) {\n                    data.volume = getValue(eventMap, \"volume\", 1);\n                    data.balance = getValue(eventMap, \"balance\", 0);\n                }\n                skeletonData.events.push(data);\n            }\n        }\n        // Animations.\n        if (root.animations) {\n            for (let animationName in root.animations) {\n                let animationMap = root.animations[animationName];\n                this.readAnimation(animationMap, animationName, skeletonData);\n            }\n        }\n        return skeletonData;\n    }\n    readAttachment(map, skin, slotIndex, name, skeletonData) {\n        let scale = this.scale;\n        name = getValue(map, \"name\", name);\n        switch (getValue(map, \"type\", \"region\")) {\n            case \"region\": {\n                let path = getValue(map, \"path\", name);\n                let region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n                if (!region)\n                    return null;\n                region.path = path;\n                region.x = getValue(map, \"x\", 0) * scale;\n                region.y = getValue(map, \"y\", 0) * scale;\n                region.scaleX = getValue(map, \"scaleX\", 1);\n                region.scaleY = getValue(map, \"scaleY\", 1);\n                region.rotation = getValue(map, \"rotation\", 0);\n                region.width = map.width * scale;\n                region.height = map.height * scale;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    region.color.setFromString(color);\n                region.updateOffset();\n                return region;\n            }\n            case \"boundingbox\": {\n                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n                if (!box)\n                    return null;\n                this.readVertices(map, box, map.vertexCount << 1);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    box.color.setFromString(color);\n                return box;\n            }\n            case \"mesh\":\n            case \"linkedmesh\": {\n                let path = getValue(map, \"path\", name);\n                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n                if (!mesh)\n                    return null;\n                mesh.path = path;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    mesh.color.setFromString(color);\n                mesh.width = getValue(map, \"width\", 0) * scale;\n                mesh.height = getValue(map, \"height\", 0) * scale;\n                let parent = getValue(map, \"parent\", null);\n                if (parent) {\n                    this.linkedMeshes.push(new LinkedMesh(mesh, getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"deform\", true)));\n                    return mesh;\n                }\n                let uvs = map.uvs;\n                this.readVertices(map, mesh, uvs.length);\n                mesh.triangles = map.triangles;\n                mesh.regionUVs = uvs;\n                mesh.updateUVs();\n                mesh.edges = getValue(map, \"edges\", null);\n                mesh.hullLength = getValue(map, \"hull\", 0) * 2;\n                return mesh;\n            }\n            case \"path\": {\n                let path = this.attachmentLoader.newPathAttachment(skin, name);\n                if (!path)\n                    return null;\n                path.closed = getValue(map, \"closed\", false);\n                path.constantSpeed = getValue(map, \"constantSpeed\", true);\n                let vertexCount = map.vertexCount;\n                this.readVertices(map, path, vertexCount << 1);\n                let lengths = Utils.newArray(vertexCount / 3, 0);\n                for (let i = 0; i < map.lengths.length; i++)\n                    lengths[i] = map.lengths[i] * scale;\n                path.lengths = lengths;\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    path.color.setFromString(color);\n                return path;\n            }\n            case \"point\": {\n                let point = this.attachmentLoader.newPointAttachment(skin, name);\n                if (!point)\n                    return null;\n                point.x = getValue(map, \"x\", 0) * scale;\n                point.y = getValue(map, \"y\", 0) * scale;\n                point.rotation = getValue(map, \"rotation\", 0);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    point.color.setFromString(color);\n                return point;\n            }\n            case \"clipping\": {\n                let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n                if (!clip)\n                    return null;\n                let end = getValue(map, \"end\", null);\n                if (end)\n                    clip.endSlot = skeletonData.findSlot(end);\n                let vertexCount = map.vertexCount;\n                this.readVertices(map, clip, vertexCount << 1);\n                let color = getValue(map, \"color\", null);\n                if (color)\n                    clip.color.setFromString(color);\n                return clip;\n            }\n        }\n        return null;\n    }\n    readVertices(map, attachment, verticesLength) {\n        let scale = this.scale;\n        attachment.worldVerticesLength = verticesLength;\n        let vertices = map.vertices;\n        if (verticesLength == vertices.length) {\n            let scaledVertices = Utils.toFloatArray(vertices);\n            if (scale != 1) {\n                for (let i = 0, n = vertices.length; i < n; i++)\n                    scaledVertices[i] *= scale;\n            }\n            attachment.vertices = scaledVertices;\n            return;\n        }\n        let weights = new Array();\n        let bones = new Array();\n        for (let i = 0, n = vertices.length; i < n;) {\n            let boneCount = vertices[i++];\n            bones.push(boneCount);\n            for (let nn = i + boneCount * 4; i < nn; i += 4) {\n                bones.push(vertices[i]);\n                weights.push(vertices[i + 1] * scale);\n                weights.push(vertices[i + 2] * scale);\n                weights.push(vertices[i + 3]);\n            }\n        }\n        attachment.bones = bones;\n        attachment.vertices = Utils.toFloatArray(weights);\n    }\n    readAnimation(map, name, skeletonData) {\n        let scale = this.scale;\n        let timelines = new Array();\n        // Slot timelines.\n        if (map.slots) {\n            for (let slotName in map.slots) {\n                let slotMap = map.slots[slotName];\n                let slotIndex = skeletonData.findSlot(slotName).index;\n                for (let timelineName in slotMap) {\n                    let timelineMap = slotMap[timelineName];\n                    if (!timelineMap)\n                        continue;\n                    let frames = timelineMap.length;\n                    if (timelineName == \"attachment\") {\n                        let timeline = new AttachmentTimeline(frames, slotIndex);\n                        for (let frame = 0; frame < frames; frame++) {\n                            let keyMap = timelineMap[frame];\n                            timeline.setFrame(frame, getValue(keyMap, \"time\", 0), keyMap.name);\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgba\") {\n                        let timeline = new RGBATimeline(frames, frames << 2, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.color);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.color);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgb\") {\n                        let timeline = new RGBTimeline(frames, frames * 3, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.color);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.color);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"alpha\") {\n                        timelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));\n                    }\n                    else if (timelineName == \"rgba2\") {\n                        let timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.light);\n                        let color2 = Color.fromString(keyMap.dark);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.light);\n                            let newColor2 = Color.fromString(nextMap.dark);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            color2 = newColor2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                    else if (timelineName == \"rgb2\") {\n                        let timeline = new RGB2Timeline(frames, frames * 6, slotIndex);\n                        let keyMap = timelineMap[0];\n                        let time = getValue(keyMap, \"time\", 0);\n                        let color = Color.fromString(keyMap.light);\n                        let color2 = Color.fromString(keyMap.dark);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let newColor = Color.fromString(nextMap.light);\n                            let newColor2 = Color.fromString(nextMap.dark);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\n                            }\n                            time = time2;\n                            color = newColor;\n                            color2 = newColor2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Bone timelines.\n        if (map.bones) {\n            for (let boneName in map.bones) {\n                let boneMap = map.bones[boneName];\n                let boneIndex = skeletonData.findBone(boneName).index;\n                for (let timelineName in boneMap) {\n                    let timelineMap = boneMap[timelineName];\n                    let frames = timelineMap.length;\n                    if (frames == 0)\n                        continue;\n                    if (timelineName === \"rotate\") {\n                        timelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));\n                    }\n                    else if (timelineName === \"translate\") {\n                        let timeline = new TranslateTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\n                    }\n                    else if (timelineName === \"translatex\") {\n                        let timeline = new TranslateXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n                    }\n                    else if (timelineName === \"translatey\") {\n                        let timeline = new TranslateYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n                    }\n                    else if (timelineName === \"scale\") {\n                        let timeline = new ScaleTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\n                    }\n                    else if (timelineName === \"scalex\") {\n                        let timeline = new ScaleXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n                    }\n                    else if (timelineName === \"scaley\") {\n                        let timeline = new ScaleYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n                    }\n                    else if (timelineName === \"shear\") {\n                        let timeline = new ShearTimeline(frames, frames << 1, boneIndex);\n                        timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\n                    }\n                    else if (timelineName === \"shearx\") {\n                        let timeline = new ShearXTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n                    }\n                    else if (timelineName === \"sheary\") {\n                        let timeline = new ShearYTimeline(frames, frames, boneIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n                    }\n                }\n            }\n        }\n        // IK constraint timelines.\n        if (map.ik) {\n            for (let constraintName in map.ik) {\n                let constraintMap = map.ik[constraintName];\n                let keyMap = constraintMap[0];\n                if (!keyMap)\n                    continue;\n                let constraint = skeletonData.findIkConstraint(constraintName);\n                let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n                let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\n                let time = getValue(keyMap, \"time\", 0);\n                let mix = getValue(keyMap, \"mix\", 1);\n                let softness = getValue(keyMap, \"softness\", 0) * scale;\n                for (let frame = 0, bezier = 0;; frame++) {\n                    timeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\n                    let nextMap = constraintMap[frame + 1];\n                    if (!nextMap) {\n                        timeline.shrink(bezier);\n                        break;\n                    }\n                    let time2 = getValue(nextMap, \"time\", 0);\n                    let mix2 = getValue(nextMap, \"mix\", 1);\n                    let softness2 = getValue(nextMap, \"softness\", 0) * scale;\n                    let curve = keyMap.curve;\n                    if (curve) {\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\n                    }\n                    time = time2;\n                    mix = mix2;\n                    softness = softness2;\n                    keyMap = nextMap;\n                }\n                timelines.push(timeline);\n            }\n        }\n        // Transform constraint timelines.\n        if (map.transform) {\n            for (let constraintName in map.transform) {\n                let timelineMap = map.transform[constraintName];\n                let keyMap = timelineMap[0];\n                if (!keyMap)\n                    continue;\n                let constraint = skeletonData.findTransformConstraint(constraintName);\n                let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n                let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);\n                let time = getValue(keyMap, \"time\", 0);\n                let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n                let mixX = getValue(keyMap, \"mixX\", 1);\n                let mixY = getValue(keyMap, \"mixY\", mixX);\n                let mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\n                let mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\n                let mixShearY = getValue(keyMap, \"mixShearY\", 1);\n                for (let frame = 0, bezier = 0;; frame++) {\n                    timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n                    let nextMap = timelineMap[frame + 1];\n                    if (!nextMap) {\n                        timeline.shrink(bezier);\n                        break;\n                    }\n                    let time2 = getValue(nextMap, \"time\", 0);\n                    let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n                    let mixX2 = getValue(nextMap, \"mixX\", 1);\n                    let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n                    let mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\n                    let mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\n                    let mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\n                    let curve = keyMap.curve;\n                    if (curve) {\n                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n                        bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n                    }\n                    time = time2;\n                    mixRotate = mixRotate2;\n                    mixX = mixX2;\n                    mixY = mixY2;\n                    mixScaleX = mixScaleX2;\n                    mixScaleY = mixScaleY2;\n                    mixScaleX = mixScaleX2;\n                    keyMap = nextMap;\n                }\n                timelines.push(timeline);\n            }\n        }\n        // Path constraint timelines.\n        if (map.path) {\n            for (let constraintName in map.path) {\n                let constraintMap = map.path[constraintName];\n                let constraint = skeletonData.findPathConstraint(constraintName);\n                let constraintIndex = skeletonData.pathConstraints.indexOf(constraint);\n                for (let timelineName in constraintMap) {\n                    let timelineMap = constraintMap[timelineName];\n                    let keyMap = timelineMap[0];\n                    if (!keyMap)\n                        continue;\n                    let frames = timelineMap.length;\n                    if (timelineName === \"position\") {\n                        let timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\n                    }\n                    else if (timelineName === \"spacing\") {\n                        let timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);\n                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\n                    }\n                    else if (timelineName === \"mix\") {\n                        let timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);\n                        let time = getValue(keyMap, \"time\", 0);\n                        let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n                        let mixX = getValue(keyMap, \"mixX\", 1);\n                        let mixY = getValue(keyMap, \"mixY\", mixX);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n                            let mixX2 = getValue(nextMap, \"mixX\", 1);\n                            let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n                            let curve = keyMap.curve;\n                            if (curve) {\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n                            }\n                            time = time2;\n                            mixRotate = mixRotate2;\n                            mixX = mixX2;\n                            mixY = mixY2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Deform timelines.\n        if (map.deform) {\n            for (let deformName in map.deform) {\n                let deformMap = map.deform[deformName];\n                let skin = skeletonData.findSkin(deformName);\n                for (let slotName in deformMap) {\n                    let slotMap = deformMap[slotName];\n                    let slotIndex = skeletonData.findSlot(slotName).index;\n                    for (let timelineName in slotMap) {\n                        let timelineMap = slotMap[timelineName];\n                        let keyMap = timelineMap[0];\n                        if (!keyMap)\n                            continue;\n                        let attachment = skin.getAttachment(slotIndex, timelineName);\n                        let weighted = attachment.bones;\n                        let vertices = attachment.vertices;\n                        let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n                        let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\n                        let time = getValue(keyMap, \"time\", 0);\n                        for (let frame = 0, bezier = 0;; frame++) {\n                            let deform;\n                            let verticesValue = getValue(keyMap, \"vertices\", null);\n                            if (!verticesValue)\n                                deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n                            else {\n                                deform = Utils.newFloatArray(deformLength);\n                                let start = getValue(keyMap, \"offset\", 0);\n                                Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                                if (scale != 1) {\n                                    for (let i = start, n = i + verticesValue.length; i < n; i++)\n                                        deform[i] *= scale;\n                                }\n                                if (!weighted) {\n                                    for (let i = 0; i < deformLength; i++)\n                                        deform[i] += vertices[i];\n                                }\n                            }\n                            timeline.setFrame(frame, time, deform);\n                            let nextMap = timelineMap[frame + 1];\n                            if (!nextMap) {\n                                timeline.shrink(bezier);\n                                break;\n                            }\n                            let time2 = getValue(nextMap, \"time\", 0);\n                            let curve = keyMap.curve;\n                            if (curve)\n                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\n                            time = time2;\n                            keyMap = nextMap;\n                        }\n                        timelines.push(timeline);\n                    }\n                }\n            }\n        }\n        // Draw order timelines.\n        if (map.drawOrder) {\n            let timeline = new DrawOrderTimeline(map.drawOrder.length);\n            let slotCount = skeletonData.slots.length;\n            let frame = 0;\n            for (let i = 0; i < map.drawOrder.length; i++, frame++) {\n                let drawOrderMap = map.drawOrder[i];\n                let drawOrder = null;\n                let offsets = getValue(drawOrderMap, \"offsets\", null);\n                if (offsets) {\n                    drawOrder = Utils.newArray(slotCount, -1);\n                    let unchanged = Utils.newArray(slotCount - offsets.length, 0);\n                    let originalIndex = 0, unchangedIndex = 0;\n                    for (let ii = 0; ii < offsets.length; ii++) {\n                        let offsetMap = offsets[ii];\n                        let slotIndex = skeletonData.findSlot(offsetMap.slot).index;\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (let ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1)\n                            drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\n            }\n            timelines.push(timeline);\n        }\n        // Event timelines.\n        if (map.events) {\n            let timeline = new EventTimeline(map.events.length);\n            let frame = 0;\n            for (let i = 0; i < map.events.length; i++, frame++) {\n                let eventMap = map.events[i];\n                let eventData = skeletonData.findEvent(eventMap.name);\n                let event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\n                event.intValue = getValue(eventMap, \"int\", eventData.intValue);\n                event.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\n                event.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\n                if (event.data.audioPath) {\n                    event.volume = getValue(eventMap, \"volume\", 1);\n                    event.balance = getValue(eventMap, \"balance\", 0);\n                }\n                timeline.setFrame(frame, event);\n            }\n            timelines.push(timeline);\n        }\n        let duration = 0;\n        for (let i = 0, n = timelines.length; i < n; i++)\n            duration = Math.max(duration, timelines[i].getDuration());\n        skeletonData.animations.push(new Animation(name, timelines, duration));\n    }\n}\nclass LinkedMesh {\n    constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n        this.mesh = mesh;\n        this.skin = skin;\n        this.slotIndex = slotIndex;\n        this.parent = parent;\n        this.inheritDeform = inheritDeform;\n    }\n}\nfunction readTimeline1(keys, timeline, defaultValue, scale) {\n    let keyMap = keys[0];\n    let time = getValue(keyMap, \"time\", 0);\n    let value = getValue(keyMap, \"value\", defaultValue) * scale;\n    let bezier = 0;\n    for (let frame = 0;; frame++) {\n        timeline.setFrame(frame, time, value);\n        let nextMap = keys[frame + 1];\n        if (!nextMap) {\n            timeline.shrink(bezier);\n            return timeline;\n        }\n        let time2 = getValue(nextMap, \"time\", 0);\n        let value2 = getValue(nextMap, \"value\", defaultValue) * scale;\n        if (keyMap.curve)\n            bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\n        time = time2;\n        value = value2;\n        keyMap = nextMap;\n    }\n}\nfunction readTimeline2(keys, timeline, name1, name2, defaultValue, scale) {\n    let keyMap = keys[0];\n    let time = getValue(keyMap, \"time\", 0);\n    let value1 = getValue(keyMap, name1, defaultValue) * scale;\n    let value2 = getValue(keyMap, name2, defaultValue) * scale;\n    let bezier = 0;\n    for (let frame = 0;; frame++) {\n        timeline.setFrame(frame, time, value1, value2);\n        let nextMap = keys[frame + 1];\n        if (!nextMap) {\n            timeline.shrink(bezier);\n            return timeline;\n        }\n        let time2 = getValue(nextMap, \"time\", 0);\n        let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\n        let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\n        let curve = keyMap.curve;\n        if (curve) {\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\n        }\n        time = time2;\n        value1 = nvalue1;\n        value2 = nvalue2;\n        keyMap = nextMap;\n    }\n}\nfunction readCurve(curve, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {\n    if (curve == \"stepped\") {\n        timeline.setStepped(frame);\n        return bezier;\n    }\n    let i = value << 2;\n    let cx1 = curve[i];\n    let cy1 = curve[i + 1] * scale;\n    let cx2 = curve[i + 2];\n    let cy2 = curve[i + 3] * scale;\n    timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\n    return bezier + 1;\n}\nfunction getValue(map, property, defaultValue) {\n    return map[property] !== undefined ? map[property] : defaultValue;\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n(() => {\n    if (typeof Math.fround === \"undefined\") {\n        Math.fround = (function (array) {\n            return function (x) {\n                return array[0] = x, array[0];\n            };\n        })(new Float32Array(1));\n    }\n})();\nexport {};","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { PowOut, MathUtils } from \"../Utils\";\nexport class SwirlEffect {\n    constructor(radius) {\n        this.centerX = 0;\n        this.centerY = 0;\n        this.radius = 0;\n        this.angle = 0;\n        this.worldX = 0;\n        this.worldY = 0;\n        this.radius = radius;\n    }\n    begin(skeleton) {\n        this.worldX = skeleton.x + this.centerX;\n        this.worldY = skeleton.y + this.centerY;\n    }\n    transform(position, uv, light, dark) {\n        let radAngle = this.angle * MathUtils.degreesToRadians;\n        let x = position.x - this.worldX;\n        let y = position.y - this.worldY;\n        let dist = Math.sqrt(x * x + y * y);\n        if (dist < this.radius) {\n            let theta = SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\n            let cos = Math.cos(theta);\n            let sin = Math.sin(theta);\n            position.x = cos * x - sin * y + this.worldX;\n            position.y = sin * x + cos * y + this.worldY;\n        }\n    }\n    end() {\n    }\n}\nSwirlEffect.interpolation = new PowOut(2);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3dpcmxFZmZlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmVydGV4ZWZmZWN0cy9Td2lybEVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFHL0UsT0FBTyxFQUFFLE1BQU0sRUFBa0IsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRzdELE1BQU0sT0FBTyxXQUFXO0lBU3ZCLFlBQWEsTUFBYztRQVAzQixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ0YsV0FBTSxHQUFHLENBQUMsQ0FBQztRQUNYLFdBQU0sR0FBRyxDQUFDLENBQUM7UUFHbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FBRSxRQUFrQjtRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN6QyxDQUFDO0lBRUQsU0FBUyxDQUFFLFFBQWlCLEVBQUUsRUFBVyxFQUFFLEtBQVksRUFBRSxJQUFXO1FBQ25FLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUIsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUM3QyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzdDO0lBQ0YsQ0FBQztJQUVELEdBQUc7SUFDSCxDQUFDOztBQWhDTSx5QkFBYSxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDIn0=","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Utils, Color, RegionAttachment, MeshAttachment } from \"./../spine-core/index\";\nexport class SkeletonRenderer {\n    constructor(context) {\n        this.triangleRendering = false;\n        this.debugRendering = false;\n        this.vertices = Utils.newFloatArray(8 * 1024);\n        this.tempColor = new Color();\n        this.ctx = context;\n    }\n    draw(skeleton) {\n        if (this.triangleRendering)\n            this.drawTriangles(skeleton);\n        else\n            this.drawImages(skeleton);\n    }\n    drawImages(skeleton) {\n        let ctx = this.ctx;\n        let color = this.tempColor;\n        let skeletonColor = skeleton.color;\n        let drawOrder = skeleton.drawOrder;\n        if (this.debugRendering)\n            ctx.strokeStyle = \"green\";\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let slot = drawOrder[i];\n            let bone = slot.bone;\n            if (!bone.active)\n                continue;\n            let attachment = slot.getAttachment();\n            if (!(attachment instanceof RegionAttachment))\n                continue;\n            let region = attachment.region;\n            let image = region.page.texture.getImage();\n            let slotColor = slot.color;\n            let regionColor = attachment.color;\n            color.set(skeletonColor.r * slotColor.r * regionColor.r, skeletonColor.g * slotColor.g * regionColor.g, skeletonColor.b * slotColor.b * regionColor.b, skeletonColor.a * slotColor.a * regionColor.a);\n            ctx.save();\n            ctx.transform(bone.a, bone.c, bone.b, bone.d, bone.worldX, bone.worldY);\n            ctx.translate(attachment.offset[0], attachment.offset[1]);\n            ctx.rotate(attachment.rotation * Math.PI / 180);\n            let atlasScale = attachment.width / region.originalWidth;\n            ctx.scale(atlasScale * attachment.scaleX, atlasScale * attachment.scaleY);\n            let w = region.width, h = region.height;\n            ctx.translate(w / 2, h / 2);\n            if (attachment.region.degrees == 90) {\n                let t = w;\n                w = h;\n                h = t;\n                ctx.rotate(-Math.PI / 2);\n            }\n            ctx.scale(1, -1);\n            ctx.translate(-w / 2, -h / 2);\n            if (color.r != 1 || color.g != 1 || color.b != 1 || color.a != 1) {\n                ctx.globalAlpha = color.a;\n                // experimental tinting via compositing, doesn't work\n                // ctx.globalCompositeOperation = \"source-atop\";\n                // ctx.fillStyle = \"rgba(\" + (color.r * 255 | 0) + \", \" + (color.g * 255 | 0)  + \", \" + (color.b * 255 | 0) + \", \" + color.a + \")\";\n                // ctx.fillRect(0, 0, w, h);\n            }\n            ctx.drawImage(image, region.x, region.y, w, h, 0, 0, w, h);\n            if (this.debugRendering)\n                ctx.strokeRect(0, 0, w, h);\n            ctx.restore();\n        }\n    }\n    drawTriangles(skeleton) {\n        let ctx = this.ctx;\n        let color = this.tempColor;\n        let skeletonColor = skeleton.color;\n        let drawOrder = skeleton.drawOrder;\n        let blendMode = null;\n        let vertices = this.vertices;\n        let triangles = null;\n        for (let i = 0, n = drawOrder.length; i < n; i++) {\n            let slot = drawOrder[i];\n            let attachment = slot.getAttachment();\n            let texture;\n            let region;\n            if (attachment instanceof RegionAttachment) {\n                let regionAttachment = attachment;\n                vertices = this.computeRegionVertices(slot, regionAttachment, false);\n                triangles = SkeletonRenderer.QUAD_TRIANGLES;\n                region = regionAttachment.region;\n                texture = region.page.texture.getImage();\n            }\n            else if (attachment instanceof MeshAttachment) {\n                let mesh = attachment;\n                vertices = this.computeMeshVertices(slot, mesh, false);\n                triangles = mesh.triangles;\n                texture = mesh.region.renderObject.page.texture.getImage();\n            }\n            else\n                continue;\n            if (texture) {\n                if (slot.data.blendMode != blendMode)\n                    blendMode = slot.data.blendMode;\n                let slotColor = slot.color;\n                let attachmentColor = attachment.color;\n                color.set(skeletonColor.r * slotColor.r * attachmentColor.r, skeletonColor.g * slotColor.g * attachmentColor.g, skeletonColor.b * slotColor.b * attachmentColor.b, skeletonColor.a * slotColor.a * attachmentColor.a);\n                if (color.r != 1 || color.g != 1 || color.b != 1 || color.a != 1) {\n                    ctx.globalAlpha = color.a;\n                    // experimental tinting via compositing, doesn't work\n                    // ctx.globalCompositeOperation = \"source-atop\";\n                    // ctx.fillStyle = \"rgba(\" + (color.r * 255 | 0) + \", \" + (color.g * 255 | 0) + \", \" + (color.b * 255 | 0) + \", \" + color.a + \")\";\n                    // ctx.fillRect(0, 0, w, h);\n                }\n                for (var j = 0; j < triangles.length; j += 3) {\n                    let t1 = triangles[j] * 8, t2 = triangles[j + 1] * 8, t3 = triangles[j + 2] * 8;\n                    let x0 = vertices[t1], y0 = vertices[t1 + 1], u0 = vertices[t1 + 6], v0 = vertices[t1 + 7];\n                    let x1 = vertices[t2], y1 = vertices[t2 + 1], u1 = vertices[t2 + 6], v1 = vertices[t2 + 7];\n                    let x2 = vertices[t3], y2 = vertices[t3 + 1], u2 = vertices[t3 + 6], v2 = vertices[t3 + 7];\n                    this.drawTriangle(texture, x0, y0, u0, v0, x1, y1, u1, v1, x2, y2, u2, v2);\n                    if (this.debugRendering) {\n                        ctx.strokeStyle = \"green\";\n                        ctx.beginPath();\n                        ctx.moveTo(x0, y0);\n                        ctx.lineTo(x1, y1);\n                        ctx.lineTo(x2, y2);\n                        ctx.lineTo(x0, y0);\n                        ctx.stroke();\n                    }\n                }\n            }\n        }\n        this.ctx.globalAlpha = 1;\n    }\n    // Adapted from http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n    // Apache 2 licensed\n    drawTriangle(img, x0, y0, u0, v0, x1, y1, u1, v1, x2, y2, u2, v2) {\n        let ctx = this.ctx;\n        u0 *= img.width;\n        v0 *= img.height;\n        u1 *= img.width;\n        v1 *= img.height;\n        u2 *= img.width;\n        v2 *= img.height;\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.closePath();\n        x1 -= x0;\n        y1 -= y0;\n        x2 -= x0;\n        y2 -= y0;\n        u1 -= u0;\n        v1 -= v0;\n        u2 -= u0;\n        v2 -= v0;\n        var det = 1 / (u1 * v2 - u2 * v1), \n        // linear transformation\n        a = (v2 * x1 - v1 * x2) * det, b = (v2 * y1 - v1 * y2) * det, c = (u1 * x2 - u2 * x1) * det, d = (u1 * y2 - u2 * y1) * det, \n        // translation\n        e = x0 - a * u0 - c * v0, f = y0 - b * u0 - d * v0;\n        ctx.save();\n        ctx.transform(a, b, c, d, e, f);\n        ctx.clip();\n        ctx.drawImage(img, 0, 0);\n        ctx.restore();\n    }\n    computeRegionVertices(slot, region, pma) {\n        let skeletonColor = slot.bone.skeleton.color;\n        let slotColor = slot.color;\n        let regionColor = region.color;\n        let alpha = skeletonColor.a * slotColor.a * regionColor.a;\n        let multiplier = pma ? alpha : 1;\n        let color = this.tempColor;\n        color.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier, skeletonColor.g * slotColor.g * regionColor.g * multiplier, skeletonColor.b * slotColor.b * regionColor.b * multiplier, alpha);\n        region.computeWorldVertices(slot.bone, this.vertices, 0, SkeletonRenderer.VERTEX_SIZE);\n        let vertices = this.vertices;\n        let uvs = region.uvs;\n        vertices[RegionAttachment.C1R] = color.r;\n        vertices[RegionAttachment.C1G] = color.g;\n        vertices[RegionAttachment.C1B] = color.b;\n        vertices[RegionAttachment.C1A] = color.a;\n        vertices[RegionAttachment.U1] = uvs[0];\n        vertices[RegionAttachment.V1] = uvs[1];\n        vertices[RegionAttachment.C2R] = color.r;\n        vertices[RegionAttachment.C2G] = color.g;\n        vertices[RegionAttachment.C2B] = color.b;\n        vertices[RegionAttachment.C2A] = color.a;\n        vertices[RegionAttachment.U2] = uvs[2];\n        vertices[RegionAttachment.V2] = uvs[3];\n        vertices[RegionAttachment.C3R] = color.r;\n        vertices[RegionAttachment.C3G] = color.g;\n        vertices[RegionAttachment.C3B] = color.b;\n        vertices[RegionAttachment.C3A] = color.a;\n        vertices[RegionAttachment.U3] = uvs[4];\n        vertices[RegionAttachment.V3] = uvs[5];\n        vertices[RegionAttachment.C4R] = color.r;\n        vertices[RegionAttachment.C4G] = color.g;\n        vertices[RegionAttachment.C4B] = color.b;\n        vertices[RegionAttachment.C4A] = color.a;\n        vertices[RegionAttachment.U4] = uvs[6];\n        vertices[RegionAttachment.V4] = uvs[7];\n        return vertices;\n    }\n    computeMeshVertices(slot, mesh, pma) {\n        let skeletonColor = slot.bone.skeleton.color;\n        let slotColor = slot.color;\n        let regionColor = mesh.color;\n        let alpha = skeletonColor.a * slotColor.a * regionColor.a;\n        let multiplier = pma ? alpha : 1;\n        let color = this.tempColor;\n        color.set(skeletonColor.r * slotColor.r * regionColor.r * multiplier, skeletonColor.g * slotColor.g * regionColor.g * multiplier, skeletonColor.b * slotColor.b * regionColor.b * multiplier, alpha);\n        let vertexCount = mesh.worldVerticesLength / 2;\n        let vertices = this.vertices;\n        if (vertices.length < mesh.worldVerticesLength)\n            this.vertices = vertices = Utils.newFloatArray(mesh.worldVerticesLength);\n        mesh.computeWorldVertices(slot, 0, mesh.worldVerticesLength, vertices, 0, SkeletonRenderer.VERTEX_SIZE);\n        let uvs = mesh.uvs;\n        for (let i = 0, u = 0, v = 2; i < vertexCount; i++) {\n            vertices[v++] = color.r;\n            vertices[v++] = color.g;\n            vertices[v++] = color.b;\n            vertices[v++] = color.a;\n            vertices[v++] = uvs[u++];\n            vertices[v++] = uvs[u++];\n            v += 2;\n        }\n        return vertices;\n    }\n}\nSkeletonRenderer.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];\nSkeletonRenderer.VERTEX_SIZE = 2 + 2 + 4;\n//# sourceMappingURL=data:application/json;base64,","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Texture } from \"./../spine-core/index\";\nexport class CanvasTexture extends Texture {\n    constructor(image) {\n        super(image);\n    }\n    setFilters(minFilter, magFilter) { }\n    setWraps(uWrap, vWrap) { }\n    dispose() { }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FudmFzVGV4dHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9DYW52YXNUZXh0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0VBMkIrRTtBQUUvRSxPQUFPLEVBQUUsT0FBTyxFQUE4QixNQUFNLDhCQUE4QixDQUFDO0FBRW5GLE1BQU0sT0FBTyxhQUFjLFNBQVEsT0FBTztJQUN6QyxZQUFhLEtBQXVCO1FBQ25DLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNkLENBQUM7SUFFRCxVQUFVLENBQUUsU0FBd0IsRUFBRSxTQUF3QixJQUFJLENBQUM7SUFDbkUsUUFBUSxDQUFFLEtBQWtCLEVBQUUsS0FBa0IsSUFBSSxDQUFDO0lBQ3JELE9BQU8sS0FBTSxDQUFDO0NBQ2QifQ==","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { AssetManagerBase } from \"./../spine-core/AssetManagerBase\";\nimport { CanvasTexture } from \"./CanvasTexture\";\nexport class AssetManager extends AssetManagerBase {\n    constructor(onLoad = () => {}, pathPrefix = \"\", downloader = null) {\n        super(onLoad, (image) => { return new CanvasTexture(image); }, pathPrefix, downloader);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXRNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Fzc2V0TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFjLE1BQU0sOEJBQThCLENBQUE7QUFDM0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE1BQU0sT0FBTyxZQUFhLFNBQVEsZ0JBQWdCO0lBQ2pELFlBQWEsYUFBcUIsRUFBRSxFQUFFLGFBQXlCLElBQUk7UUFDbEUsS0FBSyxDQUFDLENBQUMsS0FBdUIsRUFBRSxFQUFFLEdBQUcsT0FBTyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDbEcsQ0FBQztDQUNEIn0=","// karas画mesh的插件\nimport karas from 'karas';\nimport { SkeletonRenderer } from './spine-canvas/SkeletonRenderer';\nimport { AssetManager } from './spine-canvas/AssetManager';\nimport { TextureAtlas } from './spine-core/TextureAtlas';\nimport { AtlasAttachmentLoader } from './spine-core/AtlasAttachmentLoader';\nimport { SkeletonJson } from './spine-core/SkeletonJson';\nimport { Skeleton } from './spine-core/Skeleton';\nimport { Vector2 } from './spine-core/Utils';\nimport { AnimationState } from './spine-core/AnimationState';\nimport { AnimationStateData } from './spine-core/AnimationStateData';\n\n// 储存全局的spine渲染器的对象。在一个karas场景里面，n个spine元素使用同一个渲染器。一个页面可以有n个karas场景，根据canvas上下文唯一确定渲染器\nconst GlobalSpineRendererMap = new WeakMap();\n\n/**\n * props参数介绍：\n * atlas 必填，url。\n * image 必填，图片url\n * json 必填，url。包含骨骼数据\n * 下面都是选填：\n * animation 动画名称。改这个字段切换不同动画播放。默认是idle或者是解析出来之后的第一个动画（如果不存在idle名称的动画情况下）\n * skin 皮肤名称。可以切换皮肤。默认是default\n * loopCount 重复次数。默认无限重复\n * onLoop 每次循环播放会触发一次事件\n * onStart 动画刚开始播放的事件\n * onEnd 动画播放完毕的事件\n * debugger\n */\nexport default class Spine extends karas.Component {\n\n  verticesData = [];\n  renderer = null;\n  isParsed = false;\n\n  lastTime = Date.now();\n  currentTime = Date.now();\n\n  constructor(props) {\n    super(props);\n\n    this.animationName = props.animation || 'idle';\n    this.skinName = props.skin || 'default';\n    this.loopCount = props.loopCount || Infinity;\n    // 一开始就先加载资源\n    this.load();\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  playAnimation = (animationName = this.animationName, loop = this.loopCount, skinName = this.skinName) => {\n    this.loopCount = loop;\n    let data = this.loadSkeleton(animationName, skinName); // 默认的骨骼动画名称和皮肤名称\n    this.state = data.state;\n    this.skeleton = data.skeleton;\n    this.bounds = data.bounds;\n    this.isParsed = true;\n    this.lastTime = Date.now() / 1000;\n    this.currentTime = Date.now() / 1000;\n    this.animationsList = data.animations;\n  }\n\n  load() {\n    this.assetManager = new AssetManager(this.playAnimation);\n    this.assetManager.loadText(this.props.atlas);\n    this.assetManager.loadText(this.props.json);\n    this.assetManager.loadTexture(this.props.image);\n  }\n\n  initRender(ctx) {\n    this.ctx = ctx;\n    this.renderer = GlobalSpineRendererMap.get(this.ctx);\n    if (!this.renderer) {\n      this.renderer = new SkeletonRenderer(ctx);\n      GlobalSpineRendererMap.set(this.ctx, this.renderer);\n    }\n  }\n\n  componentDidMount() {\n    let fake = this.ref.fake;\n    fake.clearAnimate();\n\n    fake.animate([\n      {\n        backgroundColor: '#000',\n      },\n      {\n        backgroundColor: '#fff',\n      },\n    ], {\n      duration: 10000,\n      iterations: Infinity,\n    });\n\n    fake.render = (renderMode, lv, ctx) => {\n      if (!this.bounds) {\n        return\n      }\n      let fitSize = this.props.fitSize;\n      let size = fake.getComputedStyle(['width', 'height']);\n      // console.log(size)\n      let x = this.bounds.offset.x;\n      let y = this.bounds.offset.y;\n      let width = this.bounds.size.x;\n      let height = this.bounds.size.y;\n      let centerX = x + width * 0.5;\n      let centerY = y + height * 0.5;\n      // let matrix = mesh.matrixEvent;\n      this.currentTime = Date.now() / 1000;\n\n      let delta = this.currentTime - this.lastTime;\n      this.lastTime = this.currentTime;\n      // matrix4转matrix2_3\n      // ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12] + (this.bounds?.size.x || 0) * matrix[0], matrix[13] + (this.bounds?.size.y || 0) * matrix[5]);\n      ctx.translate(fake.sx, fake.sy);\n      let scale = 1;\n      if (fitSize) {\n        let scx = width / size.width;\n        let scy = height / size.height;\n        scale = fitSize === 'cover' ? Math.min(scx, scy) : Math.max(scx, scy);\n        if (scale !== 1) {\n          ctx.scale(1 / scale, 1 / scale);\n        }\n\n        // console.log(scale, size)\n      }\n      ctx.translate(-centerX, -centerY);\n      ctx.translate(size.width * 0.5 * scale, size.height * 0.5 * scale);\n\n      if (!this.renderer) {\n        this.initRender(ctx);\n      }\n      if (this.isParsed) {\n        if(this.props.debug) {\n          this.renderer.debugRendering = true;\n        }\n        if(this.props.triangle) {\n          this.renderer.triangleRendering = true;\n        }\n        this.state.update(delta);\n        this.state.apply(this.skeleton);\n        this.skeleton.updateWorldTransform();\n        this.renderer.draw(this.skeleton);\n      }\n      // debugger\n    };\n  }\n\n  loadSkeleton(initialAnimation, skin) {\n    if (skin === undefined) skin = \"default\";\n    let assetManager = this.assetManager;\n    let atlas = new TextureAtlas(assetManager.require(this.props.atlas));\n    atlas.setTextures(assetManager, this.props.image);\n\n    let atlasLoader = new AtlasAttachmentLoader(atlas);\n    var skeletonJson = new SkeletonJson(atlasLoader);\n\n    var skeletonData = skeletonJson.readSkeletonData(assetManager.require(this.props.json));\n    var skeleton = new Skeleton(skeletonData);\n    skeleton.scaleY = -1;\n    var bounds = calculateBounds(skeleton);\n    skeleton.setSkinByName(skin);\n\n\n    var animationState = new AnimationState(new AnimationStateData(skeleton.data));\n    animationState.setAnimation(0, initialAnimation, 0);\n    this.props.onStart?.(initialAnimation, this.loopCount);\n    animationState.addListener({\n      complete: () => {\n        this.loopCount--;\n        this.props.onLoop?.(initialAnimation, this.loopCount);\n\n        if (this.loopCount > 0) {\n          animationState.setAnimation(0, initialAnimation, 0);\n        } else {\n          this.props.onEnd?.(initialAnimation);\n        }\n      },\n    })\n\n    return { skeleton: skeleton, state: animationState, bounds: bounds };\n  }\n\n  render() {\n    return <div ref=\"mesh\" style={this.props.style || {}}>\n      <$polyline ref=\"fake\" style={{\n        width: '100%',\n        height: '100%',\n      }} />\n    </div>;;\n  }\n}\n\nfunction calculateBounds(skeleton) {\n  skeleton.setToSetupPose();\n  skeleton.updateWorldTransform();\n  var offset = new Vector2();\n  var size = new Vector2();\n  skeleton.getBounds(offset, size, []);\n  return { offset: offset, size: size };\n}\n\n"],"names":["StringSet","constructor","entries","size","add","value","contains","addAll","values","oldSize","i","n","length","clear","Color","r","g","b","a","set","clamp","setFromColor","c","setFromString","hex","charAt","substr","parseInt","rgba8888ToColor","color","rgb888ToColor","fromString","WHITE","RED","GREEN","BLUE","MAGENTA","MathUtils","min","max","cosDeg","degrees","Math","cos","degRad","sinDeg","sin","signum","toInt","x","floor","ceil","cbrt","y","pow","abs","randomTriangular","randomTriangularWith","mode","u","random","d","sqrt","isPowerOfTwo","PI","PI2","radiansToDegrees","radDeg","degreesToRadians","Interpolation","apply","start","end","applyInternal","Pow","power","PowOut","Utils","arrayCopy","source","sourceStart","dest","destStart","numElements","j","arrayFill","array","fromIndex","toIndex","setArraySize","ensureArrayCapacity","newArray","defaultValue","Array","newFloatArray","SUPPORTS_TYPED_ARRAYS","Float32Array","newShortArray","Int16Array","toFloatArray","toSinglePrecision","fround","webkit602BugfixHelper","alpha","blend","element","identity","enumValue","type","name","toUpperCase","slice","Pool","instantiator","items","obtain","pop","free","item","reset","push","freeAll","Vector2","normalize","len","Animation","timelines","duration","Error","setTimelines","timelineIds","getPropertyIds","hasTimeline","ids","skeleton","lastTime","time","loop","events","direction","MixBlend","MixDirection","Property","rotate","scaleX","scaleY","shearX","shearY","rgb","rgb2","attachment","deform","event","drawOrder","ikConstraint","transformConstraint","pathConstraintPosition","pathConstraintSpacing","pathConstraintMix","Timeline","frameCount","propertyIds","frames","getFrameEntries","getFrameCount","getDuration","search1","search","step","CurveTimeline","bezierCount","curves","setLinear","frame","setStepped","shrink","newCurves","setBezier","bezier","time1","value1","cx1","cy1","cx2","cy2","time2","value2","tmpx","tmpy","dddx","dddy","ddx","ddy","dx","dy","getBezierValue","frameIndex","valueOffset","CurveTimeline1","propertyId","setFrame","getCurveValue","ii","curveType","before","CurveTimeline2","propertyId1","propertyId2","RotateTimeline","boneIndex","bone","bones","active","setup","rotation","data","first","replace","TranslateTimeline","t","TranslateXTimeline","TranslateYTimeline","ScaleTimeline","bx","by","mixOut","ScaleXTimeline","ScaleYTimeline","ShearTimeline","ShearXTimeline","ShearYTimeline","RGBATimeline","slotIndex","slot","slots","RGBTimeline","AlphaTimeline","RGBA2Timeline","r2","g2","b2","light","dark","darkColor","setupLight","setupDark","RGB2Timeline","AttachmentTimeline","attachmentNames","attachmentName","setAttachment","getAttachment","DeformTimeline","id","vertices","getCurvePercent","firedEvents","slotAttachment","VertexAttachment","deformAttachment","vertexCount","vertexAttachment","setupVertices","lastVertices","percent","prevVertices","nextVertices","prev","EventTimeline","Number","MAX_VALUE","frameTime","DrawOrderTimeline","drawOrders","drawOrderToSetupIndex","IkConstraintTimeline","ikConstraintIndex","mix","softness","bendDirection","compress","stretch","constraint","ikConstraints","mixIn","TransformConstraintTimeline","transformConstraintIndex","mixRotate","mixX","mixY","mixScaleX","mixScaleY","mixShearY","transformConstraints","PathConstraintPositionTimeline","pathConstraintIndex","pathConstraints","position","PathConstraintSpacingTimeline","spacing","PathConstraintMixTimeline","AnimationState","tracks","timeScale","unkeyedState","listeners","queue","EventQueue","propertyIDs","animationsChanged","trackEntryPool","TrackEntry","emptyAnimation","_emptyAnimation","update","delta","current","animationLast","nextAnimationLast","trackLast","nextTrackLast","currentDelta","delay","next","nextTime","trackTime","setCurrent","mixingFrom","mixTime","trackEnd","clearNext","updateMixingFrom","from","mixingTo","drain","to","finished","mixDuration","totalAlpha","interruptAlpha","_animationsChanged","applied","mixBlend","applyMixingFrom","animationTime","getAnimationTime","applyTime","applyEvents","reverse","animation","timelineCount","timeline","applyAttachmentTimeline","timelineMode","firstFrame","timelinesRotation","timelineBlend","SUBSEQUENT","applyRotateTimeline","queueEvents","setupState","SETUP","attachmentState","index","attachments","attachmentThreshold","drawOrderThreshold","alphaHold","alphaMix","eventThreshold","timelineHoldMix","FIRST","HOLD_SUBSEQUENT","HOLD_FIRST","holdMix","CURRENT","r1","total","diff","lastTotal","lastDiff","dir","entry","animationStart","animationEnd","trackLastWrapped","complete","clearTracks","oldDrainDisabled","drainDisabled","clearTrack","trackIndex","interrupt","expandToIndex","previous","setAnimation","animationName","skeletonData","findAnimation","setAnimationWith","trackEntry","addAnimation","addAnimationWith","last","getTrackComplete","setEmptyAnimation","addEmptyAnimation","setEmptyAnimations","holdPrevious","getMix","dispose","computeHold","timelinesCount","outer","HOLD_MIX","getCurrent","addListener","listener","removeListener","indexOf","splice","clearListeners","clearListenerNotifications","setAnimationLast","isComplete","resetRotationDirections","animState","objects","EventType","AnimationStateData","animationToMixTime","defaultMix","setMix","fromName","toName","setMixWith","key","undefined","Texture","image","_image","getImage","TextureFilter","TextureWrap","TextureRegion","v","u2","v2","width","height","offsetX","offsetY","originalWidth","originalHeight","TextureAtlas","atlasText","pages","regions","reader","TextureAtlasReader","page","region","pageFields","minFilter","magFilter","uWrap","Repeat","vWrap","pma","regionFields","line","readLine","trim","readEntry","names","TextureAtlasPage","field","TextureAtlasRegion","count","entryValues","findRegion","setTextures","assetManager","path","setTexture","get","texture","text","lines","split","colon","lastMatch","comma","Nearest","ClampToEdge","setFilters","setWraps","AtlasAttachmentLoader","atlas","newRegionAttachment","skin","renderObject","RegionAttachment","setRegion","newMeshAttachment","MeshAttachment","newBoundingBoxAttachment","BoundingBoxAttachment","newPathAttachment","PathAttachment","newPointAttachment","PointAttachment","newClippingAttachment","ClippingAttachment","BoneData","parent","transformMode","TransformMode","Normal","skinRequired","Bone","children","ax","ay","arotation","ascaleX","ascaleY","ashearX","ashearY","worldY","worldX","sorted","setToSetupPose","isActive","updateWorldTransformWith","updateWorldTransform","rotationY","sx","sy","pa","pb","pc","pd","la","lb","lc","ld","OnlyTranslation","NoRotationOrReflection","s","prx","atan2","rx","ry","NoScale","NoScaleOrReflection","za","zc","zb","zd","getWorldRotationX","getWorldRotationY","getWorldScaleX","getWorldScaleY","updateAppliedTransform","pid","ia","ib","ic","ra","rb","rc","rd","det","worldToLocal","world","invDet","localToWorld","local","worldToLocalRotation","worldRotation","localToWorldRotation","localRotation","rotateWorld","ConstraintData","order","AssetManagerBase","onLoad","textureLoader","pathPrefix","downloader","assets","errors","toLoad","loaded","Downloader","success","callback","asset","error","message","setRawDataURI","rawDataUris","loadBinary","downloadBinary","status","responseText","loadText","downloadText","loadJson","downloadJson","loadTexture","isBrowser","window","navigator","document","isWebWorker","fetch","then","response","ok","blob","createImageBitmap","premultiplyAlpha","colorSpaceConversion","bitmap","Image","crossOrigin","onload","onerror","src","loadTextureAtlas","lastIndexOf","substring","abort","imagePath","e","require","remove","removeAll","isLoadingComplete","getToLoad","getLoaded","hasErrors","Object","keys","getErrors","callbacks","dataUriToString","dataUri","startsWith","base64Idx","atob","base64ToUint8Array","base64","binary_string","bytes","Uint8Array","charCodeAt","dataUriToUint8Array","url","finish","JSON","stringify","request","XMLHttpRequest","overrideMimeType","open","done","send","parse","responseType","args","Event","EventData","IkConstraint","findBone","target","apply1","uniform","apply2","targetX","targetY","p","rotationIK","tx","ty","sa","sc","dd","child","bendDir","px","py","psx","psy","csx","os1","os2","s2","cx","cy","cwx","cwy","pp","l1","l2","a1","a2","td","sd","acos","aa","bb","ta","c1","c2","q","r0","minAngle","minX","minDist","minY","maxAngle","maxX","maxDist","maxY","os","IkConstraintData","PathConstraintData","PositionMode","SpacingMode","RotateMode","PathConstraint","spaces","positions","lengths","segments","findSlot","tangents","rotateMode","Tangent","scale","ChainScale","boneCount","spacesCount","spacingMode","Percent","setupLength","epsilon","Proportional","sum","lengthSpacing","Length","computeWorldPositions","boneX","boneY","offsetRotation","tip","Chain","out","closed","verticesLength","worldVerticesLength","curveCount","prevCurve","NONE","constantSpeed","pathLength","positionMode","multiplier","o","curve","space","BEFORE","computeWorldVertices","addBeforePosition","AFTER","addAfterPosition","addCurvePosition","x1","y1","x2","y2","dddfx","dddfy","ddfx","ddfy","dfx","dfy","w","curveLength","segment","temp","isNaN","tt","ttt","uu","uuu","ut","ut3","uut3","utt3","Slot","getSkeleton","attachmentTime","setAttachmentTime","getAttachmentTime","TransformConstraint","relative","applyRelativeLocal","applyAbsoluteLocal","applyRelativeWorld","applyAbsoluteWorld","translate","tb","tc","degRadReflect","offsetShearY","offsetScaleX","offsetScaleY","Skeleton","_updateCache","boneData","slotData","ikConstraintData","transformConstraintData","pathConstraintData","updateCache","skinBones","ikCount","transformCount","pathCount","constraintCount","sortIkConstraint","sortTransformConstraint","sortPathConstraint","sortBone","constraints","constrained","sortReset","slotBone","sortPathConstraintAttachment","defaultSkin","skins","sortPathConstraintAttachmentWith","pathBones","nn","rootBone","getRootBone","updatable","setBonesToSetupPose","setSlotsToSetupPose","boneName","slotName","setSkinByName","skinName","findSkin","setSkin","newSkin","attachAll","getAttachmentByName","findIkConstraint","constraintName","findTransformConstraint","findPathConstraint","getBounds","offset","POSITIVE_INFINITY","NEGATIVE_INFINITY","mesh","SkeletonData","animations","fps","findEvent","eventDataName","SkinEntry","Skin","addSkin","contained","getAttachments","copySkin","newLinkedMesh","copy","dictionary","removeAttachment","slotAttachments","getAttachmentsForSlot","oldSkin","skinAttachment","SlotData","BlendMode","AttachmentType","SkeletonJson","attachmentLoader","linkedMeshes","readSkeletonData","json","root","skeletonMap","hash","version","spine","imagesPath","images","boneMap","parentName","getValue","slotMap","blendMode","ik","constraintMap","transform","TransformConstraintData","targetName","Fixed","skinMap","entryName","readAttachment","linkedMesh","inheritDeform","setParentMesh","updateUVs","eventName","eventMap","intValue","floatValue","stringValue","audioPath","volume","balance","animationMap","readAnimation","map","updateOffset","box","readVertices","LinkedMesh","uvs","triangles","regionUVs","edges","hullLength","point","clip","endSlot","scaledVertices","weights","timelineName","timelineMap","keyMap","nextMap","newColor","readCurve","readTimeline1","color2","newColor2","readTimeline2","constraintIndex","mix2","softness2","mixRotate2","mixX2","mixY2","mixScaleX2","mixScaleY2","mixShearY2","deformName","deformMap","weighted","deformLength","verticesValue","slotCount","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","eventData","name1","name2","nvalue1","nvalue2","property","GlobalSpineRendererMap","WeakMap","Spine","props","Date","now","loopCount","loadSkeleton","state","bounds","isParsed","currentTime","animationsList","Infinity","load","AssetManager","playAnimation","ctx","renderer","SkeletonRenderer","fake","ref","clearAnimate","animate","backgroundColor","iterations","render","renderMode","lv","fitSize","getComputedStyle","centerX","centerY","scx","scy","initRender","debug","debugRendering","triangle","triangleRendering","draw","initialAnimation","atlasLoader","skeletonJson","calculateBounds","animationState","onStart","onLoop","onEnd","karas","style","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAoBO,MAAMA,SAAN,CAAgB;EACnBC,EAAAA,WAAW,GAAG;EACV,SAAKC,OAAL,GAAe,EAAf;EACA,SAAKC,IAAL,GAAY,CAAZ;EACH;;EACDC,EAAAA,GAAG,CAACC,KAAD,EAAQ;EACP,QAAIC,QAAQ,GAAG,KAAKJ,OAAL,CAAaG,KAAb,CAAf;EACA,SAAKH,OAAL,CAAaG,KAAb,IAAsB,IAAtB;;EACA,QAAI,CAACC,QAAL,EAAe;EACX,WAAKH,IAAL;EACA,aAAO,IAAP;EACH;;EACD,WAAO,KAAP;EACH;;EACDI,EAAAA,MAAM,CAACC,MAAD,EAAS;EACX,QAAIC,OAAO,GAAG,KAAKN,IAAnB;;EACA,SAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EACI,KAAKN,GAAL,CAASI,MAAM,CAACE,CAAD,CAAf;;EACJ,WAAOD,OAAO,IAAI,KAAKN,IAAvB;EACH;;EACDG,EAAAA,QAAQ,CAACD,KAAD,EAAQ;EACZ,WAAO,KAAKH,OAAL,CAAaG,KAAb,CAAP;EACH;;EACDQ,EAAAA,KAAK,GAAG;EACJ,SAAKX,OAAL,GAAe,EAAf;EACA,SAAKC,IAAL,GAAY,CAAZ;EACH;;EA1BkB;EA4BhB,MAAMW,KAAN,CAAY;EACfb,EAAAA,WAAW,CAACc,CAAC,GAAG,CAAL,EAAQC,CAAC,GAAG,CAAZ,EAAeC,CAAC,GAAG,CAAnB,EAAsBC,CAAC,GAAG,CAA1B,EAA6B;EACpC,SAAKH,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACH;;EACDC,EAAAA,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAa;EACZ,SAAKH,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACA,SAAKC,CAAL,GAASA,CAAT;EACA,WAAO,KAAKE,KAAL,EAAP;EACH;;EACDC,EAAAA,YAAY,CAACC,CAAD,EAAI;EACZ,SAAKP,CAAL,GAASO,CAAC,CAACP,CAAX;EACA,SAAKC,CAAL,GAASM,CAAC,CAACN,CAAX;EACA,SAAKC,CAAL,GAASK,CAAC,CAACL,CAAX;EACA,SAAKC,CAAL,GAASI,CAAC,CAACJ,CAAX;EACA,WAAO,IAAP;EACH;;EACDK,EAAAA,aAAa,CAACC,GAAD,EAAM;EACfA,IAAAA,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAW,CAAX,KAAiB,GAAjB,GAAuBD,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAvB,GAAuCF,GAA7C;EACA,SAAKT,CAAL,GAASY,QAAQ,CAACH,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAR,GAAiC,GAA1C;EACA,SAAKV,CAAL,GAASW,QAAQ,CAACH,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAR,GAAiC,GAA1C;EACA,SAAKT,CAAL,GAASU,QAAQ,CAACH,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAR,GAAiC,GAA1C;EACA,SAAKR,CAAL,GAASM,GAAG,CAACZ,MAAJ,IAAc,CAAd,GAAkB,CAAlB,GAAsBe,QAAQ,CAACH,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAR,GAAiC,GAAhE;EACA,WAAO,IAAP;EACH;;EACDtB,EAAAA,GAAG,CAACW,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAa;EACZ,SAAKH,CAAL,IAAUA,CAAV;EACA,SAAKC,CAAL,IAAUA,CAAV;EACA,SAAKC,CAAL,IAAUA,CAAV;EACA,SAAKC,CAAL,IAAUA,CAAV;EACA,WAAO,KAAKE,KAAL,EAAP;EACH;;EACDA,EAAAA,KAAK,GAAG;EACJ,QAAI,KAAKL,CAAL,GAAS,CAAb,EACI,KAAKA,CAAL,GAAS,CAAT,CADJ,KAEK,IAAI,KAAKA,CAAL,GAAS,CAAb,EACD,KAAKA,CAAL,GAAS,CAAT;EACJ,QAAI,KAAKC,CAAL,GAAS,CAAb,EACI,KAAKA,CAAL,GAAS,CAAT,CADJ,KAEK,IAAI,KAAKA,CAAL,GAAS,CAAb,EACD,KAAKA,CAAL,GAAS,CAAT;EACJ,QAAI,KAAKC,CAAL,GAAS,CAAb,EACI,KAAKA,CAAL,GAAS,CAAT,CADJ,KAEK,IAAI,KAAKA,CAAL,GAAS,CAAb,EACD,KAAKA,CAAL,GAAS,CAAT;EACJ,QAAI,KAAKC,CAAL,GAAS,CAAb,EACI,KAAKA,CAAL,GAAS,CAAT,CADJ,KAEK,IAAI,KAAKA,CAAL,GAAS,CAAb,EACD,KAAKA,CAAL,GAAS,CAAT;EACJ,WAAO,IAAP;EACH;;EACqB,SAAfU,eAAe,CAACC,KAAD,EAAQxB,KAAR,EAAe;EACjCwB,IAAAA,KAAK,CAACd,CAAN,GAAU,CAAC,CAACV,KAAK,GAAG,UAAT,MAAyB,EAA1B,IAAgC,GAA1C;EACAwB,IAAAA,KAAK,CAACb,CAAN,GAAU,CAAC,CAACX,KAAK,GAAG,UAAT,MAAyB,EAA1B,IAAgC,GAA1C;EACAwB,IAAAA,KAAK,CAACZ,CAAN,GAAU,CAAC,CAACZ,KAAK,GAAG,UAAT,MAAyB,CAA1B,IAA+B,GAAzC;EACAwB,IAAAA,KAAK,CAACX,CAAN,GAAU,CAAEb,KAAK,GAAG,UAAV,IAAyB,GAAnC;EACH;;EACmB,SAAbyB,aAAa,CAACD,KAAD,EAAQxB,KAAR,EAAe;EAC/BwB,IAAAA,KAAK,CAACd,CAAN,GAAU,CAAC,CAACV,KAAK,GAAG,UAAT,MAAyB,EAA1B,IAAgC,GAA1C;EACAwB,IAAAA,KAAK,CAACb,CAAN,GAAU,CAAC,CAACX,KAAK,GAAG,UAAT,MAAyB,CAA1B,IAA+B,GAAzC;EACAwB,IAAAA,KAAK,CAACZ,CAAN,GAAU,CAAEZ,KAAK,GAAG,UAAV,IAAyB,GAAnC;EACH;;EACgB,SAAV0B,UAAU,CAACP,GAAD,EAAM;EACnB,WAAO,IAAIV,KAAJ,GAAYS,aAAZ,CAA0BC,GAA1B,CAAP;EACH;;EApEc;EAsEnBV,KAAK,CAACkB,KAAN,GAAc,IAAIlB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd;EACAA,KAAK,CAACmB,GAAN,GAAY,IAAInB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAZ;EACAA,KAAK,CAACoB,KAAN,GAAc,IAAIpB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAd;EACAA,KAAK,CAACqB,IAAN,GAAa,IAAIrB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAb;EACAA,KAAK,CAACsB,OAAN,GAAgB,IAAItB,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAhB;EACO,MAAMuB,SAAN,CAAgB;EACP,SAALjB,KAAK,CAACf,KAAD,EAAQiC,GAAR,EAAaC,GAAb,EAAkB;EAC1B,QAAIlC,KAAK,GAAGiC,GAAZ,EACI,OAAOA,GAAP;EACJ,QAAIjC,KAAK,GAAGkC,GAAZ,EACI,OAAOA,GAAP;EACJ,WAAOlC,KAAP;EACH;;EACY,SAANmC,MAAM,CAACC,OAAD,EAAU;EACnB,WAAOC,IAAI,CAACC,GAAL,CAASF,OAAO,GAAGJ,SAAS,CAACO,MAA7B,CAAP;EACH;;EACY,SAANC,MAAM,CAACJ,OAAD,EAAU;EACnB,WAAOC,IAAI,CAACI,GAAL,CAASL,OAAO,GAAGJ,SAAS,CAACO,MAA7B,CAAP;EACH;;EACY,SAANG,MAAM,CAAC1C,KAAD,EAAQ;EACjB,WAAOA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAK,GAAG,CAAR,GAAY,CAAC,CAAb,GAAiB,CAAxC;EACH;;EACW,SAAL2C,KAAK,CAACC,CAAD,EAAI;EACZ,WAAOA,CAAC,GAAG,CAAJ,GAAQP,IAAI,CAACQ,KAAL,CAAWD,CAAX,CAAR,GAAwBP,IAAI,CAACS,IAAL,CAAUF,CAAV,CAA/B;EACH;;EACU,SAAJG,IAAI,CAACH,CAAD,EAAI;EACX,QAAII,CAAC,GAAGX,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,GAAL,CAASN,CAAT,CAAT,EAAsB,IAAI,CAA1B,CAAR;EACA,WAAOA,CAAC,GAAG,CAAJ,GAAQ,CAACI,CAAT,GAAaA,CAApB;EACH;;EACsB,SAAhBG,gBAAgB,CAAClB,GAAD,EAAMC,GAAN,EAAW;EAC9B,WAAOF,SAAS,CAACoB,oBAAV,CAA+BnB,GAA/B,EAAoCC,GAApC,EAAyC,CAACD,GAAG,GAAGC,GAAP,IAAc,GAAvD,CAAP;EACH;;EAC0B,SAApBkB,oBAAoB,CAACnB,GAAD,EAAMC,GAAN,EAAWmB,IAAX,EAAiB;EACxC,QAAIC,CAAC,GAAGjB,IAAI,CAACkB,MAAL,EAAR;EACA,QAAIC,CAAC,GAAGtB,GAAG,GAAGD,GAAd;EACA,QAAIqB,CAAC,IAAI,CAACD,IAAI,GAAGpB,GAAR,IAAeuB,CAAxB,EACI,OAAOvB,GAAG,GAAGI,IAAI,CAACoB,IAAL,CAAUH,CAAC,GAAGE,CAAJ,IAASH,IAAI,GAAGpB,GAAhB,CAAV,CAAb;EACJ,WAAOC,GAAG,GAAGG,IAAI,CAACoB,IAAL,CAAU,CAAC,IAAIH,CAAL,IAAUE,CAAV,IAAetB,GAAG,GAAGmB,IAArB,CAAV,CAAb;EACH;;EACkB,SAAZK,YAAY,CAAC1D,KAAD,EAAQ;EACvB,WAAOA,KAAK,IAAI,CAACA,KAAK,GAAIA,KAAK,GAAG,CAAlB,MAA0B,CAA1C;EACH;;EApCkB;EAsCvBgC,SAAS,CAAC2B,EAAV,GAAe,SAAf;EACA3B,SAAS,CAAC4B,GAAV,GAAgB5B,SAAS,CAAC2B,EAAV,GAAe,CAA/B;EACA3B,SAAS,CAAC6B,gBAAV,GAA6B,MAAM7B,SAAS,CAAC2B,EAA7C;EACA3B,SAAS,CAAC8B,MAAV,GAAmB9B,SAAS,CAAC6B,gBAA7B;EACA7B,SAAS,CAAC+B,gBAAV,GAA6B/B,SAAS,CAAC2B,EAAV,GAAe,GAA5C;EACA3B,SAAS,CAACO,MAAV,GAAmBP,SAAS,CAAC+B,gBAA7B;EACO,MAAMC,aAAN,CAAoB;EACvBC,EAAAA,KAAK,CAACC,KAAD,EAAQC,GAAR,EAAatD,CAAb,EAAgB;EACjB,WAAOqD,KAAK,GAAG,CAACC,GAAG,GAAGD,KAAP,IAAgB,KAAKE,aAAL,CAAmBvD,CAAnB,CAA/B;EACH;;EAHsB;EAKpB,MAAMwD,GAAN,SAAkBL,aAAlB,CAAgC;EACnCpE,EAAAA,WAAW,CAAC0E,KAAD,EAAQ;EACf;EACA,SAAKA,KAAL,GAAa,CAAb;EACA,SAAKA,KAAL,GAAaA,KAAb;EACH;;EACDF,EAAAA,aAAa,CAACvD,CAAD,EAAI;EACb,QAAIA,CAAC,IAAI,GAAT,EACI,OAAOwB,IAAI,CAACY,GAAL,CAASpC,CAAC,GAAG,CAAb,EAAgB,KAAKyD,KAArB,IAA8B,CAArC;EACJ,WAAOjC,IAAI,CAACY,GAAL,CAAS,CAACpC,CAAC,GAAG,CAAL,IAAU,CAAnB,EAAsB,KAAKyD,KAA3B,KAAqC,KAAKA,KAAL,GAAa,CAAb,IAAkB,CAAlB,GAAsB,CAAC,CAAvB,GAA2B,CAAhE,IAAqE,CAA5E;EACH;;EAVkC;EAYhC,MAAMC,MAAN,SAAqBF,GAArB,CAAyB;EAC5BzE,EAAAA,WAAW,CAAC0E,KAAD,EAAQ;EACf,UAAMA,KAAN;EACH;;EACDF,EAAAA,aAAa,CAACvD,CAAD,EAAI;EACb,WAAOwB,IAAI,CAACY,GAAL,CAASpC,CAAC,GAAG,CAAb,EAAgB,KAAKyD,KAArB,KAA+B,KAAKA,KAAL,GAAa,CAAb,IAAkB,CAAlB,GAAsB,CAAC,CAAvB,GAA2B,CAA1D,IAA+D,CAAtE;EACH;;EAN2B;EAQzB,MAAME,KAAN,CAAY;EACC,SAATC,SAAS,CAACC,MAAD,EAASC,WAAT,EAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoD;EAChE,SAAK,IAAIzE,CAAC,GAAGsE,WAAR,EAAqBI,CAAC,GAAGF,SAA9B,EAAyCxE,CAAC,GAAGsE,WAAW,GAAGG,WAA3D,EAAwEzE,CAAC,IAAI0E,CAAC,EAA9E,EAAkF;EAC9EH,MAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUL,MAAM,CAACrE,CAAD,CAAhB;EACH;EACJ;;EACe,SAAT2E,SAAS,CAACC,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,EAA4BnF,KAA5B,EAAmC;EAC/C,SAAK,IAAIK,CAAC,GAAG6E,SAAb,EAAwB7E,CAAC,GAAG8E,OAA5B,EAAqC9E,CAAC,EAAtC,EACI4E,KAAK,CAAC5E,CAAD,CAAL,GAAWL,KAAX;EACP;;EACkB,SAAZoF,YAAY,CAACH,KAAD,EAAQnF,IAAR,EAAcE,KAAK,GAAG,CAAtB,EAAyB;EACxC,QAAII,OAAO,GAAG6E,KAAK,CAAC1E,MAApB;EACA,QAAIH,OAAO,IAAIN,IAAf,EACI,OAAOmF,KAAP;EACJA,IAAAA,KAAK,CAAC1E,MAAN,GAAeT,IAAf;;EACA,QAAIM,OAAO,GAAGN,IAAd,EAAoB;EAChB,WAAK,IAAIO,CAAC,GAAGD,OAAb,EAAsBC,CAAC,GAAGP,IAA1B,EAAgCO,CAAC,EAAjC,EACI4E,KAAK,CAAC5E,CAAD,CAAL,GAAWL,KAAX;EACP;;EACD,WAAOiF,KAAP;EACH;;EACyB,SAAnBI,mBAAmB,CAACJ,KAAD,EAAQnF,IAAR,EAAcE,KAAK,GAAG,CAAtB,EAAyB;EAC/C,QAAIiF,KAAK,CAAC1E,MAAN,IAAgBT,IAApB,EACI,OAAOmF,KAAP;EACJ,WAAOT,KAAK,CAACY,YAAN,CAAmBH,KAAnB,EAA0BnF,IAA1B,EAAgCE,KAAhC,CAAP;EACH;;EACc,SAARsF,QAAQ,CAACxF,IAAD,EAAOyF,YAAP,EAAqB;EAChC,QAAIN,KAAK,GAAG,IAAIO,KAAJ,CAAU1F,IAAV,CAAZ;;EACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EACI4E,KAAK,CAAC5E,CAAD,CAAL,GAAWkF,YAAX;;EACJ,WAAON,KAAP;EACH;;EACmB,SAAbQ,aAAa,CAAC3F,IAAD,EAAO;EACvB,QAAI0E,KAAK,CAACkB,qBAAV,EACI,OAAO,IAAIC,YAAJ,CAAiB7F,IAAjB,CAAP,CADJ,KAEK;EACD,UAAImF,KAAK,GAAG,IAAIO,KAAJ,CAAU1F,IAAV,CAAZ;;EACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4E,KAAK,CAAC1E,MAA1B,EAAkCF,CAAC,EAAnC,EACI4E,KAAK,CAAC5E,CAAD,CAAL,GAAW,CAAX;;EACJ,aAAO4E,KAAP;EACH;EACJ;;EACmB,SAAbW,aAAa,CAAC9F,IAAD,EAAO;EACvB,QAAI0E,KAAK,CAACkB,qBAAV,EACI,OAAO,IAAIG,UAAJ,CAAe/F,IAAf,CAAP,CADJ,KAEK;EACD,UAAImF,KAAK,GAAG,IAAIO,KAAJ,CAAU1F,IAAV,CAAZ;;EACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4E,KAAK,CAAC1E,MAA1B,EAAkCF,CAAC,EAAnC,EACI4E,KAAK,CAAC5E,CAAD,CAAL,GAAW,CAAX;;EACJ,aAAO4E,KAAP;EACH;EACJ;;EACkB,SAAZa,YAAY,CAACb,KAAD,EAAQ;EACvB,WAAOT,KAAK,CAACkB,qBAAN,GAA8B,IAAIC,YAAJ,CAAiBV,KAAjB,CAA9B,GAAwDA,KAA/D;EACH;;EACuB,SAAjBc,iBAAiB,CAAC/F,KAAD,EAAQ;EAC5B,WAAOwE,KAAK,CAACkB,qBAAN,GAA8BrD,IAAI,CAAC2D,MAAL,CAAYhG,KAAZ,CAA9B,GAAmDA,KAA1D;EACH,GAzDc;;;EA2Da,SAArBiG,qBAAqB,CAACC,KAAD,EAAQC,KAAR,EAAe;;EAE5B,SAARlG,QAAQ,CAACgF,KAAD,EAAQmB,OAAR,EAAiBC,QAAQ,GAAG,IAA5B,EAAkC;EAC7C,SAAK,IAAIhG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4E,KAAK,CAAC1E,MAA1B,EAAkCF,CAAC,EAAnC,EACI,IAAI4E,KAAK,CAAC5E,CAAD,CAAL,IAAY+F,OAAhB,EACI,OAAO,IAAP;;EACR,WAAO,KAAP;EACH;;EACe,SAATE,SAAS,CAACC,IAAD,EAAOC,IAAP,EAAa;EACzB,WAAOD,IAAI,CAACC,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,KAAwBD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAzB,CAAX;EACH;;EArEc;EAuEnBlC,KAAK,CAACkB,qBAAN,GAA8B,OAAQC,YAAR,KAA0B,WAAxD;EASO,MAAMgB,IAAN,CAAW;EACd/G,EAAAA,WAAW,CAACgH,YAAD,EAAe;EACtB,SAAKC,KAAL,GAAa,IAAIrB,KAAJ,EAAb;EACA,SAAKoB,YAAL,GAAoBA,YAApB;EACH;;EACDE,EAAAA,MAAM,GAAG;EACL,WAAO,KAAKD,KAAL,CAAWtG,MAAX,GAAoB,CAApB,GAAwB,KAAKsG,KAAL,CAAWE,GAAX,EAAxB,GAA2C,KAAKH,YAAL,EAAlD;EACH;;EACDI,EAAAA,IAAI,CAACC,IAAD,EAAO;EACP,QAAIA,IAAI,CAACC,KAAT,EACID,IAAI,CAACC,KAAL;EACJ,SAAKL,KAAL,CAAWM,IAAX,CAAgBF,IAAhB;EACH;;EACDG,EAAAA,OAAO,CAACP,KAAD,EAAQ;EACX,SAAK,IAAIxG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwG,KAAK,CAACtG,MAA1B,EAAkCF,CAAC,EAAnC,EACI,KAAK2G,IAAL,CAAUH,KAAK,CAACxG,CAAD,CAAf;EACP;;EACDG,EAAAA,KAAK,GAAG;EACJ,SAAKqG,KAAL,CAAWtG,MAAX,GAAoB,CAApB;EACH;;EAnBa;EAqBX,MAAM8G,OAAN,CAAc;EACjBzH,EAAAA,WAAW,CAACgD,CAAC,GAAG,CAAL,EAAQI,CAAC,GAAG,CAAZ,EAAe;EACtB,SAAKJ,CAAL,GAASA,CAAT;EACA,SAAKI,CAAL,GAASA,CAAT;EACH;;EACDlC,EAAAA,GAAG,CAAC8B,CAAD,EAAII,CAAJ,EAAO;EACN,SAAKJ,CAAL,GAASA,CAAT;EACA,SAAKI,CAAL,GAASA,CAAT;EACA,WAAO,IAAP;EACH;;EACDzC,EAAAA,MAAM,GAAG;EACL,QAAIqC,CAAC,GAAG,KAAKA,CAAb;EACA,QAAII,CAAC,GAAG,KAAKA,CAAb;EACA,WAAOX,IAAI,CAACoB,IAAL,CAAUb,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAtB,CAAP;EACH;;EACDsE,EAAAA,SAAS,GAAG;EACR,QAAIC,GAAG,GAAG,KAAKhH,MAAL,EAAV;;EACA,QAAIgH,GAAG,IAAI,CAAX,EAAc;EACV,WAAK3E,CAAL,IAAU2E,GAAV;EACA,WAAKvE,CAAL,IAAUuE,GAAV;EACH;;EACD,WAAO,IAAP;EACH;;EAtBgB;;EChUrB;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAK/E;;EACM,MAAgB,UAAhB,CAA0B;EAG/B,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,QAAI,CAAC,IAAL,EAAW,MAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;EACX,SAAK,IAAL,GAAY,IAAZ;EACA;;EAN8B;EAWhC;EAC0B;;EACpB,MAAgB,gBAAhB,SAAyC,UAAzC,CAAmD;EAuBxD,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EArBD;;EACA,SAAA,EAAA,GAAK,gBAAgB,CAAC,MAAjB,EAAL;EAYA;EACkE;;EAClE,SAAA,mBAAA,GAAsB,CAAtB;EAEA;;EACA,SAAA,gBAAA,GAAqC,IAArC;EAIC;EAED;;;;;;;;;;EAU0F;;;EAC1F,EAAA,oBAAoB,CAAE,IAAF,EAAc,KAAd,EAA6B,KAA7B,EAA4C,aAA5C,EAA4E,MAA5E,EAA4F,MAA5F,EAA0G;EAC7H,IAAA,KAAK,GAAG,MAAM,GAAG,CAAC,KAAK,IAAI,CAAV,IAAe,MAAhC;EACA,QAAI,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,QAAzB;EACA,QAAI,WAAW,GAAG,IAAI,CAAC,MAAvB;EACA,QAAI,QAAQ,GAAG,KAAK,QAApB;EACA,QAAI,KAAK,GAAG,KAAK,KAAjB;;EACA,QAAI,CAAC,KAAL,EAAY;EACX,UAAI,WAAW,CAAC,MAAZ,GAAqB,CAAzB,EAA4B,QAAQ,GAAG,WAAX;EAC5B,UAAI,IAAI,GAAG,IAAI,CAAC,IAAhB;EACA,UAAI,CAAC,GAAG,IAAI,CAAC,MAAb;EACA,UAAI,CAAC,GAAG,IAAI,CAAC,MAAb;EACA,UAAI,CAAC,GAAG,IAAI,CAAC,CAAb;EAAA,UAAgB,CAAC,GAAG,IAAI,CAAC,CAAzB;EAAA,UAA4B,CAAC,GAAG,IAAI,CAAC,CAArC;EAAA,UAAwC,CAAC,GAAG,IAAI,CAAC,CAAjD;;EACA,WAAK,IAAI,CAAC,GAAG,KAAR,EAAe,CAAC,GAAG,MAAxB,EAAgC,CAAC,GAAG,KAApC,EAA2C,CAAC,IAAI,CAAL,EAAQ,CAAC,IAAI,MAAxD,EAAgE;EAC/D,YAAI,EAAE,GAAG,QAAQ,CAAC,CAAD,CAAjB;EAAA,YAAsB,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAnC;EACA,QAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,EAAE,GAAG,CAAL,GAAS,EAAE,GAAG,CAAd,GAAkB,CAArC;EACA,QAAA,aAAa,CAAC,CAAC,GAAG,CAAL,CAAb,GAAuB,EAAE,GAAG,CAAL,GAAS,EAAE,GAAG,CAAd,GAAkB,CAAzC;EACA;;EACD;EACA;;EACD,QAAI,CAAC,GAAG,CAAR;EAAA,QAAW,IAAI,GAAG,CAAlB;;EACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,IAAI,CAAhC,EAAmC;EAClC,UAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAb;EACA,MAAA,CAAC,IAAI,CAAC,GAAG,CAAT;EACA,MAAA,IAAI,IAAI,CAAR;EACA;;EACD,QAAI,aAAa,GAAG,QAAQ,CAAC,KAA7B;;EACA,QAAI,WAAW,CAAC,MAAZ,IAAsB,CAA1B,EAA6B;EAC5B,WAAK,IAAI,CAAC,GAAG,MAAR,EAAgB,CAAC,GAAG,IAAI,GAAG,CAAhC,EAAmC,CAAC,GAAG,KAAvC,EAA8C,CAAC,IAAI,MAAnD,EAA2D;EAC1D,YAAI,EAAE,GAAG,CAAT;EAAA,YAAY,EAAE,GAAG,CAAjB;EACA,YAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAF,CAAb;EACA,QAAA,CAAC,IAAI,CAAL;;EACA,eAAO,CAAC,GAAG,CAAX,EAAc,CAAC,IAAI,CAAC,IAAI,CAAxB,EAA2B;EAC1B,cAAI,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,CAAxB;EACA,cAAI,EAAE,GAAG,QAAQ,CAAC,CAAD,CAAjB;EAAA,cAAsB,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAnC;EAAA,cAA4C,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAL,CAA7D;EACA,UAAA,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAV,GAAc,EAAE,GAAG,IAAI,CAAC,CAAxB,GAA4B,IAAI,CAAC,MAAlC,IAA4C,MAAlD;EACA,UAAA,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAV,GAAc,EAAE,GAAG,IAAI,CAAC,CAAxB,GAA4B,IAAI,CAAC,MAAlC,IAA4C,MAAlD;EACA;;EACD,QAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,EAAnB;EACA,QAAA,aAAa,CAAC,CAAC,GAAG,CAAL,CAAb,GAAuB,EAAvB;EACA;EACD,KAdD,MAcO;EACN,UAAI,MAAM,GAAG,WAAb;;EACA,WAAK,IAAI,CAAC,GAAG,MAAR,EAAgB,CAAC,GAAG,IAAI,GAAG,CAA3B,EAA8B,CAAC,GAAG,IAAI,IAAI,CAA/C,EAAkD,CAAC,GAAG,KAAtD,EAA6D,CAAC,IAAI,MAAlE,EAA0E;EACzE,YAAI,EAAE,GAAG,CAAT;EAAA,YAAY,EAAE,GAAG,CAAjB;EACA,YAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAF,CAAb;EACA,QAAA,CAAC,IAAI,CAAL;;EACA,eAAO,CAAC,GAAG,CAAX,EAAc,CAAC,IAAI,CAAC,IAAI,CAAT,EAAY,CAAC,IAAI,CAAhC,EAAmC;EAClC,cAAI,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,CAAxB;EACA,cAAI,EAAE,GAAG,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAM,CAAC,CAAD,CAA7B;EAAA,cAAkC,EAAE,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAR,GAAkB,MAAM,CAAC,CAAC,GAAG,CAAL,CAA/D;EAAA,cAAwE,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAzF;EACA,UAAA,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAV,GAAc,EAAE,GAAG,IAAI,CAAC,CAAxB,GAA4B,IAAI,CAAC,MAAlC,IAA4C,MAAlD;EACA,UAAA,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAV,GAAc,EAAE,GAAG,IAAI,CAAC,CAAxB,GAA4B,IAAI,CAAC,MAAlC,IAA4C,MAAlD;EACA;;EACD,QAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,EAAnB;EACA,QAAA,aAAa,CAAC,CAAC,GAAG,CAAL,CAAb,GAAuB,EAAvB;EACA;EACD;EACD;EAED;;;EACA,EAAA,MAAM,CAAE,UAAF,EAA8B;EACnC,QAAI,KAAK,KAAT,EAAgB;EACf,MAAA,UAAU,CAAC,KAAX,GAAmB,IAAI,KAAJ,CAAkB,KAAK,KAAL,CAAW,MAA7B,CAAnB;EACA,MAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,KAArB,EAA4B,CAA5B,EAA+B,UAAU,CAAC,KAA1C,EAAiD,CAAjD,EAAoD,KAAK,KAAL,CAAW,MAA/D;EACA,KAHD,MAIC,UAAU,CAAC,KAAX,GAAmB,IAAnB;;EAED,QAAI,KAAK,QAAT,EAAmB;EAClB,MAAA,UAAU,CAAC,QAAX,GAAsB,KAAK,CAAC,aAAN,CAAoB,KAAK,QAAL,CAAc,MAAlC,CAAtB;EACA,MAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,QAArB,EAA+B,CAA/B,EAAkC,UAAU,CAAC,QAA7C,EAAuD,CAAvD,EAA0D,KAAK,QAAL,CAAc,MAAxE;EACA,KAHD,MAIC,UAAU,CAAC,QAAX,GAAsB,IAAtB;;EAED,IAAA,UAAU,CAAC,mBAAX,GAAiC,KAAK,mBAAtC;EACA,IAAA,UAAU,CAAC,gBAAX,GAA8B,KAAK,gBAAnC;EACA;;EAhHuD;EACzC,gBAAA,CAAA,MAAA,GAAS,CAAT;;EC/ChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;;EACO,MAAMC,SAAN,CAAgB;EACnB5H,EAAAA,WAAW,CAAC4G,IAAD,EAAOiB,SAAP,EAAkBC,QAAlB,EAA4B;EACnC,QAAI,CAAClB,IAAL,EACI,MAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAKnB,IAAL,GAAYA,IAAZ;EACA,SAAKoB,YAAL,CAAkBH,SAAlB;EACA,SAAKC,QAAL,GAAgBA,QAAhB;EACH;;EACDE,EAAAA,YAAY,CAACH,SAAD,EAAY;EACpB,QAAI,CAACA,SAAL,EACI,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;EACJ,SAAKF,SAAL,GAAiBA,SAAjB;EACA,SAAKI,WAAL,GAAmB,IAAIlI,SAAJ,EAAnB;;EACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoH,SAAS,CAAClH,MAA9B,EAAsCF,CAAC,EAAvC,EACI,KAAKwH,WAAL,CAAiB3H,MAAjB,CAAwBuH,SAAS,CAACpH,CAAD,CAAT,CAAayH,cAAb,EAAxB;EACP;;EACDC,EAAAA,WAAW,CAACC,GAAD,EAAM;EACb,SAAK,IAAI3H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2H,GAAG,CAACzH,MAAxB,EAAgCF,CAAC,EAAjC,EACI,IAAI,KAAKwH,WAAL,CAAiB5H,QAAjB,CAA0B+H,GAAG,CAAC3H,CAAD,CAA7B,CAAJ,EACI,OAAO,IAAP;;EACR,WAAO,KAAP;EACH;EACD;EACJ;EACA;EACA;EACA;;;EACI4D,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCnC,KAAzC,EAAgDC,KAAhD,EAAuDmC,SAAvD,EAAkE;EACnE,QAAI,CAACL,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;;EACJ,QAAIS,IAAI,IAAI,KAAKV,QAAL,IAAiB,CAA7B,EAAgC;EAC5BS,MAAAA,IAAI,IAAI,KAAKT,QAAb;EACA,UAAIQ,QAAQ,GAAG,CAAf,EACIA,QAAQ,IAAI,KAAKR,QAAjB;EACP;;EACD,QAAID,SAAS,GAAG,KAAKA,SAArB;;EACA,SAAK,IAAIpH,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmH,SAAS,CAAClH,MAA9B,EAAsCF,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EACIoH,SAAS,CAACpH,CAAD,CAAT,CAAa4D,KAAb,CAAmBgE,QAAnB,EAA6BC,QAA7B,EAAuCC,IAAvC,EAA6CE,MAA7C,EAAqDnC,KAArD,EAA4DC,KAA5D,EAAmEmC,SAAnE;EACP;;EAtCkB;EAwCvB;EACA;EACA;EACA;;EACO,IAAIC,QAAJ;;EACP,CAAC,UAAUA,QAAV,EAAoB;EACjB;EACJ;EACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;EACA;EACJ;EACA;EACA;EACA;;EACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,OAAD,CAAR,GAAoB,CAArB,CAAR,GAAkC,OAAlC;EACA;EACJ;EACA;EACA;;EACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,SAAD,CAAR,GAAsB,CAAvB,CAAR,GAAoC,SAApC;EACA;EACJ;EACA;EACA;EACA;EACA;;EACIA,EAAAA,QAAQ,CAACA,QAAQ,CAAC,KAAD,CAAR,GAAkB,CAAnB,CAAR,GAAgC,KAAhC;EACH,CAtBD,EAsBGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAtBX;EAuBA;EACA;EACA;EACA;;;EACO,IAAIC,YAAJ;;EACP,CAAC,UAAUA,YAAV,EAAwB;EACrBA,EAAAA,YAAY,CAACA,YAAY,CAAC,OAAD,CAAZ,GAAwB,CAAzB,CAAZ,GAA0C,OAA1C;EACAA,EAAAA,YAAY,CAACA,YAAY,CAAC,QAAD,CAAZ,GAAyB,CAA1B,CAAZ,GAA2C,QAA3C;EACH,CAHD,EAGGA,YAAY,KAAKA,YAAY,GAAG,EAApB,CAHf;;EAIA,MAAMC,QAAQ,GAAG;EACbC,EAAAA,MAAM,EAAE,CADK;EAEb9F,EAAAA,CAAC,EAAE,CAFU;EAGbI,EAAAA,CAAC,EAAE,CAHU;EAIb2F,EAAAA,MAAM,EAAE,CAJK;EAKbC,EAAAA,MAAM,EAAE,CALK;EAMbC,EAAAA,MAAM,EAAE,CANK;EAObC,EAAAA,MAAM,EAAE,CAPK;EAQbC,EAAAA,GAAG,EAAE,CARQ;EASb7C,EAAAA,KAAK,EAAE,CATM;EAUb8C,EAAAA,IAAI,EAAE,CAVO;EAWbC,EAAAA,UAAU,EAAE,EAXC;EAYbC,EAAAA,MAAM,EAAE,EAZK;EAabC,EAAAA,KAAK,EAAE,EAbM;EAcbC,EAAAA,SAAS,EAAE,EAdE;EAebC,EAAAA,YAAY,EAAE,EAfD;EAgBbC,EAAAA,mBAAmB,EAAE,EAhBR;EAiBbC,EAAAA,sBAAsB,EAAE,EAjBX;EAkBbC,EAAAA,qBAAqB,EAAE,EAlBV;EAmBbC,EAAAA,iBAAiB,EAAE;EAnBN,CAAjB;EAqBA;;EACO,MAAMC,QAAN,CAAe;EAClB9J,EAAAA,WAAW,CAAC+J,UAAD,EAAaC,WAAb,EAA0B;EACjC,SAAKA,WAAL,GAAmBA,WAAnB;EACA,SAAKC,MAAL,GAAcrF,KAAK,CAACiB,aAAN,CAAoBkE,UAAU,GAAG,KAAKG,eAAL,EAAjC,CAAd;EACH;;EACDhC,EAAAA,cAAc,GAAG;EACb,WAAO,KAAK8B,WAAZ;EACH;;EACDE,EAAAA,eAAe,GAAG;EACd,WAAO,CAAP;EACH;;EACDC,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKF,MAAL,CAAYtJ,MAAZ,GAAqB,KAAKuJ,eAAL,EAA5B;EACH;;EACDE,EAAAA,WAAW,GAAG;EACV,WAAO,KAAKH,MAAL,CAAY,KAAKA,MAAL,CAAYtJ,MAAZ,GAAqB,KAAKuJ,eAAL,EAAjC,CAAP;EACH;;EACa,SAAPG,OAAO,CAACJ,MAAD,EAAS1B,IAAT,EAAe;EACzB,QAAI7H,CAAC,GAAGuJ,MAAM,CAACtJ,MAAf;;EACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,CAApB,EAAuBD,CAAC,EAAxB,EACI,IAAIwJ,MAAM,CAACxJ,CAAD,CAAN,GAAY8H,IAAhB,EACI,OAAO9H,CAAC,GAAG,CAAX;;EACR,WAAOC,CAAC,GAAG,CAAX;EACH;;EACY,SAAN4J,MAAM,CAACL,MAAD,EAAS1B,IAAT,EAAegC,IAAf,EAAqB;EAC9B,QAAI7J,CAAC,GAAGuJ,MAAM,CAACtJ,MAAf;;EACA,SAAK,IAAIF,CAAC,GAAG8J,IAAb,EAAmB9J,CAAC,GAAGC,CAAvB,EAA0BD,CAAC,IAAI8J,IAA/B,EACI,IAAIN,MAAM,CAACxJ,CAAD,CAAN,GAAY8H,IAAhB,EACI,OAAO9H,CAAC,GAAG8J,IAAX;;EACR,WAAO7J,CAAC,GAAG6J,IAAX;EACH;;EA9BiB;EAgCtB;;EACO,MAAMC,aAAN,SAA4BV,QAA5B,CAAqC;EACxC9J,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BT,WAA1B,EAAuC;EAC9C,UAAMD,UAAN,EAAkBC,WAAlB;EACA,SAAKU,MAAL,GAAc9F,KAAK,CAACiB,aAAN,CAAoBkE,UAAU,GAAGU,WAAW,GAAG;EAAG;EAAlD,KAAd;EACA,SAAKC,MAAL,CAAYX,UAAU,GAAG,CAAzB,IAA8B;EAAE;EAAhC;EACH;EACD;;;EACAY,EAAAA,SAAS,CAACC,KAAD,EAAQ;EACb,SAAKF,MAAL,CAAYE,KAAZ,IAAqB;EAAE;EAAvB;EACH;EACD;;;EACAC,EAAAA,UAAU,CAACD,KAAD,EAAQ;EACd,SAAKF,MAAL,CAAYE,KAAZ,IAAqB;EAAE;EAAvB;EACH;EACD;EACJ;;;EACIE,EAAAA,MAAM,CAACL,WAAD,EAAc;EAChB,QAAIvK,IAAI,GAAG,KAAKiK,aAAL,KAAuBM,WAAW,GAAG;EAAG;EAAnD;;EACA,QAAI,KAAKC,MAAL,CAAY/J,MAAZ,GAAqBT,IAAzB,EAA+B;EAC3B,UAAI6K,SAAS,GAAGnG,KAAK,CAACiB,aAAN,CAAoB3F,IAApB,CAAhB;EACA0E,MAAAA,KAAK,CAACC,SAAN,CAAgB,KAAK6F,MAArB,EAA6B,CAA7B,EAAgCK,SAAhC,EAA2C,CAA3C,EAA8C7K,IAA9C;EACA,WAAKwK,MAAL,GAAcK,SAAd;EACH;EACJ;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIC,EAAAA,SAAS,CAACC,MAAD,EAASL,KAAT,EAAgBxK,KAAhB,EAAuB8K,KAAvB,EAA8BC,MAA9B,EAAsCC,GAAtC,EAA2CC,GAA3C,EAAgDC,GAAhD,EAAqDC,GAArD,EAA0DC,KAA1D,EAAiEC,MAAjE,EAAyE;EAC9E,QAAIf,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIjK,CAAC,GAAG,KAAK0J,aAAL,KAAuBc,MAAM,GAAG;EAAG;EAA3C;EACA,QAAI7K,KAAK,IAAI,CAAb,EACIsK,MAAM,CAACE,KAAD,CAAN,GAAgB;EAAE;EAAF,MAAenK,CAA/B;EACJ,QAAIiL,IAAI,GAAG,CAACR,KAAK,GAAGE,GAAG,GAAG,CAAd,GAAkBE,GAAnB,IAA0B,IAArC;EAAA,QAA2CK,IAAI,GAAG,CAACR,MAAM,GAAGE,GAAG,GAAG,CAAf,GAAmBE,GAApB,IAA2B,IAA7E;EACA,QAAIK,IAAI,GAAG,CAAC,CAACR,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBJ,KAAlB,GAA0BM,KAA3B,IAAoC,KAA/C;EAAA,QAAsDK,IAAI,GAAG,CAAC,CAACR,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBJ,MAAlB,GAA2BM,MAA5B,IAAsC,KAAnG;EACA,QAAIK,GAAG,GAAGJ,IAAI,GAAG,CAAP,GAAWE,IAArB;EAAA,QAA2BG,GAAG,GAAGJ,IAAI,GAAG,CAAP,GAAWE,IAA5C;EACA,QAAIG,EAAE,GAAG,CAACZ,GAAG,GAAGF,KAAP,IAAgB,GAAhB,GAAsBQ,IAAtB,GAA6BE,IAAI,GAAG,UAA7C;EAAA,QAAyDK,EAAE,GAAG,CAACZ,GAAG,GAAGF,MAAP,IAAiB,GAAjB,GAAuBQ,IAAvB,GAA8BE,IAAI,GAAG,UAAnG;EACA,QAAI7I,CAAC,GAAGkI,KAAK,GAAGc,EAAhB;EAAA,QAAoB5I,CAAC,GAAG+H,MAAM,GAAGc,EAAjC;;EACA,SAAK,IAAIvL,CAAC,GAAGD,CAAC,GAAG;EAAG;EAApB,MAAqCA,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,IAAI,CAAjD,EAAoD;EAChDiK,MAAAA,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAAZ;EACA0H,MAAAA,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,GAAgB2C,CAAhB;EACA4I,MAAAA,EAAE,IAAIF,GAAN;EACAG,MAAAA,EAAE,IAAIF,GAAN;EACAD,MAAAA,GAAG,IAAIF,IAAP;EACAG,MAAAA,GAAG,IAAIF,IAAP;EACA7I,MAAAA,CAAC,IAAIgJ,EAAL;EACA5I,MAAAA,CAAC,IAAI6I,EAAL;EACH;EACJ;EACD;EACJ;EACA;EACA;;;EACIC,EAAAA,cAAc,CAAC3D,IAAD,EAAO4D,UAAP,EAAmBC,WAAnB,EAAgC3L,CAAhC,EAAmC;EAC7C,QAAIiK,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAIA,MAAM,CAACjK,CAAD,CAAN,GAAY8H,IAAhB,EAAsB;EAClB,UAAIvF,CAAC,GAAG,KAAKiH,MAAL,CAAYkC,UAAZ,CAAR;EAAA,UAAiC/I,CAAC,GAAG,KAAK6G,MAAL,CAAYkC,UAAU,GAAGC,WAAzB,CAArC;EACA,aAAOhJ,CAAC,GAAG,CAACmF,IAAI,GAAGvF,CAAR,KAAc0H,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAA1B,KAAgC0H,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,GAAgB2C,CAAhD,CAAX;EACH;;EACD,QAAI1C,CAAC,GAAGD,CAAC,GAAG;EAAG;EAAf;;EACA,SAAKA,CAAC,IAAI,CAAV,EAAaA,CAAC,GAAGC,CAAjB,EAAoBD,CAAC,IAAI,CAAzB,EAA4B;EACxB,UAAIiK,MAAM,CAACjK,CAAD,CAAN,IAAa8H,IAAjB,EAAuB;EACnB,YAAIvF,CAAC,GAAG0H,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAd;EAAA,YAAuB2C,CAAC,GAAGsH,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAjC;EACA,eAAO2C,CAAC,GAAG,CAACmF,IAAI,GAAGvF,CAAR,KAAc0H,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAA1B,KAAgC0H,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,GAAgB2C,CAAhD,CAAX;EACH;EACJ;;EACD+I,IAAAA,UAAU,IAAI,KAAKjC,eAAL,EAAd;EACA,QAAIlH,CAAC,GAAG0H,MAAM,CAAChK,CAAC,GAAG,CAAL,CAAd;EAAA,QAAuB0C,CAAC,GAAGsH,MAAM,CAAChK,CAAC,GAAG,CAAL,CAAjC;EACA,WAAO0C,CAAC,GAAG,CAACmF,IAAI,GAAGvF,CAAR,KAAc,KAAKiH,MAAL,CAAYkC,UAAZ,IAA0BnJ,CAAxC,KAA8C,KAAKiH,MAAL,CAAYkC,UAAU,GAAGC,WAAzB,IAAwChJ,CAAtF,CAAX;EACH;;EA/EuC;EAiFrC,MAAMiJ,cAAN,SAA6B7B,aAA7B,CAA2C;EAC9CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B6B,UAA1B,EAAsC;EAC7C,UAAMvC,UAAN,EAAkBU,WAAlB,EAA+B,CAAC6B,UAAD,CAA/B;EACH;;EACDpC,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;EACJ;EACA;;;EACIqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAcnI,KAAd,EAAqB;EACzBwK,IAAAA,KAAK,KAAK,CAAV;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAmCxK,KAAnC;EACH;EACD;;;EACAoM,EAAAA,aAAa,CAACjE,IAAD,EAAO;EAChB,QAAI0B,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIxJ,CAAC,GAAGwJ,MAAM,CAACtJ,MAAP,GAAgB,CAAxB;;EACA,SAAK,IAAI8L,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIhM,CAAvB,EAA0BgM,EAAE,IAAI,CAAhC,EAAmC;EAC/B,UAAIxC,MAAM,CAACwC,EAAD,CAAN,GAAalE,IAAjB,EAAuB;EACnB9H,QAAAA,CAAC,GAAGgM,EAAE,GAAG,CAAT;EACA;EACH;EACJ;;EACD,QAAIC,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,IAAI,CAAjB,CAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EAAA,YAAwBL,KAAK,GAAG6J,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAtC;EACA,eAAOL,KAAK,GAAG,CAACmI,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,KAA0D1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA0CL,KAApG,CAAf;;EACJ,WAAK;EAAE;EAAP;EACI,eAAO6J,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAb;EALR;;EAOA,WAAO,KAAKyL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,MAA0CiM,SAAS,GAAG;EAAE;EAAxD,KAAP;EACH;;EAlC6C;EAoClD;;EACO,MAAME,cAAN,SAA6BpC,aAA7B,CAA2C;EAC9C;EACJ;EACIxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BoC,WAA1B,EAAuCC,WAAvC,EAAoD;EAC3D,UAAM/C,UAAN,EAAkBU,WAAlB,EAA+B,CAACoC,WAAD,EAAcC,WAAd,CAA/B;EACH;;EACD5C,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;EACJ;EACA;;;EACIqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAc4C,MAAd,EAAsBM,MAAtB,EAA8B;EAClCb,IAAAA,KAAK,IAAI;EAAE;EAAX;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAoCO,MAApC;EACA,SAAKlB,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAoCa,MAApC;EACH;;EAjB6C;EAmBlD;;EACO,MAAMsB,cAAN,SAA6BV,cAA7B,CAA4C;EAC/CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACC,MAAT,GAAkB,GAAlB,GAAwBkE,SAAvD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACK,IAAL,CAAUD,QAA1B;EACA;;EACJ,aAAK1E,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAACI,QAAL,IAAiB,CAACJ,IAAI,CAACK,IAAL,CAAUD,QAAV,GAAqBJ,IAAI,CAACI,QAA3B,IAAuC/G,KAAxD;EALR;;EAOA;EACH;;EACD,QAAIxF,CAAC,GAAG,KAAK0L,aAAL,CAAmBjE,IAAnB,CAAR;;EACA,YAAQhC,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACK,IAAL,CAAUD,QAAV,GAAqBvM,CAAC,GAAGwF,KAAzC;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACI1M,QAAAA,CAAC,IAAImM,IAAI,CAACK,IAAL,CAAUD,QAAV,GAAqBJ,IAAI,CAACI,QAA/B;;EACJ,WAAK1E,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAACI,QAAL,IAAiBvM,CAAC,GAAGwF,KAArB;EARR;EAUH;;EAhC8C;EAkCnD;;EACO,MAAMmH,iBAAN,SAAgCb,cAAhC,CAA+C;EAClD5M,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAAC7F,CAAT,GAAa,GAAb,GAAmBgK,SAAlD,EAA6DnE,QAAQ,CAACzF,CAAT,GAAa,GAAb,GAAmB4J,SAAhF;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAACjK,CAAL,GAASiK,IAAI,CAACK,IAAL,CAAUtK,CAAnB;EACAiK,UAAAA,IAAI,CAAC7J,CAAL,GAAS6J,IAAI,CAACK,IAAL,CAAUlK,CAAnB;EACA;;EACJ,aAAKuF,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAACjK,CAAL,IAAU,CAACiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAciK,IAAI,CAACjK,CAApB,IAAyBsD,KAAnC;EACA2G,UAAAA,IAAI,CAAC7J,CAAL,IAAU,CAAC6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAc6J,IAAI,CAAC7J,CAApB,IAAyBkD,KAAnC;EAPR;;EASA;EACH;;EACD,QAAItD,CAAC,GAAG,CAAR;EAAA,QAAWI,CAAC,GAAG,CAAf;EACA,QAAI3C,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA3J,QAAAA,CAAC,IAAI,CAACiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CuC,CAA5C,IAAiD0K,CAAtD;EACAtK,QAAAA,CAAC,IAAI,CAAC6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2C2C,CAA5C,IAAiDsK,CAAtD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI1K,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIuC,QAAAA,CAAC,GAAG,KAAKkJ,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAE;EAAzD,SAAJ;EACAtJ,QAAAA,CAAC,GAAG,KAAK8I,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAA9E,SAAJ;EAfR;;EAiBA,YAAQnG,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAACjK,CAAL,GAASiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAcA,CAAC,GAAGsD,KAA3B;EACA2G,QAAAA,IAAI,CAAC7J,CAAL,GAAS6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAcA,CAAC,GAAGkD,KAA3B;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAACjK,CAAL,IAAU,CAACiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAcA,CAAd,GAAkBiK,IAAI,CAACjK,CAAxB,IAA6BsD,KAAvC;EACA2G,QAAAA,IAAI,CAAC7J,CAAL,IAAU,CAAC6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAcA,CAAd,GAAkB6J,IAAI,CAAC7J,CAAxB,IAA6BkD,KAAvC;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAACjK,CAAL,IAAUA,CAAC,GAAGsD,KAAd;EACA2G,QAAAA,IAAI,CAAC7J,CAAL,IAAUA,CAAC,GAAGkD,KAAd;EAZR;EAcH;;EAzDiD;EA2DtD;;EACO,MAAMqH,kBAAN,SAAiCtB,cAAjC,CAAgD;EACnDrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAAC7F,CAAT,GAAa,GAAb,GAAmBgK,SAAlD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAACjK,CAAL,GAASiK,IAAI,CAACK,IAAL,CAAUtK,CAAnB;EACA;;EACJ,aAAK2F,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAACjK,CAAL,IAAU,CAACiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAciK,IAAI,CAACjK,CAApB,IAAyBsD,KAAnC;EALR;;EAOA;EACH;;EACD,QAAItD,CAAC,GAAG,KAAKwJ,aAAL,CAAmBjE,IAAnB,CAAR;;EACA,YAAQhC,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAACjK,CAAL,GAASiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAcA,CAAC,GAAGsD,KAA3B;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAACjK,CAAL,IAAU,CAACiK,IAAI,CAACK,IAAL,CAAUtK,CAAV,GAAcA,CAAd,GAAkBiK,IAAI,CAACjK,CAAxB,IAA6BsD,KAAvC;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAACjK,CAAL,IAAUA,CAAC,GAAGsD,KAAd;EATR;EAWH;;EAjCkD;EAmCvD;;EACO,MAAMsH,kBAAN,SAAiCvB,cAAjC,CAAgD;EACnDrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACzF,CAAT,GAAa,GAAb,GAAmB4J,SAAlD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAC7J,CAAL,GAAS6J,IAAI,CAACK,IAAL,CAAUlK,CAAnB;EACA;;EACJ,aAAKuF,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAC7J,CAAL,IAAU,CAAC6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAc6J,IAAI,CAAC7J,CAApB,IAAyBkD,KAAnC;EALR;;EAOA;EACH;;EACD,QAAIlD,CAAC,GAAG,KAAKoJ,aAAL,CAAmBjE,IAAnB,CAAR;;EACA,YAAQhC,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAAC7J,CAAL,GAAS6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAcA,CAAC,GAAGkD,KAA3B;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAAC7J,CAAL,IAAU,CAAC6J,IAAI,CAACK,IAAL,CAAUlK,CAAV,GAAcA,CAAd,GAAkB6J,IAAI,CAAC7J,CAAxB,IAA6BkD,KAAvC;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAAC7J,CAAL,IAAUA,CAAC,GAAGkD,KAAd;EATR;EAWH;;EAjCkD;EAmCvD;;EACO,MAAMuH,aAAN,SAA4BjB,cAA5B,CAA2C;EAC9C5M,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACE,MAAT,GAAkB,GAAlB,GAAwBiE,SAAvD,EAAkEnE,QAAQ,CAACG,MAAT,GAAkB,GAAlB,GAAwBgE,SAA1F;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAClE,MAAL,GAAckE,IAAI,CAACK,IAAL,CAAUvE,MAAxB;EACAkE,UAAAA,IAAI,CAACjE,MAAL,GAAciE,IAAI,CAACK,IAAL,CAAUtE,MAAxB;EACA;;EACJ,aAAKL,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAClE,MAAL,IAAe,CAACkE,IAAI,CAACK,IAAL,CAAUvE,MAAV,GAAmBkE,IAAI,CAAClE,MAAzB,IAAmCzC,KAAlD;EACA2G,UAAAA,IAAI,CAACjE,MAAL,IAAe,CAACiE,IAAI,CAACK,IAAL,CAAUtE,MAAV,GAAmBiE,IAAI,CAACjE,MAAzB,IAAmC1C,KAAlD;EAPR;;EASA;EACH;;EACD,QAAItD,CAAJ,EAAOI,CAAP;EACA,QAAI3C,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA3J,QAAAA,CAAC,IAAI,CAACiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CuC,CAA5C,IAAiD0K,CAAtD;EACAtK,QAAAA,CAAC,IAAI,CAAC6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2C2C,CAA5C,IAAiDsK,CAAtD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI1K,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIuC,QAAAA,CAAC,GAAG,KAAKkJ,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAE;EAAzD,SAAJ;EACAtJ,QAAAA,CAAC,GAAG,KAAK8I,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAA9E,SAAJ;EAfR;;EAiBA1J,IAAAA,CAAC,IAAIiK,IAAI,CAACK,IAAL,CAAUvE,MAAf;EACA3F,IAAAA,CAAC,IAAI6J,IAAI,CAACK,IAAL,CAAUtE,MAAf;;EACA,QAAI1C,KAAK,IAAI,CAAb,EAAgB;EACZ,UAAIC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EAA2B;EACvB8M,QAAAA,IAAI,CAAClE,MAAL,IAAe/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAA7B;EACAkE,QAAAA,IAAI,CAACjE,MAAL,IAAe5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAA7B;EACH,OAHD,MAIK;EACDiE,QAAAA,IAAI,CAAClE,MAAL,GAAc/F,CAAd;EACAiK,QAAAA,IAAI,CAACjE,MAAL,GAAc5F,CAAd;EACH;EACJ,KATD,MAUK;EACD,UAAI0K,EAAE,GAAG,CAAT;EAAA,UAAYC,EAAE,GAAG,CAAjB;;EACA,UAAIrF,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClC,gBAAQzH,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIU,YAAAA,EAAE,GAAGb,IAAI,CAACK,IAAL,CAAUvE,MAAf;EACAgF,YAAAA,EAAE,GAAGd,IAAI,CAACK,IAAL,CAAUtE,MAAf;EACAiE,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAACrL,IAAI,CAACa,GAAL,CAASN,CAAT,IAAcZ,SAAS,CAACU,MAAV,CAAiBgL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CxH,KAA/D;EACA2G,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAACtL,IAAI,CAACa,GAAL,CAASF,CAAT,IAAchB,SAAS,CAACU,MAAV,CAAiBiL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CzH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIM,YAAAA,EAAE,GAAGb,IAAI,CAAClE,MAAV;EACAgF,YAAAA,EAAE,GAAGd,IAAI,CAACjE,MAAV;EACAiE,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAACrL,IAAI,CAACa,GAAL,CAASN,CAAT,IAAcZ,SAAS,CAACU,MAAV,CAAiBgL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CxH,KAA/D;EACA2G,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAACtL,IAAI,CAACa,GAAL,CAASF,CAAT,IAAchB,SAAS,CAACU,MAAV,CAAiBiL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CzH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAAClE,MAAL,GAAc,CAAC/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAAf,IAAyBzC,KAAvC;EACA2G,YAAAA,IAAI,CAACjE,MAAL,GAAc,CAAC5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAAf,IAAyB1C,KAAvC;EAhBR;EAkBH,OAnBD,MAoBK;EACD,gBAAQC,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIU,YAAAA,EAAE,GAAGrL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACK,IAAL,CAAUvE,MAAnB,IAA6B3G,SAAS,CAACU,MAAV,CAAiBE,CAAjB,CAAlC;EACA+K,YAAAA,EAAE,GAAGtL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACK,IAAL,CAAUtE,MAAnB,IAA6B5G,SAAS,CAACU,MAAV,CAAiBM,CAAjB,CAAlC;EACA6J,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAAC9K,CAAC,GAAG8K,EAAL,IAAWxH,KAA9B;EACA2G,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAAC3K,CAAC,GAAG2K,EAAL,IAAWzH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIM,YAAAA,EAAE,GAAGrL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAAClE,MAAd,IAAwB3G,SAAS,CAACU,MAAV,CAAiBE,CAAjB,CAA7B;EACA+K,YAAAA,EAAE,GAAGtL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACjE,MAAd,IAAwB5G,SAAS,CAACU,MAAV,CAAiBM,CAAjB,CAA7B;EACA6J,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAAC9K,CAAC,GAAG8K,EAAL,IAAWxH,KAA9B;EACA2G,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAAC3K,CAAC,GAAG2K,EAAL,IAAWzH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAAClE,MAAL,IAAe,CAAC/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAAf,IAAyBzC,KAAxC;EACA2G,YAAAA,IAAI,CAACjE,MAAL,IAAe,CAAC5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAAf,IAAyB1C,KAAxC;EAhBR;EAkBH;EACJ;EACJ;;EAlG6C;EAoGlD;;EACO,MAAM2H,cAAN,SAA6B5B,cAA7B,CAA4C;EAC/CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACE,MAAT,GAAkB,GAAlB,GAAwBiE,SAAvD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAClE,MAAL,GAAckE,IAAI,CAACK,IAAL,CAAUvE,MAAxB;EACA;;EACJ,aAAKJ,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAClE,MAAL,IAAe,CAACkE,IAAI,CAACK,IAAL,CAAUvE,MAAV,GAAmBkE,IAAI,CAAClE,MAAzB,IAAmCzC,KAAlD;EALR;;EAOA;EACH;;EACD,QAAItD,CAAC,GAAG,KAAKwJ,aAAL,CAAmBjE,IAAnB,IAA2B0E,IAAI,CAACK,IAAL,CAAUvE,MAA7C;;EACA,QAAIzC,KAAK,IAAI,CAAb,EAAgB;EACZ,UAAIC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EACI8M,IAAI,CAAClE,MAAL,IAAe/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAA7B,CADJ,KAGIkE,IAAI,CAAClE,MAAL,GAAc/F,CAAd;EACP,KALD,MAMK;EACD;EACA,UAAI8K,EAAE,GAAG,CAAT;;EACA,UAAIpF,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClC,gBAAQzH,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIU,YAAAA,EAAE,GAAGb,IAAI,CAACK,IAAL,CAAUvE,MAAf;EACAkE,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAACrL,IAAI,CAACa,GAAL,CAASN,CAAT,IAAcZ,SAAS,CAACU,MAAV,CAAiBgL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CxH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIM,YAAAA,EAAE,GAAGb,IAAI,CAAClE,MAAV;EACAkE,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAACrL,IAAI,CAACa,GAAL,CAASN,CAAT,IAAcZ,SAAS,CAACU,MAAV,CAAiBgL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CxH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAAClE,MAAL,GAAc,CAAC/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAAf,IAAyBzC,KAAvC;EAXR;EAaH,OAdD,MAeK;EACD,gBAAQC,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIU,YAAAA,EAAE,GAAGrL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACK,IAAL,CAAUvE,MAAnB,IAA6B3G,SAAS,CAACU,MAAV,CAAiBE,CAAjB,CAAlC;EACAiK,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAAC9K,CAAC,GAAG8K,EAAL,IAAWxH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIM,YAAAA,EAAE,GAAGrL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAAClE,MAAd,IAAwB3G,SAAS,CAACU,MAAV,CAAiBE,CAAjB,CAA7B;EACAiK,YAAAA,IAAI,CAAClE,MAAL,GAAc+E,EAAE,GAAG,CAAC9K,CAAC,GAAG8K,EAAL,IAAWxH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAAClE,MAAL,IAAe,CAAC/F,CAAC,GAAGiK,IAAI,CAACK,IAAL,CAAUvE,MAAf,IAAyBzC,KAAxC;EAXR;EAaH;EACJ;EACJ;;EA9D8C;EAgEnD;;EACO,MAAM4H,cAAN,SAA6B7B,cAA7B,CAA4C;EAC/CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACG,MAAT,GAAkB,GAAlB,GAAwBgE,SAAvD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAACjE,MAAL,GAAciE,IAAI,CAACK,IAAL,CAAUtE,MAAxB;EACA;;EACJ,aAAKL,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAACjE,MAAL,IAAe,CAACiE,IAAI,CAACK,IAAL,CAAUtE,MAAV,GAAmBiE,IAAI,CAACjE,MAAzB,IAAmC1C,KAAlD;EALR;;EAOA;EACH;;EACD,QAAIlD,CAAC,GAAG,KAAKoJ,aAAL,CAAmBjE,IAAnB,IAA2B0E,IAAI,CAACK,IAAL,CAAUtE,MAA7C;;EACA,QAAI1C,KAAK,IAAI,CAAb,EAAgB;EACZ,UAAIC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EACI8M,IAAI,CAACjE,MAAL,IAAe5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAA7B,CADJ,KAGIiE,IAAI,CAACjE,MAAL,GAAc5F,CAAd;EACP,KALD,MAMK;EACD;EACA,UAAI2K,EAAE,GAAG,CAAT;;EACA,UAAIrF,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClC,gBAAQzH,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIW,YAAAA,EAAE,GAAGd,IAAI,CAACK,IAAL,CAAUtE,MAAf;EACAiE,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAACtL,IAAI,CAACa,GAAL,CAASF,CAAT,IAAchB,SAAS,CAACU,MAAV,CAAiBiL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CzH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIO,YAAAA,EAAE,GAAGd,IAAI,CAACjE,MAAV;EACAiE,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAACtL,IAAI,CAACa,GAAL,CAASF,CAAT,IAAchB,SAAS,CAACU,MAAV,CAAiBiL,EAAjB,CAAd,GAAqCA,EAAtC,IAA4CzH,KAA/D;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAACjE,MAAL,GAAc,CAAC5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAAf,IAAyB1C,KAAvC;EAXR;EAaH,OAdD,MAeK;EACD,gBAAQC,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EACIW,YAAAA,EAAE,GAAGtL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACK,IAAL,CAAUtE,MAAnB,IAA6B5G,SAAS,CAACU,MAAV,CAAiBM,CAAjB,CAAlC;EACA6J,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAAC3K,CAAC,GAAG2K,EAAL,IAAWzH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACIO,YAAAA,EAAE,GAAGtL,IAAI,CAACa,GAAL,CAAS2J,IAAI,CAACjE,MAAd,IAAwB5G,SAAS,CAACU,MAAV,CAAiBM,CAAjB,CAA7B;EACA6J,YAAAA,IAAI,CAACjE,MAAL,GAAc+E,EAAE,GAAG,CAAC3K,CAAC,GAAG2K,EAAL,IAAWzH,KAA9B;EACA;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI8M,YAAAA,IAAI,CAACjE,MAAL,IAAe,CAAC5F,CAAC,GAAG6J,IAAI,CAACK,IAAL,CAAUtE,MAAf,IAAyB1C,KAAxC;EAXR;EAaH;EACJ;EACJ;;EA9D8C;EAgEnD;;EACO,MAAM6H,aAAN,SAA4BvB,cAA5B,CAA2C;EAC9C5M,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACI,MAAT,GAAkB,GAAlB,GAAwB+D,SAAvD,EAAkEnE,QAAQ,CAACK,MAAT,GAAkB,GAAlB,GAAwB8D,SAA1F;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAChE,MAAL,GAAcgE,IAAI,CAACK,IAAL,CAAUrE,MAAxB;EACAgE,UAAAA,IAAI,CAAC/D,MAAL,GAAc+D,IAAI,CAACK,IAAL,CAAUpE,MAAxB;EACA;;EACJ,aAAKP,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAChE,MAAL,IAAe,CAACgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBgE,IAAI,CAAChE,MAAzB,IAAmC3C,KAAlD;EACA2G,UAAAA,IAAI,CAAC/D,MAAL,IAAe,CAAC+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB+D,IAAI,CAAC/D,MAAzB,IAAmC5C,KAAlD;EAPR;;EASA;EACH;;EACD,QAAItD,CAAC,GAAG,CAAR;EAAA,QAAWI,CAAC,GAAG,CAAf;EACA,QAAI3C,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA3J,QAAAA,CAAC,IAAI,CAACiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CuC,CAA5C,IAAiD0K,CAAtD;EACAtK,QAAAA,CAAC,IAAI,CAAC6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2C2C,CAA5C,IAAiDsK,CAAtD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI1K,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIuC,QAAAA,CAAC,GAAG,KAAKkJ,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAE;EAAzD,SAAJ;EACAtJ,QAAAA,CAAC,GAAG,KAAK8I,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAA9E,SAAJ;EAfR;;EAiBA,YAAQnG,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAAChE,MAAL,GAAcgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBjG,CAAC,GAAGsD,KAArC;EACA2G,QAAAA,IAAI,CAAC/D,MAAL,GAAc+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB9F,CAAC,GAAGkD,KAArC;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAAChE,MAAL,IAAe,CAACgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBjG,CAAnB,GAAuBiK,IAAI,CAAChE,MAA7B,IAAuC3C,KAAtD;EACA2G,QAAAA,IAAI,CAAC/D,MAAL,IAAe,CAAC+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB9F,CAAnB,GAAuB6J,IAAI,CAAC/D,MAA7B,IAAuC5C,KAAtD;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAAChE,MAAL,IAAejG,CAAC,GAAGsD,KAAnB;EACA2G,QAAAA,IAAI,CAAC/D,MAAL,IAAe9F,CAAC,GAAGkD,KAAnB;EAZR;EAcH;;EAzD6C;EA2DlD;;EACO,MAAM8H,cAAN,SAA6B/B,cAA7B,CAA4C;EAC/CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACI,MAAT,GAAkB,GAAlB,GAAwB+D,SAAvD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAChE,MAAL,GAAcgE,IAAI,CAACK,IAAL,CAAUrE,MAAxB;EACA;;EACJ,aAAKN,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAChE,MAAL,IAAe,CAACgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBgE,IAAI,CAAChE,MAAzB,IAAmC3C,KAAlD;EALR;;EAOA;EACH;;EACD,QAAItD,CAAC,GAAG,KAAKwJ,aAAL,CAAmBjE,IAAnB,CAAR;;EACA,YAAQhC,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAAChE,MAAL,GAAcgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBjG,CAAC,GAAGsD,KAArC;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAAChE,MAAL,IAAe,CAACgE,IAAI,CAACK,IAAL,CAAUrE,MAAV,GAAmBjG,CAAnB,GAAuBiK,IAAI,CAAChE,MAA7B,IAAuC3C,KAAtD;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAAChE,MAAL,IAAejG,CAAC,GAAGsD,KAAnB;EATR;EAWH;;EAjC8C;EAmCnD;;EACO,MAAM+H,cAAN,SAA6BhC,cAA7B,CAA4C;EAC/CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BuC,SAA1B,EAAqC;EAC5C,UAAMjD,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACK,MAAT,GAAkB,GAAlB,GAAwB8D,SAAvD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACD3I,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAIuE,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAAC/D,MAAL,GAAc+D,IAAI,CAACK,IAAL,CAAUpE,MAAxB;EACA;;EACJ,aAAKP,QAAQ,CAAC4E,KAAd;EACIN,UAAAA,IAAI,CAAC/D,MAAL,IAAe,CAAC+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB+D,IAAI,CAAC/D,MAAzB,IAAmC5C,KAAlD;EALR;;EAOA;EACH;;EACD,QAAIlD,CAAC,GAAG,KAAKoJ,aAAL,CAAmBjE,IAAnB,CAAR;;EACA,YAAQhC,KAAR;EACI,WAAKoC,QAAQ,CAACyE,KAAd;EACIH,QAAAA,IAAI,CAAC/D,MAAL,GAAc+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB9F,CAAC,GAAGkD,KAArC;EACA;;EACJ,WAAKqC,QAAQ,CAAC4E,KAAd;EACA,WAAK5E,QAAQ,CAAC6E,OAAd;EACIP,QAAAA,IAAI,CAAC/D,MAAL,IAAe,CAAC+D,IAAI,CAACK,IAAL,CAAUpE,MAAV,GAAmB9F,CAAnB,GAAuB6J,IAAI,CAAC/D,MAA7B,IAAuC5C,KAAtD;EACA;;EACJ,WAAKqC,QAAQ,CAACxI,GAAd;EACI8M,QAAAA,IAAI,CAAC/D,MAAL,IAAe9F,CAAC,GAAGkD,KAAnB;EATR;EAWH;;EAjC8C;EAmCnD;;EACO,MAAMgI,YAAN,SAA2B9D,aAA3B,CAAyC;EAC5CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqC;EAC5C,UAAMxE,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACM,GAAT,GAAe,GAAf,GAAqBoF,SADM,EAE3B1F,QAAQ,CAACvC,KAAT,GAAiB,GAAjB,GAAuBiI,SAFI,CAA/B;EAIA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACDrE,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAczH,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EAC9B2J,IAAAA,KAAK,IAAI;EAAE;EAAX;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B9J,CAA/B;EACA,SAAKmJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B7J,CAA/B;EACA,SAAKkJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B5J,CAA/B;EACA,SAAKiJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B3J,CAA/B;EACH;;EACDoD,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIrI,KAAK,GAAG4M,IAAI,CAAC5M,KAAjB;;EACA,QAAI2G,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAImD,KAAK,GAAGoB,IAAI,CAAClB,IAAL,CAAU1L,KAAtB;;EACA,cAAQ2E,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIxL,UAAAA,KAAK,CAACR,YAAN,CAAmBgM,KAAnB;EACA;;EACJ,aAAKzE,QAAQ,CAAC4E,KAAd;EACI3L,UAAAA,KAAK,CAACzB,GAAN,CAAU,CAACiN,KAAK,CAACtM,CAAN,GAAUc,KAAK,CAACd,CAAjB,IAAsBwF,KAAhC,EAAuC,CAAC8G,KAAK,CAACrM,CAAN,GAAUa,KAAK,CAACb,CAAjB,IAAsBuF,KAA7D,EAAoE,CAAC8G,KAAK,CAACpM,CAAN,GAAUY,KAAK,CAACZ,CAAjB,IAAsBsF,KAA1F,EAAiG,CAAC8G,KAAK,CAACnM,CAAN,GAAUW,KAAK,CAACX,CAAjB,IAAsBqF,KAAvH;EALR;;EAOA;EACH;;EACD,QAAIxF,CAAC,GAAG,CAAR;EAAA,QAAWC,CAAC,GAAG,CAAf;EAAA,QAAkBC,CAAC,GAAG,CAAtB;EAAA,QAAyBC,CAAC,GAAG,CAA7B;EACA,QAAIR,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAK,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAQ,QAAAA,CAAC,GAAGgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7L,QAAAA,CAAC,IAAI,CAACmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCK,CAAvC,IAA4C4M,CAAjD;EACA3M,QAAAA,CAAC,IAAI,CAACkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCM,CAAvC,IAA4C2M,CAAjD;EACA1M,QAAAA,CAAC,IAAI,CAACiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCO,CAAvC,IAA4C0M,CAAjD;EACAzM,QAAAA,CAAC,IAAI,CAACgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCQ,CAAvC,IAA4CyM,CAAjD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5M,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAQ,QAAAA,CAAC,GAAGgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIK,QAAAA,CAAC,GAAG,KAAKoL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAE;EAApD,SAAJ;EACA3L,QAAAA,CAAC,GAAG,KAAKmL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACA1L,QAAAA,CAAC,GAAG,KAAKkL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EACAzL,QAAAA,CAAC,GAAG,KAAKiL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EAvBR;;EAyBA,QAAIpG,KAAK,IAAI,CAAb,EACI1E,KAAK,CAACV,GAAN,CAAUJ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EADJ,KAEK;EACD,UAAIsF,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACIxL,KAAK,CAACR,YAAN,CAAmBoN,IAAI,CAAClB,IAAL,CAAU1L,KAA7B;EACJA,MAAAA,KAAK,CAACzB,GAAN,CAAU,CAACW,CAAC,GAAGc,KAAK,CAACd,CAAX,IAAgBwF,KAA1B,EAAiC,CAACvF,CAAC,GAAGa,KAAK,CAACb,CAAX,IAAgBuF,KAAjD,EAAwD,CAACtF,CAAC,GAAGY,KAAK,CAACZ,CAAX,IAAgBsF,KAAxE,EAA+E,CAACrF,CAAC,GAAGW,KAAK,CAACX,CAAX,IAAgBqF,KAA/F;EACH;EACJ;;EAzE2C;EA2EhD;;EACO,MAAMoI,WAAN,SAA0BlE,aAA1B,CAAwC;EAC3CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqC;EAC5C,UAAMxE,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACM,GAAT,GAAe,GAAf,GAAqBoF,SADM,CAA/B;EAGA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACDrE,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAczH,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;EAC3B4J,IAAAA,KAAK,KAAK,CAAV;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B9J,CAA/B;EACA,SAAKmJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B7J,CAA/B;EACA,SAAKkJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B5J,CAA/B;EACH;;EACDqD,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIrI,KAAK,GAAG4M,IAAI,CAAC5M,KAAjB;;EACA,QAAI2G,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAImD,KAAK,GAAGoB,IAAI,CAAClB,IAAL,CAAU1L,KAAtB;;EACA,cAAQ2E,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIxL,UAAAA,KAAK,CAACd,CAAN,GAAUsM,KAAK,CAACtM,CAAhB;EACAc,UAAAA,KAAK,CAACb,CAAN,GAAUqM,KAAK,CAACrM,CAAhB;EACAa,UAAAA,KAAK,CAACZ,CAAN,GAAUoM,KAAK,CAACpM,CAAhB;EACA;;EACJ,aAAK2H,QAAQ,CAAC4E,KAAd;EACI3L,UAAAA,KAAK,CAACd,CAAN,IAAW,CAACsM,KAAK,CAACtM,CAAN,GAAUc,KAAK,CAACd,CAAjB,IAAsBwF,KAAjC;EACA1E,UAAAA,KAAK,CAACb,CAAN,IAAW,CAACqM,KAAK,CAACrM,CAAN,GAAUa,KAAK,CAACb,CAAjB,IAAsBuF,KAAjC;EACA1E,UAAAA,KAAK,CAACZ,CAAN,IAAW,CAACoM,KAAK,CAACpM,CAAN,GAAUY,KAAK,CAACZ,CAAjB,IAAsBsF,KAAjC;EATR;;EAWA;EACH;;EACD,QAAIxF,CAAC,GAAG,CAAR;EAAA,QAAWC,CAAC,GAAG,CAAf;EAAA,QAAkBC,CAAC,GAAG,CAAtB;EACA,QAAIP,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,IAAI,CAAjB,CAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAK,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7L,QAAAA,CAAC,IAAI,CAACmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCK,CAAvC,IAA4C4M,CAAjD;EACA3M,QAAAA,CAAC,IAAI,CAACkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCM,CAAvC,IAA4C2M,CAAjD;EACA1M,QAAAA,CAAC,IAAI,CAACiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCO,CAAvC,IAA4C0M,CAAjD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5M,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIK,QAAAA,CAAC,GAAG,KAAKoL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAE;EAApD,SAAJ;EACA3L,QAAAA,CAAC,GAAG,KAAKmL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACA1L,QAAAA,CAAC,GAAG,KAAKkL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EAnBR;;EAqBA,QAAIpG,KAAK,IAAI,CAAb,EAAgB;EACZ1E,MAAAA,KAAK,CAACd,CAAN,GAAUA,CAAV;EACAc,MAAAA,KAAK,CAACb,CAAN,GAAUA,CAAV;EACAa,MAAAA,KAAK,CAACZ,CAAN,GAAUA,CAAV;EACH,KAJD,MAKK;EACD,UAAIuF,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzB,YAAIA,KAAK,GAAGoB,IAAI,CAAClB,IAAL,CAAU1L,KAAtB;EACAA,QAAAA,KAAK,CAACd,CAAN,GAAUsM,KAAK,CAACtM,CAAhB;EACAc,QAAAA,KAAK,CAACb,CAAN,GAAUqM,KAAK,CAACrM,CAAhB;EACAa,QAAAA,KAAK,CAACZ,CAAN,GAAUoM,KAAK,CAACpM,CAAhB;EACH;;EACDY,MAAAA,KAAK,CAACd,CAAN,IAAW,CAACA,CAAC,GAAGc,KAAK,CAACd,CAAX,IAAgBwF,KAA3B;EACA1E,MAAAA,KAAK,CAACb,CAAN,IAAW,CAACA,CAAC,GAAGa,KAAK,CAACb,CAAX,IAAgBuF,KAA3B;EACA1E,MAAAA,KAAK,CAACZ,CAAN,IAAW,CAACA,CAAC,GAAGY,KAAK,CAACZ,CAAX,IAAgBsF,KAA3B;EACH;EACJ;;EAhF0C;EAkF/C;;EACO,MAAMqI,aAAN,SAA4BtC,cAA5B,CAA2C;EAC9CrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqC;EAC5C,UAAMxE,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACvC,KAAT,GAAiB,GAAjB,GAAuBiI,SAAtD;EACA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACDlK,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAIvL,KAAK,GAAG4M,IAAI,CAAC5M,KAAjB;;EACA,QAAI2G,IAAI,GAAG,KAAK0B,MAAL,CAAY,CAAZ,CAAX,EAA2B;EAAE;EACzB,UAAImD,KAAK,GAAGoB,IAAI,CAAClB,IAAL,CAAU1L,KAAtB;;EACA,cAAQ2E,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIxL,UAAAA,KAAK,CAACX,CAAN,GAAUmM,KAAK,CAACnM,CAAhB;EACA;;EACJ,aAAK0H,QAAQ,CAAC4E,KAAd;EACI3L,UAAAA,KAAK,CAACX,CAAN,IAAW,CAACmM,KAAK,CAACnM,CAAN,GAAUW,KAAK,CAACX,CAAjB,IAAsBqF,KAAjC;EALR;;EAOA;EACH;;EACD,QAAIrF,CAAC,GAAG,KAAKuL,aAAL,CAAmBjE,IAAnB,CAAR;EACA,QAAIjC,KAAK,IAAI,CAAb,EACI1E,KAAK,CAACX,CAAN,GAAUA,CAAV,CADJ,KAEK;EACD,UAAIsF,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACIxL,KAAK,CAACX,CAAN,GAAUuN,IAAI,CAAClB,IAAL,CAAU1L,KAAV,CAAgBX,CAA1B;EACJW,MAAAA,KAAK,CAACX,CAAN,IAAW,CAACA,CAAC,GAAGW,KAAK,CAACX,CAAX,IAAgBqF,KAA3B;EACH;EACJ;;EA9B6C;EAgClD;;EACO,MAAMsI,aAAN,SAA4BpE,aAA5B,CAA0C;EAC7CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqC;EAC5C,UAAMxE,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACM,GAAT,GAAe,GAAf,GAAqBoF,SADM,EAE3B1F,QAAQ,CAACvC,KAAT,GAAiB,GAAjB,GAAuBiI,SAFI,EAG3B1F,QAAQ,CAACO,IAAT,GAAgB,GAAhB,GAAsBmF,SAHK,CAA/B;EAKA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACDrE,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAczH,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B4N,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;EAC1CnE,IAAAA,KAAK,KAAK,CAAV;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B9J,CAA/B;EACA,SAAKmJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B7J,CAA/B;EACA,SAAKkJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B5J,CAA/B;EACA,SAAKiJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B3J,CAA/B;EACA,SAAKgJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCiE,EAAhC;EACA,SAAK5E,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCkE,EAAhC;EACA,SAAK7E,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCmE,EAAhC;EACH;;EACD1K,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAI+E,KAAK,GAAGR,IAAI,CAAC5M,KAAjB;EAAA,QAAwBqN,IAAI,GAAGT,IAAI,CAACU,SAApC;;EACA,QAAI3G,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAIkF,UAAU,GAAGX,IAAI,CAAClB,IAAL,CAAU1L,KAA3B;EAAA,UAAkCwN,SAAS,GAAGZ,IAAI,CAAClB,IAAL,CAAU4B,SAAxD;;EACA,cAAQ3I,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACI4B,UAAAA,KAAK,CAAC5N,YAAN,CAAmB+N,UAAnB;EACAF,UAAAA,IAAI,CAACnO,CAAL,GAASsO,SAAS,CAACtO,CAAnB;EACAmO,UAAAA,IAAI,CAAClO,CAAL,GAASqO,SAAS,CAACrO,CAAnB;EACAkO,UAAAA,IAAI,CAACjO,CAAL,GAASoO,SAAS,CAACpO,CAAnB;EACA;;EACJ,aAAK2H,QAAQ,CAAC4E,KAAd;EACIyB,UAAAA,KAAK,CAAC7O,GAAN,CAAU,CAACgP,UAAU,CAACrO,CAAX,GAAekO,KAAK,CAAClO,CAAtB,IAA2BwF,KAArC,EAA4C,CAAC6I,UAAU,CAACpO,CAAX,GAAeiO,KAAK,CAACjO,CAAtB,IAA2BuF,KAAvE,EAA8E,CAAC6I,UAAU,CAACnO,CAAX,GAAegO,KAAK,CAAChO,CAAtB,IAA2BsF,KAAzG,EAAgH,CAAC6I,UAAU,CAAClO,CAAX,GAAe+N,KAAK,CAAC/N,CAAtB,IAA2BqF,KAA3I;EACA2I,UAAAA,IAAI,CAACnO,CAAL,IAAU,CAACsO,SAAS,CAACtO,CAAV,GAAcmO,IAAI,CAACnO,CAApB,IAAyBwF,KAAnC;EACA2I,UAAAA,IAAI,CAAClO,CAAL,IAAU,CAACqO,SAAS,CAACrO,CAAV,GAAckO,IAAI,CAAClO,CAApB,IAAyBuF,KAAnC;EACA2I,UAAAA,IAAI,CAACjO,CAAL,IAAU,CAACoO,SAAS,CAACpO,CAAV,GAAciO,IAAI,CAACjO,CAApB,IAAyBsF,KAAnC;EAXR;;EAaA;EACH;;EACD,QAAIxF,CAAC,GAAG,CAAR;EAAA,QAAWC,CAAC,GAAG,CAAf;EAAA,QAAkBC,CAAC,GAAG,CAAtB;EAAA,QAAyBC,CAAC,GAAG,CAA7B;EAAA,QAAgC4N,EAAE,GAAG,CAArC;EAAA,QAAwCC,EAAE,GAAG,CAA7C;EAAA,QAAgDC,EAAE,GAAG,CAArD;EACA,QAAItO,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,IAAI,CAAjB,CAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAK,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAQ,QAAAA,CAAC,GAAGgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAoO,QAAAA,EAAE,GAAG5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAqO,QAAAA,EAAE,GAAG7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAsO,QAAAA,EAAE,GAAG9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7L,QAAAA,CAAC,IAAI,CAACmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCK,CAAvC,IAA4C4M,CAAjD;EACA3M,QAAAA,CAAC,IAAI,CAACkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCM,CAAvC,IAA4C2M,CAAjD;EACA1M,QAAAA,CAAC,IAAI,CAACiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCO,CAAvC,IAA4C0M,CAAjD;EACAzM,QAAAA,CAAC,IAAI,CAACgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCQ,CAAvC,IAA4CyM,CAAjD;EACAmB,QAAAA,EAAE,IAAI,CAAC5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCoO,EAAxC,IAA8CnB,CAApD;EACAoB,QAAAA,EAAE,IAAI,CAAC7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCqO,EAAxC,IAA8CpB,CAApD;EACAqB,QAAAA,EAAE,IAAI,CAAC9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCsO,EAAxC,IAA8CrB,CAApD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5M,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAQ,QAAAA,CAAC,GAAGgJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAoO,QAAAA,EAAE,GAAG5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAqO,QAAAA,EAAE,GAAG7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAsO,QAAAA,EAAE,GAAG9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACA;;EACJ;EACIK,QAAAA,CAAC,GAAG,KAAKoL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAE;EAApD,SAAJ;EACA3L,QAAAA,CAAC,GAAG,KAAKmL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACA1L,QAAAA,CAAC,GAAG,KAAKkL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EACAzL,QAAAA,CAAC,GAAG,KAAKiL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EACAmC,QAAAA,EAAE,GAAG,KAAK3C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EACAoC,QAAAA,EAAE,GAAG,KAAK5C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EACAqC,QAAAA,EAAE,GAAG,KAAK7C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EAnCR;;EAqCA,QAAIpG,KAAK,IAAI,CAAb,EAAgB;EACZ0I,MAAAA,KAAK,CAAC9N,GAAN,CAAUJ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB;EACAgO,MAAAA,IAAI,CAACnO,CAAL,GAAS+N,EAAT;EACAI,MAAAA,IAAI,CAAClO,CAAL,GAAS+N,EAAT;EACAG,MAAAA,IAAI,CAACjO,CAAL,GAAS+N,EAAT;EACH,KALD,MAMK;EACD,UAAIxI,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzB4B,QAAAA,KAAK,CAAC5N,YAAN,CAAmBoN,IAAI,CAAClB,IAAL,CAAU1L,KAA7B;EACA,YAAIwN,SAAS,GAAGZ,IAAI,CAAClB,IAAL,CAAU4B,SAA1B;EACAD,QAAAA,IAAI,CAACnO,CAAL,GAASsO,SAAS,CAACtO,CAAnB;EACAmO,QAAAA,IAAI,CAAClO,CAAL,GAASqO,SAAS,CAACrO,CAAnB;EACAkO,QAAAA,IAAI,CAACjO,CAAL,GAASoO,SAAS,CAACpO,CAAnB;EACH;;EACDgO,MAAAA,KAAK,CAAC7O,GAAN,CAAU,CAACW,CAAC,GAAGkO,KAAK,CAAClO,CAAX,IAAgBwF,KAA1B,EAAiC,CAACvF,CAAC,GAAGiO,KAAK,CAACjO,CAAX,IAAgBuF,KAAjD,EAAwD,CAACtF,CAAC,GAAGgO,KAAK,CAAChO,CAAX,IAAgBsF,KAAxE,EAA+E,CAACrF,CAAC,GAAG+N,KAAK,CAAC/N,CAAX,IAAgBqF,KAA/F;EACA2I,MAAAA,IAAI,CAACnO,CAAL,IAAU,CAAC+N,EAAE,GAAGI,IAAI,CAACnO,CAAX,IAAgBwF,KAA1B;EACA2I,MAAAA,IAAI,CAAClO,CAAL,IAAU,CAAC+N,EAAE,GAAGG,IAAI,CAAClO,CAAX,IAAgBuF,KAA1B;EACA2I,MAAAA,IAAI,CAACjO,CAAL,IAAU,CAAC+N,EAAE,GAAGE,IAAI,CAACjO,CAAX,IAAgBsF,KAA1B;EACH;EACJ;;EA3G4C;EA6GjD;;EACO,MAAM+I,YAAN,SAA2B7E,aAA3B,CAAyC;EAC5CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqC;EAC5C,UAAMxE,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACM,GAAT,GAAe,GAAf,GAAqBoF,SADM,EAE3B1F,QAAQ,CAACO,IAAT,GAAgB,GAAhB,GAAsBmF,SAFK,CAA/B;EAIA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACH;;EACDrE,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAczH,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB6N,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;EACvCnE,IAAAA,KAAK,IAAI;EAAE;EAAX;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B9J,CAA/B;EACA,SAAKmJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B7J,CAA/B;EACA,SAAKkJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA+B5J,CAA/B;EACA,SAAKiJ,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCiE,EAAhC;EACA,SAAK5E,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCkE,EAAhC;EACA,SAAK7E,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAgCmE,EAAhC;EACH;;EACD1K,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAI+E,KAAK,GAAGR,IAAI,CAAC5M,KAAjB;EAAA,QAAwBqN,IAAI,GAAGT,IAAI,CAACU,SAApC;;EACA,QAAI3G,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAIkF,UAAU,GAAGX,IAAI,CAAClB,IAAL,CAAU1L,KAA3B;EAAA,UAAkCwN,SAAS,GAAGZ,IAAI,CAAClB,IAAL,CAAU4B,SAAxD;;EACA,cAAQ3I,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACI4B,UAAAA,KAAK,CAAClO,CAAN,GAAUqO,UAAU,CAACrO,CAArB;EACAkO,UAAAA,KAAK,CAACjO,CAAN,GAAUoO,UAAU,CAACpO,CAArB;EACAiO,UAAAA,KAAK,CAAChO,CAAN,GAAUmO,UAAU,CAACnO,CAArB;EACAiO,UAAAA,IAAI,CAACnO,CAAL,GAASsO,SAAS,CAACtO,CAAnB;EACAmO,UAAAA,IAAI,CAAClO,CAAL,GAASqO,SAAS,CAACrO,CAAnB;EACAkO,UAAAA,IAAI,CAACjO,CAAL,GAASoO,SAAS,CAACpO,CAAnB;EACA;;EACJ,aAAK2H,QAAQ,CAAC4E,KAAd;EACIyB,UAAAA,KAAK,CAAClO,CAAN,IAAW,CAACqO,UAAU,CAACrO,CAAX,GAAekO,KAAK,CAAClO,CAAtB,IAA2BwF,KAAtC;EACA0I,UAAAA,KAAK,CAACjO,CAAN,IAAW,CAACoO,UAAU,CAACpO,CAAX,GAAeiO,KAAK,CAACjO,CAAtB,IAA2BuF,KAAtC;EACA0I,UAAAA,KAAK,CAAChO,CAAN,IAAW,CAACmO,UAAU,CAACnO,CAAX,GAAegO,KAAK,CAAChO,CAAtB,IAA2BsF,KAAtC;EACA2I,UAAAA,IAAI,CAACnO,CAAL,IAAU,CAACsO,SAAS,CAACtO,CAAV,GAAcmO,IAAI,CAACnO,CAApB,IAAyBwF,KAAnC;EACA2I,UAAAA,IAAI,CAAClO,CAAL,IAAU,CAACqO,SAAS,CAACrO,CAAV,GAAckO,IAAI,CAAClO,CAApB,IAAyBuF,KAAnC;EACA2I,UAAAA,IAAI,CAACjO,CAAL,IAAU,CAACoO,SAAS,CAACpO,CAAV,GAAciO,IAAI,CAACjO,CAApB,IAAyBsF,KAAnC;EAfR;;EAiBA;EACH;;EACD,QAAIxF,CAAC,GAAG,CAAR;EAAA,QAAWC,CAAC,GAAG,CAAf;EAAA,QAAkBC,CAAC,GAAG,CAAtB;EAAA,QAAgC6N,EAAE,GAAG,CAArC;EAAA,QAAwCC,EAAE,GAAG,CAA7C;EAAA,QAAgDC,EAAE,GAAG;EACrD,QAAItO,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAK,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAoO,QAAAA,EAAE,GAAG5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAqO,QAAAA,EAAE,GAAG7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAsO,QAAAA,EAAE,GAAG9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7L,QAAAA,CAAC,IAAI,CAACmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCK,CAAvC,IAA4C4M,CAAjD;EACA3M,QAAAA,CAAC,IAAI,CAACkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCM,CAAvC,IAA4C2M,CAAjD;EACA1M,QAAAA,CAAC,IAAI,CAACiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCO,CAAvC,IAA4C0M,CAAjD;EACAmB,QAAAA,EAAE,IAAI,CAAC5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCoO,EAAxC,IAA8CnB,CAApD;EACAoB,QAAAA,EAAE,IAAI,CAAC7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCqO,EAAxC,IAA8CpB,CAApD;EACAqB,QAAAA,EAAE,IAAI,CAAC9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAuCsO,EAAxC,IAA8CrB,CAApD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5M,QAAAA,CAAC,GAAGmJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAM,QAAAA,CAAC,GAAGkJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAO,QAAAA,CAAC,GAAGiJ,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAoO,QAAAA,EAAE,GAAG5E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAqO,QAAAA,EAAE,GAAG7E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACAsO,QAAAA,EAAE,GAAG9E,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAX;EACA;;EACJ;EACIK,QAAAA,CAAC,GAAG,KAAKoL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAE;EAApD,SAAJ;EACA3L,QAAAA,CAAC,GAAG,KAAKmL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACA1L,QAAAA,CAAC,GAAG,KAAKkL,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EACAmC,QAAAA,EAAE,GAAG,KAAK3C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EACAoC,QAAAA,EAAE,GAAG,KAAK5C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EACAqC,QAAAA,EAAE,GAAG,KAAK7C,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAuCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA9E,SAAL;EA/BR;;EAiCA,QAAIpG,KAAK,IAAI,CAAb,EAAgB;EACZ0I,MAAAA,KAAK,CAAClO,CAAN,GAAUA,CAAV;EACAkO,MAAAA,KAAK,CAACjO,CAAN,GAAUA,CAAV;EACAiO,MAAAA,KAAK,CAAChO,CAAN,GAAUA,CAAV;EACAiO,MAAAA,IAAI,CAACnO,CAAL,GAAS+N,EAAT;EACAI,MAAAA,IAAI,CAAClO,CAAL,GAAS+N,EAAT;EACAG,MAAAA,IAAI,CAACjO,CAAL,GAAS+N,EAAT;EACH,KAPD,MAQK;EACD,UAAIxI,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzB,YAAI+B,UAAU,GAAGX,IAAI,CAAClB,IAAL,CAAU1L,KAA3B;EAAA,YAAkCwN,SAAS,GAAGZ,IAAI,CAAClB,IAAL,CAAU4B,SAAxD;EACAF,QAAAA,KAAK,CAAClO,CAAN,GAAUqO,UAAU,CAACrO,CAArB;EACAkO,QAAAA,KAAK,CAACjO,CAAN,GAAUoO,UAAU,CAACpO,CAArB;EACAiO,QAAAA,KAAK,CAAChO,CAAN,GAAUmO,UAAU,CAACnO,CAArB;EACAiO,QAAAA,IAAI,CAACnO,CAAL,GAASsO,SAAS,CAACtO,CAAnB;EACAmO,QAAAA,IAAI,CAAClO,CAAL,GAASqO,SAAS,CAACrO,CAAnB;EACAkO,QAAAA,IAAI,CAACjO,CAAL,GAASoO,SAAS,CAACpO,CAAnB;EACH;;EACDgO,MAAAA,KAAK,CAAClO,CAAN,IAAW,CAACA,CAAC,GAAGkO,KAAK,CAAClO,CAAX,IAAgBwF,KAA3B;EACA0I,MAAAA,KAAK,CAACjO,CAAN,IAAW,CAACA,CAAC,GAAGiO,KAAK,CAACjO,CAAX,IAAgBuF,KAA3B;EACA0I,MAAAA,KAAK,CAAChO,CAAN,IAAW,CAACA,CAAC,GAAGgO,KAAK,CAAChO,CAAX,IAAgBsF,KAA3B;EACA2I,MAAAA,IAAI,CAACnO,CAAL,IAAU,CAAC+N,EAAE,GAAGI,IAAI,CAACnO,CAAX,IAAgBwF,KAA1B;EACA2I,MAAAA,IAAI,CAAClO,CAAL,IAAU,CAAC+N,EAAE,GAAGG,IAAI,CAAClO,CAAX,IAAgBuF,KAA1B;EACA2I,MAAAA,IAAI,CAACjO,CAAL,IAAU,CAAC+N,EAAE,GAAGE,IAAI,CAACjO,CAAX,IAAgBsF,KAA1B;EACH;EACJ;;EA/G2C;EAiHhD;;EACO,MAAMgJ,kBAAN,SAAiCxF,QAAjC,CAA0C;EAC7C9J,EAAAA,WAAW,CAAC+J,UAAD,EAAawE,SAAb,EAAwB;EAC/B,UAAMxE,UAAN,EAAkB,CACdlB,QAAQ,CAACQ,UAAT,GAAsB,GAAtB,GAA4BkF,SADd,CAAlB;EAGA,SAAKA,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACA,SAAKgB,eAAL,GAAuB,IAAI3J,KAAJ,CAAUmE,UAAV,CAAvB;EACH;;EACDI,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKF,MAAL,CAAYtJ,MAAnB;EACH;EACD;;;EACA4L,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAciH,cAAd,EAA8B;EAClC,SAAKvF,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAKgH,eAAL,CAAqB3E,KAArB,IAA8B4E,cAA9B;EACH;;EACDnL,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BE,MAA3B,EAAmCnC,KAAnC,EAA0CC,KAA1C,EAAiDmC,SAAjD,EAA4D;EAC7D,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;;EACJ,QAAIzE,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClC,UAAIzH,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACI,KAAKqC,aAAL,CAAmBpH,QAAnB,EAA6BmG,IAA7B,EAAmCA,IAAI,CAAClB,IAAL,CAAUkC,cAA7C;EACJ;EACH;;EACD,QAAIjH,IAAI,GAAG,KAAK0B,MAAL,CAAY,CAAZ,CAAX,EAA2B;EACvB,UAAI1D,KAAK,IAAIoC,QAAQ,CAACyE,KAAlB,IAA2B7G,KAAK,IAAIoC,QAAQ,CAAC4E,KAAjD,EACI,KAAKkC,aAAL,CAAmBpH,QAAnB,EAA6BmG,IAA7B,EAAmCA,IAAI,CAAClB,IAAL,CAAUkC,cAA7C;EACJ;EACH;;EACD,SAAKC,aAAL,CAAmBpH,QAAnB,EAA6BmG,IAA7B,EAAmC,KAAKe,eAAL,CAAqBzF,QAAQ,CAACO,OAAT,CAAiB,KAAKJ,MAAtB,EAA8B1B,IAA9B,CAArB,CAAnC;EACH;;EACDkH,EAAAA,aAAa,CAACpH,QAAD,EAAWmG,IAAX,EAAiBgB,cAAjB,EAAiC;EAC1ChB,IAAAA,IAAI,CAACiB,aAAL,CAAmB,CAACD,cAAD,GAAkB,IAAlB,GAAyBnH,QAAQ,CAACqH,aAAT,CAAuB,KAAKnB,SAA5B,EAAuCiB,cAAvC,CAA5C;EACH;;EAnC4C;EAqCjD;;EACO,MAAMG,cAAN,SAA6BnF,aAA7B,CAA2C;EAC9CxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B8D,SAA1B,EAAqClF,UAArC,EAAiD;EACxD,UAAMU,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACS,MAAT,GAAkB,GAAlB,GAAwBiF,SAAxB,GAAoC,GAApC,GAA0ClF,UAAU,CAACuG,EAD1B,CAA/B;EAGA,SAAKrB,SAAL,GAAiB,CAAjB;EACA,SAAKA,SAAL,GAAiBA,SAAjB;EACA,SAAKlF,UAAL,GAAkBA,UAAlB;EACA,SAAKwG,QAAL,GAAgB,IAAIjK,KAAJ,CAAUmE,UAAV,CAAhB;EACH;;EACDI,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKF,MAAL,CAAYtJ,MAAnB;EACH;EACD;EACJ;;;EACI4L,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAcsH,QAAd,EAAwB;EAC5B,SAAK5F,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAKsH,QAAL,CAAcjF,KAAd,IAAuBiF,QAAvB;EACH;EACD;EACJ;;;EACI7E,EAAAA,SAAS,CAACC,MAAD,EAASL,KAAT,EAAgBxK,KAAhB,EAAuB8K,KAAvB,EAA8BC,MAA9B,EAAsCC,GAAtC,EAA2CC,GAA3C,EAAgDC,GAAhD,EAAqDC,GAArD,EAA0DC,KAA1D,EAAiEC,MAAjE,EAAyE;EAC9E,QAAIf,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIjK,CAAC,GAAG,KAAK0J,aAAL,KAAuBc,MAAM,GAAG;EAAG;EAA3C;EACA,QAAI7K,KAAK,IAAI,CAAb,EACIsK,MAAM,CAACE,KAAD,CAAN,GAAgB;EAAE;EAAF,MAAenK,CAA/B;EACJ,QAAIiL,IAAI,GAAG,CAACR,KAAK,GAAGE,GAAG,GAAG,CAAd,GAAkBE,GAAnB,IAA0B,IAArC;EAAA,QAA2CK,IAAI,GAAGJ,GAAG,GAAG,IAAN,GAAaF,GAAG,GAAG,IAArE;EACA,QAAIO,IAAI,GAAG,CAAC,CAACR,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBJ,KAAlB,GAA0BM,KAA3B,IAAoC,KAA/C;EAAA,QAAsDK,IAAI,GAAG,CAACR,GAAG,GAAGE,GAAN,GAAY,UAAb,IAA2B,KAAxF;EACA,QAAIO,GAAG,GAAGJ,IAAI,GAAG,CAAP,GAAWE,IAArB;EAAA,QAA2BG,GAAG,GAAGJ,IAAI,GAAG,CAAP,GAAWE,IAA5C;EACA,QAAIG,EAAE,GAAG,CAACZ,GAAG,GAAGF,KAAP,IAAgB,GAAhB,GAAsBQ,IAAtB,GAA6BE,IAAI,GAAG,UAA7C;EAAA,QAAyDK,EAAE,GAAGZ,GAAG,GAAG,GAAN,GAAYM,IAAZ,GAAmBE,IAAI,GAAG,UAAxF;EACA,QAAI7I,CAAC,GAAGkI,KAAK,GAAGc,EAAhB;EAAA,QAAoB5I,CAAC,GAAG6I,EAAxB;;EACA,SAAK,IAAIvL,CAAC,GAAGD,CAAC,GAAG;EAAG;EAApB,MAAqCA,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,IAAI,CAAjD,EAAoD;EAChDiK,MAAAA,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAAZ;EACA0H,MAAAA,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,GAAgB2C,CAAhB;EACA4I,MAAAA,EAAE,IAAIF,GAAN;EACAG,MAAAA,EAAE,IAAIF,GAAN;EACAD,MAAAA,GAAG,IAAIF,IAAP;EACAG,MAAAA,GAAG,IAAIF,IAAP;EACA7I,MAAAA,CAAC,IAAIgJ,EAAL;EACA5I,MAAAA,CAAC,IAAI6I,EAAL;EACH;EACJ;;EACD6D,EAAAA,eAAe,CAACvH,IAAD,EAAOqC,KAAP,EAAc;EACzB,QAAIF,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIjK,CAAC,GAAGiK,MAAM,CAACE,KAAD,CAAd;;EACA,YAAQnK,CAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIuC,CAAC,GAAG,KAAKiH,MAAL,CAAYW,KAAZ,CAAR;EACA,eAAO,CAACrC,IAAI,GAAGvF,CAAR,KAAc,KAAKiH,MAAL,CAAYW,KAAK,GAAG,KAAKV,eAAL,EAApB,IAA8ClH,CAA5D,CAAP;;EACJ,WAAK;EAAE;EAAP;EACI,eAAO,CAAP;EALR;;EAOAvC,IAAAA,CAAC,IAAI;EAAE;EAAP;;EACA,QAAIiK,MAAM,CAACjK,CAAD,CAAN,GAAY8H,IAAhB,EAAsB;EAClB,UAAIvF,CAAC,GAAG,KAAKiH,MAAL,CAAYW,KAAZ,CAAR;EACA,aAAOF,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,IAAiB8H,IAAI,GAAGvF,CAAxB,KAA8B0H,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAA1C,CAAP;EACH;;EACD,QAAItC,CAAC,GAAGD,CAAC,GAAG;EAAG;EAAf;;EACA,SAAKA,CAAC,IAAI,CAAV,EAAaA,CAAC,GAAGC,CAAjB,EAAoBD,CAAC,IAAI,CAAzB,EAA4B;EACxB,UAAIiK,MAAM,CAACjK,CAAD,CAAN,IAAa8H,IAAjB,EAAuB;EACnB,YAAIvF,CAAC,GAAG0H,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAd;EAAA,YAAuB2C,CAAC,GAAGsH,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAjC;EACA,eAAO2C,CAAC,GAAG,CAACmF,IAAI,GAAGvF,CAAR,KAAc0H,MAAM,CAACjK,CAAD,CAAN,GAAYuC,CAA1B,KAAgC0H,MAAM,CAACjK,CAAC,GAAG,CAAL,CAAN,GAAgB2C,CAAhD,CAAX;EACH;EACJ;;EACD,QAAIJ,CAAC,GAAG0H,MAAM,CAAChK,CAAC,GAAG,CAAL,CAAd;EAAA,QAAuB0C,CAAC,GAAGsH,MAAM,CAAChK,CAAC,GAAG,CAAL,CAAjC;EACA,WAAO0C,CAAC,GAAG,CAAC,IAAIA,CAAL,KAAWmF,IAAI,GAAGvF,CAAlB,KAAwB,KAAKiH,MAAL,CAAYW,KAAK,GAAG,KAAKV,eAAL,EAApB,IAA8ClH,CAAtE,CAAX;EACH;;EACDqB,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI8F,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAe,KAAKF,SAApB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,QAAI6C,cAAc,GAAGxB,IAAI,CAACkB,aAAL,EAArB;EACA,QAAI,EAAEM,cAAc,YAAYC,gBAA5B,KAAiDD,cAAc,CAACE,gBAAf,IAAmC,KAAK7G,UAA7F,EACI;EACJ,QAAIC,MAAM,GAAGkF,IAAI,CAAClF,MAAlB;EACA,QAAIA,MAAM,CAAC3I,MAAP,IAAiB,CAArB,EACI4F,KAAK,GAAGoC,QAAQ,CAACyE,KAAjB;EACJ,QAAIyC,QAAQ,GAAG,KAAKA,QAApB;EACA,QAAIM,WAAW,GAAGN,QAAQ,CAAC,CAAD,CAAR,CAAYlP,MAA9B;EACA,QAAIsJ,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAImG,gBAAgB,GAAGJ,cAAvB;;EACA,cAAQzJ,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACI9D,UAAAA,MAAM,CAAC3I,MAAP,GAAgB,CAAhB;EACA;;EACJ,aAAKgI,QAAQ,CAAC4E,KAAd;EACI,cAAIjH,KAAK,IAAI,CAAb,EAAgB;EACZgD,YAAAA,MAAM,CAAC3I,MAAP,GAAgB,CAAhB;EACA;EACH;;EACD2I,UAAAA,MAAM,CAAC3I,MAAP,GAAgBwP,WAAhB;;EACA,cAAI,CAACC,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,gBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,iBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAAC4P,aAAa,CAAC5P,CAAD,CAAb,GAAmB6I,MAAM,CAAC7I,CAAD,CAA1B,IAAiC6F,KAA9C;EACP,WALD,MAMK;EACD;EACAA,YAAAA,KAAK,GAAG,IAAIA,KAAZ;;EACA,iBAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa6F,KAAb;EACP;;EArBT;;EAuBA;EACH;;EACDgD,IAAAA,MAAM,CAAC3I,MAAP,GAAgBwP,WAAhB;;EACA,QAAI5H,IAAI,IAAI0B,MAAM,CAACA,MAAM,CAACtJ,MAAP,GAAgB,CAAjB,CAAlB,EAAuC;EAAE;EACrC,UAAI2P,YAAY,GAAGT,QAAQ,CAAC5F,MAAM,CAACtJ,MAAP,GAAgB,CAAjB,CAA3B;;EACA,UAAI2F,KAAK,IAAI,CAAb,EAAgB;EACZ,YAAIC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EAA2B;EACvB,cAAIiQ,gBAAgB,GAAGJ,cAAvB;;EACA,cAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,gBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,iBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa6P,YAAY,CAAC7P,CAAD,CAAZ,GAAkB4P,aAAa,CAAC5P,CAAD,CAA5C;EACP,WALD,MAMK;EACD;EACA,iBAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa6P,YAAY,CAAC7P,CAAD,CAAzB;EACP;EACJ,SAbD,MAeImE,KAAK,CAACC,SAAN,CAAgByL,YAAhB,EAA8B,CAA9B,EAAiChH,MAAjC,EAAyC,CAAzC,EAA4C6G,WAA5C;EACP,OAjBD,MAkBK;EACD,gBAAQ5J,KAAR;EACI,eAAKoC,QAAQ,CAACyE,KAAd;EAAqB;EACjB,kBAAIgD,gBAAgB,GAAGJ,cAAvB;;EACA,kBAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,oBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,qBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,sBAAI2M,KAAK,GAAGiD,aAAa,CAAC5P,CAAD,CAAzB;EACA6I,kBAAAA,MAAM,CAAC7I,CAAD,CAAN,GAAY2M,KAAK,GAAG,CAACkD,YAAY,CAAC7P,CAAD,CAAZ,GAAkB2M,KAAnB,IAA4B9G,KAAhD;EACH;EACJ,eAPD,MAQK;EACD;EACA,qBAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,GAAY6P,YAAY,CAAC7P,CAAD,CAAZ,GAAkB6F,KAA9B;EACP;;EACD;EACH;;EACD,eAAKqC,QAAQ,CAAC4E,KAAd;EACA,eAAK5E,QAAQ,CAAC6E,OAAd;EACI,iBAAK,IAAI/M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAAC6P,YAAY,CAAC7P,CAAD,CAAZ,GAAkB6I,MAAM,CAAC7I,CAAD,CAAzB,IAAgC6F,KAA7C;;EACJ;;EACJ,eAAKqC,QAAQ,CAACxI,GAAd;EACI,gBAAIiQ,gBAAgB,GAAGJ,cAAvB;;EACA,gBAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,kBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,mBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAAC6P,YAAY,CAAC7P,CAAD,CAAZ,GAAkB4P,aAAa,CAAC5P,CAAD,CAAhC,IAAuC6F,KAApD;EACP,aALD,MAMK;EACD;EACA,mBAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa6P,YAAY,CAAC7P,CAAD,CAAZ,GAAkB6F,KAA/B;EACP;;EAnCT;EAqCH;;EACD;EACH,KArGiE;;;EAuGlE,QAAIsE,KAAK,GAAGd,QAAQ,CAACO,OAAT,CAAiBJ,MAAjB,EAAyB1B,IAAzB,CAAZ;EACA,QAAIgI,OAAO,GAAG,KAAKT,eAAL,CAAqBvH,IAArB,EAA2BqC,KAA3B,CAAd;EACA,QAAI4F,YAAY,GAAGX,QAAQ,CAACjF,KAAD,CAA3B;EACA,QAAI6F,YAAY,GAAGZ,QAAQ,CAACjF,KAAK,GAAG,CAAT,CAA3B;;EACA,QAAItE,KAAK,IAAI,CAAb,EAAgB;EACZ,UAAIC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EAA2B;EACvB,YAAIiQ,gBAAgB,GAAGJ,cAAvB;;EACA,YAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,cAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,eAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,gBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,YAAAA,MAAM,CAAC7I,CAAD,CAAN,IAAaiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAlC,GAA4CF,aAAa,CAAC5P,CAAD,CAAtE;EACH;EACJ,SAPD,MAQK;EACD;EACA,eAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,gBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,YAAAA,MAAM,CAAC7I,CAAD,CAAN,IAAaiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAA/C;EACH;EACJ;EACJ,OAjBD,MAkBK;EACD,aAAK,IAAI9P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,cAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,UAAAA,MAAM,CAAC7I,CAAD,CAAN,GAAYiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAA9C;EACH;EACJ;EACJ,KAzBD,MA0BK;EACD,cAAQhK,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EAAqB;EACjB,gBAAIgD,gBAAgB,GAAGJ,cAAvB;;EACA,gBAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,kBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,mBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,oBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EAAA,oBAA4B2M,KAAK,GAAGiD,aAAa,CAAC5P,CAAD,CAAjD;EACA6I,gBAAAA,MAAM,CAAC7I,CAAD,CAAN,GAAY2M,KAAK,GAAG,CAACsD,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAlC,GAA4CnD,KAA7C,IAAsD9G,KAA1E;EACH;EACJ,aAPD,MAQK;EACD;EACA,mBAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,oBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,gBAAAA,MAAM,CAAC7I,CAAD,CAAN,GAAY,CAACiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAnC,IAA8CjK,KAA1D;EACH;EACJ;;EACD;EACH;;EACD,aAAKqC,QAAQ,CAAC4E,KAAd;EACA,aAAK5E,QAAQ,CAAC6E,OAAd;EACI,eAAK,IAAI/M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,gBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,YAAAA,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAACiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAlC,GAA4CjH,MAAM,CAAC7I,CAAD,CAAnD,IAA0D6F,KAAvE;EACH;;EACD;;EACJ,aAAKqC,QAAQ,CAACxI,GAAd;EACI,cAAIiQ,gBAAgB,GAAGJ,cAAvB;;EACA,cAAI,CAACI,gBAAgB,CAAClD,KAAtB,EAA6B;EACzB;EACA,gBAAImD,aAAa,GAAGD,gBAAgB,CAACP,QAArC;;EACA,iBAAK,IAAIpP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,kBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,cAAAA,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAACiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAlC,GAA4CF,aAAa,CAAC5P,CAAD,CAA1D,IAAiE6F,KAA9E;EACH;EACJ,WAPD,MAQK;EACD;EACA,iBAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,WAApB,EAAiC1P,CAAC,EAAlC,EAAsC;EAClC,kBAAIiQ,IAAI,GAAGF,YAAY,CAAC/P,CAAD,CAAvB;EACA6I,cAAAA,MAAM,CAAC7I,CAAD,CAAN,IAAa,CAACiQ,IAAI,GAAG,CAACD,YAAY,CAAChQ,CAAD,CAAZ,GAAkBiQ,IAAnB,IAA2BH,OAAnC,IAA8CjK,KAA3D;EACH;EACJ;;EA3CT;EA6CH;EACJ;;EAvP6C;EAyPlD;;EACO,MAAMqK,aAAN,SAA4B7G,QAA5B,CAAqC;EACxC9J,EAAAA,WAAW,CAAC+J,UAAD,EAAa;EACpB,UAAMA,UAAN,EAAkB4G,aAAa,CAAC3G,WAAhC;EACA,SAAKvB,MAAL,GAAc,IAAI7C,KAAJ,CAAUmE,UAAV,CAAd;EACH;;EACDI,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKF,MAAL,CAAYtJ,MAAnB;EACH;EACD;;;EACA4L,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrB,KAAR,EAAe;EACnB,SAAKU,MAAL,CAAYW,KAAZ,IAAqBrB,KAAK,CAAChB,IAA3B;EACA,SAAKE,MAAL,CAAYmC,KAAZ,IAAqBrB,KAArB;EACH;EACD;;;EACAlF,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI,CAACqH,WAAL,EACI;EACJ,QAAI9F,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIF,UAAU,GAAG,KAAKE,MAAL,CAAYtJ,MAA7B;;EACA,QAAI2H,QAAQ,GAAGC,IAAf,EAAqB;EAAE;EACnB,WAAKlE,KAAL,CAAWgE,QAAX,EAAqBC,QAArB,EAA+BsI,MAAM,CAACC,SAAtC,EAAiDd,WAAjD,EAA8DzJ,KAA9D,EAAqEC,KAArE,EAA4EmC,SAA5E;EACAJ,MAAAA,QAAQ,GAAG,CAAC,CAAZ;EACH,KAHD,MAIK,IAAIA,QAAQ,IAAI2B,MAAM,CAACF,UAAU,GAAG,CAAd,CAAtB;EACD;;EACJ,QAAIxB,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EACI,OAZ8D;;EAalE,QAAIxJ,CAAC,GAAG,CAAR;EACA,QAAI6H,QAAQ,GAAG2B,MAAM,CAAC,CAAD,CAArB,EACIxJ,CAAC,GAAG,CAAJ,CADJ,KAEK;EACDA,MAAAA,CAAC,GAAGqJ,QAAQ,CAACO,OAAT,CAAiBJ,MAAjB,EAAyB3B,QAAzB,IAAqC,CAAzC;EACA,UAAIwI,SAAS,GAAG7G,MAAM,CAACxJ,CAAD,CAAtB;;EACA,aAAOA,CAAC,GAAG,CAAX,EAAc;EAAE;EACZ,YAAIwJ,MAAM,CAACxJ,CAAC,GAAG,CAAL,CAAN,IAAiBqQ,SAArB,EACI;EACJrQ,QAAAA,CAAC;EACJ;EACJ;;EACD,WAAOA,CAAC,GAAGsJ,UAAJ,IAAkBxB,IAAI,IAAI0B,MAAM,CAACxJ,CAAD,CAAvC,EAA4CA,CAAC,EAA7C,EACIsP,WAAW,CAACxI,IAAZ,CAAiB,KAAKkB,MAAL,CAAYhI,CAAZ,CAAjB;EACP;;EAzCuC;EA2C5CkQ,aAAa,CAAC3G,WAAd,GAA4B,CAAC,KAAKnB,QAAQ,CAACU,KAAf,CAA5B;EACA;;EACO,MAAMwH,iBAAN,SAAgCjH,QAAhC,CAAyC;EAC5C9J,EAAAA,WAAW,CAAC+J,UAAD,EAAa;EACpB,UAAMA,UAAN,EAAkBgH,iBAAiB,CAAC/G,WAApC;EACA,SAAKgH,UAAL,GAAkB,IAAIpL,KAAJ,CAAUmE,UAAV,CAAlB;EACH;;EACDI,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKF,MAAL,CAAYtJ,MAAnB;EACH;EACD;EACJ;EACA;;;EACI4L,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAciB,SAAd,EAAyB;EAC7B,SAAKS,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAKyI,UAAL,CAAgBpG,KAAhB,IAAyBpB,SAAzB;EACH;;EACDnF,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAIA,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClC,UAAIzH,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACIxI,KAAK,CAACC,SAAN,CAAgBwD,QAAQ,CAACoG,KAAzB,EAAgC,CAAhC,EAAmCpG,QAAQ,CAACmB,SAA5C,EAAuD,CAAvD,EAA0DnB,QAAQ,CAACoG,KAAT,CAAe9N,MAAzE;EACJ;EACH;;EACD,QAAI4H,IAAI,GAAG,KAAK0B,MAAL,CAAY,CAAZ,CAAX,EAA2B;EACvB,UAAI1D,KAAK,IAAIoC,QAAQ,CAACyE,KAAlB,IAA2B7G,KAAK,IAAIoC,QAAQ,CAAC4E,KAAjD,EACI3I,KAAK,CAACC,SAAN,CAAgBwD,QAAQ,CAACoG,KAAzB,EAAgC,CAAhC,EAAmCpG,QAAQ,CAACmB,SAA5C,EAAuD,CAAvD,EAA0DnB,QAAQ,CAACoG,KAAT,CAAe9N,MAAzE;EACJ;EACH;;EACD,QAAIsQ,qBAAqB,GAAG,KAAKD,UAAL,CAAgBlH,QAAQ,CAACO,OAAT,CAAiB,KAAKJ,MAAtB,EAA8B1B,IAA9B,CAAhB,CAA5B;EACA,QAAI,CAAC0I,qBAAL,EACIrM,KAAK,CAACC,SAAN,CAAgBwD,QAAQ,CAACoG,KAAzB,EAAgC,CAAhC,EAAmCpG,QAAQ,CAACmB,SAA5C,EAAuD,CAAvD,EAA0DnB,QAAQ,CAACoG,KAAT,CAAe9N,MAAzE,EADJ,KAEK;EACD,UAAI6I,SAAS,GAAGnB,QAAQ,CAACmB,SAAzB;EACA,UAAIiF,KAAK,GAAGpG,QAAQ,CAACoG,KAArB;;EACA,WAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGuQ,qBAAqB,CAACtQ,MAA1C,EAAkDF,CAAC,GAAGC,CAAtD,EAAyDD,CAAC,EAA1D,EACI+I,SAAS,CAAC/I,CAAD,CAAT,GAAegO,KAAK,CAACwC,qBAAqB,CAACxQ,CAAD,CAAtB,CAApB;EACP;EACJ;;EAnC2C;EAqChDsQ,iBAAiB,CAAC/G,WAAlB,GAAgC,CAAC,KAAKnB,QAAQ,CAACW,SAAf,CAAhC;EACA;EACA;;EACO,MAAM0H,oBAAN,SAAmC1G,aAAnC,CAAiD;EACpDxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B0G,iBAA1B,EAA6C;EACpD,UAAMpH,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACY,YAAT,GAAwB,GAAxB,GAA8B0H,iBADH,CAA/B;EAGA,SAAKA,iBAAL,GAAyBA,iBAAzB;EACH;;EACDjH,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAc6I,GAAd,EAAmBC,QAAnB,EAA6BC,aAA7B,EAA4CC,QAA5C,EAAsDC,OAAtD,EAA+D;EACnE5G,IAAAA,KAAK,IAAI;EAAE;EAAX;EACA,SAAKX,MAAL,CAAYW,KAAZ,IAAqBrC,IAArB;EACA,SAAK0B,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAiCwG,GAAjC;EACA,SAAKnH,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAsCyG,QAAtC;EACA,SAAKpH,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAA4C0G,aAA5C;EACA,SAAKrH,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAsC2G,QAAQ,GAAG,CAAH,GAAO,CAArD;EACA,SAAKtH,MAAL,CAAYW,KAAK,GAAG;EAAE;EAAtB,QAAqC4G,OAAO,GAAG,CAAH,GAAO,CAAnD;EACH;;EACDnN,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI+I,UAAU,GAAGpJ,QAAQ,CAACqJ,aAAT,CAAuB,KAAKP,iBAA5B,CAAjB;EACA,QAAI,CAACM,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIqE,UAAAA,UAAU,CAACL,GAAX,GAAiBK,UAAU,CAACnE,IAAX,CAAgB8D,GAAjC;EACAK,UAAAA,UAAU,CAACJ,QAAX,GAAsBI,UAAU,CAACnE,IAAX,CAAgB+D,QAAtC;EACAI,UAAAA,UAAU,CAACH,aAAX,GAA2BG,UAAU,CAACnE,IAAX,CAAgBgE,aAA3C;EACAG,UAAAA,UAAU,CAACF,QAAX,GAAsBE,UAAU,CAACnE,IAAX,CAAgBiE,QAAtC;EACAE,UAAAA,UAAU,CAACD,OAAX,GAAqBC,UAAU,CAACnE,IAAX,CAAgBkE,OAArC;EACA;;EACJ,aAAK7I,QAAQ,CAAC4E,KAAd;EACIkE,UAAAA,UAAU,CAACL,GAAX,IAAkB,CAACK,UAAU,CAACnE,IAAX,CAAgB8D,GAAhB,GAAsBK,UAAU,CAACL,GAAlC,IAAyC9K,KAA3D;EACAmL,UAAAA,UAAU,CAACJ,QAAX,IAAuB,CAACI,UAAU,CAACnE,IAAX,CAAgB+D,QAAhB,GAA2BI,UAAU,CAACJ,QAAvC,IAAmD/K,KAA1E;EACAmL,UAAAA,UAAU,CAACH,aAAX,GAA2BG,UAAU,CAACnE,IAAX,CAAgBgE,aAA3C;EACAG,UAAAA,UAAU,CAACF,QAAX,GAAsBE,UAAU,CAACnE,IAAX,CAAgBiE,QAAtC;EACAE,UAAAA,UAAU,CAACD,OAAX,GAAqBC,UAAU,CAACnE,IAAX,CAAgBkE,OAArC;EAbR;;EAeA;EACH;;EACD,QAAIJ,GAAG,GAAG,CAAV;EAAA,QAAaC,QAAQ,GAAG,CAAxB;EACA,QAAI5Q,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACA2Q,QAAAA,GAAG,GAAGnH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAZ;EACA4Q,QAAAA,QAAQ,GAAGpH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAjB;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACAyE,QAAAA,GAAG,IAAI,CAACnH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAwC2Q,GAAzC,IAAgD1D,CAAvD;EACA2D,QAAAA,QAAQ,IAAI,CAACpH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA6C4Q,QAA9C,IAA0D3D,CAAtE;EACA;;EACJ,WAAK;EAAE;EAAP;EACI0D,QAAAA,GAAG,GAAGnH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAZ;EACA4Q,QAAAA,QAAQ,GAAGpH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAjB;EACA;;EACJ;EACI2Q,QAAAA,GAAG,GAAG,KAAKlF,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAwCiM,SAAS,GAAG;EAAE;EAAtD,SAAN;EACA2E,QAAAA,QAAQ,GAAG,KAAKnF,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA6CiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAhF,SAAX;EAfR;;EAiBA,QAAInG,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzBqE,MAAAA,UAAU,CAACL,GAAX,GAAiBK,UAAU,CAACnE,IAAX,CAAgB8D,GAAhB,GAAsB,CAACA,GAAG,GAAGK,UAAU,CAACnE,IAAX,CAAgB8D,GAAvB,IAA8B9K,KAArE;EACAmL,MAAAA,UAAU,CAACJ,QAAX,GAAsBI,UAAU,CAACnE,IAAX,CAAgB+D,QAAhB,GAA2B,CAACA,QAAQ,GAAGI,UAAU,CAACnE,IAAX,CAAgB+D,QAA5B,IAAwC/K,KAAzF;;EACA,UAAIoC,SAAS,IAAIE,YAAY,CAACoF,MAA9B,EAAsC;EAClCyD,QAAAA,UAAU,CAACH,aAAX,GAA2BG,UAAU,CAACnE,IAAX,CAAgBgE,aAA3C;EACAG,QAAAA,UAAU,CAACF,QAAX,GAAsBE,UAAU,CAACnE,IAAX,CAAgBiE,QAAtC;EACAE,QAAAA,UAAU,CAACD,OAAX,GAAqBC,UAAU,CAACnE,IAAX,CAAgBkE,OAArC;EACH,OAJD,MAKK;EACDC,QAAAA,UAAU,CAACH,aAAX,GAA2BrH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAjC;EACAgR,QAAAA,UAAU,CAACF,QAAX,GAAsBtH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,IAA8B,CAApD;EACAgR,QAAAA,UAAU,CAACD,OAAX,GAAqBvH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,IAA6B,CAAlD;EACH;EACJ,KAbD,MAcK;EACDgR,MAAAA,UAAU,CAACL,GAAX,IAAkB,CAACA,GAAG,GAAGK,UAAU,CAACL,GAAlB,IAAyB9K,KAA3C;EACAmL,MAAAA,UAAU,CAACJ,QAAX,IAAuB,CAACA,QAAQ,GAAGI,UAAU,CAACJ,QAAvB,IAAmC/K,KAA1D;;EACA,UAAIoC,SAAS,IAAIE,YAAY,CAAC+I,KAA9B,EAAqC;EACjCF,QAAAA,UAAU,CAACH,aAAX,GAA2BrH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAjC;EACAgR,QAAAA,UAAU,CAACF,QAAX,GAAsBtH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,IAA8B,CAApD;EACAgR,QAAAA,UAAU,CAACD,OAAX,GAAqBvH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,IAA6B,CAAlD;EACH;EACJ;EACJ;;EAtFmD;EAwFxD;EACA;;EACO,MAAMmR,2BAAN,SAA0CpH,aAA1C,CAAwD;EAC3DxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0BoH,wBAA1B,EAAoD;EAC3D,UAAM9H,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACa,mBAAT,GAA+B,GAA/B,GAAqCmI,wBADV,CAA/B;EAGA,SAAKA,wBAAL,GAAgCA,wBAAhC;EACH;;EACD3H,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;EACD;;;EACAqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAcuJ,SAAd,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,SAArC,EAAgDC,SAAhD,EAA2DC,SAA3D,EAAsE;EAC1E,QAAIlI,MAAM,GAAG,KAAKA,MAAlB;EACAW,IAAAA,KAAK,IAAI;EAAE;EAAX;EACAX,IAAAA,MAAM,CAACW,KAAD,CAAN,GAAgBrC,IAAhB;EACA0B,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA+BkH,SAA/B;EACA7H,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA0BmH,IAA1B;EACA9H,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA0BoH,IAA1B;EACA/H,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA+BqH,SAA/B;EACAhI,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA+BsH,SAA/B;EACAjI,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA+BuH,SAA/B;EACH;;EACD9N,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI+I,UAAU,GAAGpJ,QAAQ,CAAC+J,oBAAT,CAA8B,KAAKP,wBAAnC,CAAjB;EACA,QAAI,CAACJ,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,UAAIqD,IAAI,GAAGmE,UAAU,CAACnE,IAAtB;;EACA,cAAQ/G,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIqE,UAAAA,UAAU,CAACK,SAAX,GAAuBxE,IAAI,CAACwE,SAA5B;EACAL,UAAAA,UAAU,CAACM,IAAX,GAAkBzE,IAAI,CAACyE,IAAvB;EACAN,UAAAA,UAAU,CAACO,IAAX,GAAkB1E,IAAI,CAAC0E,IAAvB;EACAP,UAAAA,UAAU,CAACQ,SAAX,GAAuB3E,IAAI,CAAC2E,SAA5B;EACAR,UAAAA,UAAU,CAACS,SAAX,GAAuB5E,IAAI,CAAC4E,SAA5B;EACAT,UAAAA,UAAU,CAACU,SAAX,GAAuB7E,IAAI,CAAC6E,SAA5B;EACA;;EACJ,aAAKxJ,QAAQ,CAAC4E,KAAd;EACIkE,UAAAA,UAAU,CAACK,SAAX,IAAwB,CAACxE,IAAI,CAACwE,SAAL,GAAiBL,UAAU,CAACK,SAA7B,IAA0CxL,KAAlE;EACAmL,UAAAA,UAAU,CAACM,IAAX,IAAmB,CAACzE,IAAI,CAACyE,IAAL,GAAYN,UAAU,CAACM,IAAxB,IAAgCzL,KAAnD;EACAmL,UAAAA,UAAU,CAACO,IAAX,IAAmB,CAAC1E,IAAI,CAAC0E,IAAL,GAAYP,UAAU,CAACO,IAAxB,IAAgC1L,KAAnD;EACAmL,UAAAA,UAAU,CAACQ,SAAX,IAAwB,CAAC3E,IAAI,CAAC2E,SAAL,GAAiBR,UAAU,CAACQ,SAA7B,IAA0C3L,KAAlE;EACAmL,UAAAA,UAAU,CAACS,SAAX,IAAwB,CAAC5E,IAAI,CAAC4E,SAAL,GAAiBT,UAAU,CAACS,SAA7B,IAA0C5L,KAAlE;EACAmL,UAAAA,UAAU,CAACU,SAAX,IAAwB,CAAC7E,IAAI,CAAC6E,SAAL,GAAiBV,UAAU,CAACU,SAA7B,IAA0C7L,KAAlE;EAfR;;EAiBA;EACH;;EACD,QAAIwC,MAAJ,EAAY9F,CAAZ,EAAeI,CAAf,EAAkB2F,MAAlB,EAA0BC,MAA1B,EAAkCE,MAAlC;EACA,QAAIzI,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,GAAG;EAAE;EAAlB,KAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAqI,QAAAA,MAAM,GAAGmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAsI,QAAAA,MAAM,GAAGkB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuI,QAAAA,MAAM,GAAGiB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAyI,QAAAA,MAAM,GAAGe,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7D,QAAAA,MAAM,IAAI,CAACmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CqI,MAA5C,IAAsD4E,CAAhE;EACA1K,QAAAA,CAAC,IAAI,CAACiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCuC,CAAvC,IAA4C0K,CAAjD;EACAtK,QAAAA,CAAC,IAAI,CAAC6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsC2C,CAAvC,IAA4CsK,CAAjD;EACA3E,QAAAA,MAAM,IAAI,CAACkB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CsI,MAA5C,IAAsD2E,CAAhE;EACA1E,QAAAA,MAAM,IAAI,CAACiB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CuI,MAA5C,IAAsD0E,CAAhE;EACAxE,QAAAA,MAAM,IAAI,CAACe,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CyI,MAA5C,IAAsDwE,CAAhE;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5E,QAAAA,MAAM,GAAGmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACAsI,QAAAA,MAAM,GAAGkB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuI,QAAAA,MAAM,GAAGiB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAyI,QAAAA,MAAM,GAAGe,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACA;;EACJ;EACIqI,QAAAA,MAAM,GAAG,KAAKoD,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAE;EAAzD,SAAT;EACA1J,QAAAA,CAAC,GAAG,KAAKkJ,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACAtJ,QAAAA,CAAC,GAAG,KAAK8I,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EACA3D,QAAAA,MAAM,GAAG,KAAKmD,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAAlF,SAAT;EACA1D,QAAAA,MAAM,GAAG,KAAKkD,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAAlF,SAAT;EACAxD,QAAAA,MAAM,GAAG,KAAKgD,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAAlF,SAAT;EA/BR;;EAiCA,QAAInG,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzB,UAAIE,IAAI,GAAGmE,UAAU,CAACnE,IAAtB;EACAmE,MAAAA,UAAU,CAACK,SAAX,GAAuBxE,IAAI,CAACwE,SAAL,GAAiB,CAAChJ,MAAM,GAAGwE,IAAI,CAACwE,SAAf,IAA4BxL,KAApE;EACAmL,MAAAA,UAAU,CAACM,IAAX,GAAkBzE,IAAI,CAACyE,IAAL,GAAY,CAAC/O,CAAC,GAAGsK,IAAI,CAACyE,IAAV,IAAkBzL,KAAhD;EACAmL,MAAAA,UAAU,CAACO,IAAX,GAAkB1E,IAAI,CAAC0E,IAAL,GAAY,CAAC5O,CAAC,GAAGkK,IAAI,CAAC0E,IAAV,IAAkB1L,KAAhD;EACAmL,MAAAA,UAAU,CAACQ,SAAX,GAAuB3E,IAAI,CAAC2E,SAAL,GAAiB,CAAClJ,MAAM,GAAGuE,IAAI,CAAC2E,SAAf,IAA4B3L,KAApE;EACAmL,MAAAA,UAAU,CAACS,SAAX,GAAuB5E,IAAI,CAAC4E,SAAL,GAAiB,CAAClJ,MAAM,GAAGsE,IAAI,CAAC4E,SAAf,IAA4B5L,KAApE;EACAmL,MAAAA,UAAU,CAACU,SAAX,GAAuB7E,IAAI,CAAC6E,SAAL,GAAiB,CAACjJ,MAAM,GAAGoE,IAAI,CAAC6E,SAAf,IAA4B7L,KAApE;EACH,KARD,MASK;EACDmL,MAAAA,UAAU,CAACK,SAAX,IAAwB,CAAChJ,MAAM,GAAG2I,UAAU,CAACK,SAArB,IAAkCxL,KAA1D;EACAmL,MAAAA,UAAU,CAACM,IAAX,IAAmB,CAAC/O,CAAC,GAAGyO,UAAU,CAACM,IAAhB,IAAwBzL,KAA3C;EACAmL,MAAAA,UAAU,CAACO,IAAX,IAAmB,CAAC5O,CAAC,GAAGqO,UAAU,CAACO,IAAhB,IAAwB1L,KAA3C;EACAmL,MAAAA,UAAU,CAACQ,SAAX,IAAwB,CAAClJ,MAAM,GAAG0I,UAAU,CAACQ,SAArB,IAAkC3L,KAA1D;EACAmL,MAAAA,UAAU,CAACS,SAAX,IAAwB,CAAClJ,MAAM,GAAGyI,UAAU,CAACS,SAArB,IAAkC5L,KAA1D;EACAmL,MAAAA,UAAU,CAACU,SAAX,IAAwB,CAACjJ,MAAM,GAAGuI,UAAU,CAACU,SAArB,IAAkC7L,KAA1D;EACH;EACJ;;EArG0D;EAuG/D;;EACO,MAAM+L,8BAAN,SAA6ChG,cAA7C,CAA4D;EAC/DrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B6H,mBAA1B,EAA+C;EACtD,UAAMvI,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACc,sBAAT,GAAkC,GAAlC,GAAwC2I,mBAAvE;EACA,SAAKA,mBAAL,GAA2BA,mBAA3B;EACH;;EACDjO,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI+I,UAAU,GAAGpJ,QAAQ,CAACkK,eAAT,CAAyB,KAAKD,mBAA9B,CAAjB;EACA,QAAI,CAACb,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIqE,UAAAA,UAAU,CAACe,QAAX,GAAsBf,UAAU,CAACnE,IAAX,CAAgBkF,QAAtC;EACA;;EACJ,aAAK7J,QAAQ,CAAC4E,KAAd;EACIkE,UAAAA,UAAU,CAACe,QAAX,IAAuB,CAACf,UAAU,CAACnE,IAAX,CAAgBkF,QAAhB,GAA2Bf,UAAU,CAACe,QAAvC,IAAmDlM,KAA1E;EALR;;EAOA;EACH;;EACD,QAAIkM,QAAQ,GAAG,KAAKhG,aAAL,CAAmBjE,IAAnB,CAAf;EACA,QAAIhC,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACIqE,UAAU,CAACe,QAAX,GAAsBf,UAAU,CAACnE,IAAX,CAAgBkF,QAAhB,GAA2B,CAACA,QAAQ,GAAGf,UAAU,CAACnE,IAAX,CAAgBkF,QAA5B,IAAwClM,KAAzF,CADJ,KAGImL,UAAU,CAACe,QAAX,IAAuB,CAACA,QAAQ,GAAGf,UAAU,CAACe,QAAvB,IAAmClM,KAA1D;EACP;;EAzB8D;EA2BnE;;EACO,MAAMmM,6BAAN,SAA4CpG,cAA5C,CAA2D;EAC9DrM,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B6H,mBAA1B,EAA+C;EACtD,UAAMvI,UAAN,EAAkBU,WAAlB,EAA+B5B,QAAQ,CAACe,qBAAT,GAAiC,GAAjC,GAAuC0I,mBAAtE;EACA;;EACA,SAAKA,mBAAL,GAA2B,CAA3B;EACA,SAAKA,mBAAL,GAA2BA,mBAA3B;EACH;;EACDjO,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI+I,UAAU,GAAGpJ,QAAQ,CAACkK,eAAT,CAAyB,KAAKD,mBAA9B,CAAjB;EACA,QAAI,CAACb,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIqE,UAAAA,UAAU,CAACiB,OAAX,GAAqBjB,UAAU,CAACnE,IAAX,CAAgBoF,OAArC;EACA;;EACJ,aAAK/J,QAAQ,CAAC4E,KAAd;EACIkE,UAAAA,UAAU,CAACiB,OAAX,IAAsB,CAACjB,UAAU,CAACnE,IAAX,CAAgBoF,OAAhB,GAA0BjB,UAAU,CAACiB,OAAtC,IAAiDpM,KAAvE;EALR;;EAOA;EACH;;EACD,QAAIoM,OAAO,GAAG,KAAKlG,aAAL,CAAmBjE,IAAnB,CAAd;EACA,QAAIhC,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EACIqE,UAAU,CAACiB,OAAX,GAAqBjB,UAAU,CAACnE,IAAX,CAAgBoF,OAAhB,GAA0B,CAACA,OAAO,GAAGjB,UAAU,CAACnE,IAAX,CAAgBoF,OAA3B,IAAsCpM,KAArF,CADJ,KAGImL,UAAU,CAACiB,OAAX,IAAsB,CAACA,OAAO,GAAGjB,UAAU,CAACiB,OAAtB,IAAiCpM,KAAvD;EACP;;EA3B6D;EA6BlE;EACA;;EACO,MAAMqM,yBAAN,SAAwCnI,aAAxC,CAAsD;EACzDxK,EAAAA,WAAW,CAAC+J,UAAD,EAAaU,WAAb,EAA0B6H,mBAA1B,EAA+C;EACtD,UAAMvI,UAAN,EAAkBU,WAAlB,EAA+B,CAC3B5B,QAAQ,CAACgB,iBAAT,GAA6B,GAA7B,GAAmCyI,mBADR,CAA/B;EAGA;;EACA,SAAKA,mBAAL,GAA2B,CAA3B;EACA,SAAKA,mBAAL,GAA2BA,mBAA3B;EACH;;EACDpI,EAAAA,eAAe,GAAG;EACd,WAAO;EAAE;EAAT;EACH;;EACDqC,EAAAA,QAAQ,CAAC3B,KAAD,EAAQrC,IAAR,EAAcuJ,SAAd,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;EACzC,QAAI/H,MAAM,GAAG,KAAKA,MAAlB;EACAW,IAAAA,KAAK,KAAK,CAAV;EACAX,IAAAA,MAAM,CAACW,KAAD,CAAN,GAAgBrC,IAAhB;EACA0B,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA+BkH,SAA/B;EACA7H,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA0BmH,IAA1B;EACA9H,IAAAA,MAAM,CAACW,KAAK,GAAG;EAAE;EAAX,KAAN,GAA0BoH,IAA1B;EACH;;EACD3N,EAAAA,KAAK,CAACgE,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BwH,WAA3B,EAAwCzJ,KAAxC,EAA+CC,KAA/C,EAAsDmC,SAAtD,EAAiE;EAClE,QAAI+I,UAAU,GAAGpJ,QAAQ,CAACkK,eAAT,CAAyB,KAAKD,mBAA9B,CAAjB;EACA,QAAI,CAACb,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIlD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI1B,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIqE,UAAAA,UAAU,CAACK,SAAX,GAAuBL,UAAU,CAACnE,IAAX,CAAgBwE,SAAvC;EACAL,UAAAA,UAAU,CAACM,IAAX,GAAkBN,UAAU,CAACnE,IAAX,CAAgByE,IAAlC;EACAN,UAAAA,UAAU,CAACO,IAAX,GAAkBP,UAAU,CAACnE,IAAX,CAAgB0E,IAAlC;EACA;;EACJ,aAAKrJ,QAAQ,CAAC4E,KAAd;EACIkE,UAAAA,UAAU,CAACK,SAAX,IAAwB,CAACL,UAAU,CAACnE,IAAX,CAAgBwE,SAAhB,GAA4BL,UAAU,CAACK,SAAxC,IAAqDxL,KAA7E;EACAmL,UAAAA,UAAU,CAACM,IAAX,IAAmB,CAACN,UAAU,CAACnE,IAAX,CAAgByE,IAAhB,GAAuBN,UAAU,CAACM,IAAnC,IAA2CzL,KAA9D;EACAmL,UAAAA,UAAU,CAACO,IAAX,IAAmB,CAACP,UAAU,CAACnE,IAAX,CAAgB0E,IAAhB,GAAuBP,UAAU,CAACO,IAAnC,IAA2C1L,KAA9D;EATR;;EAWA;EACH;;EACD,QAAIwC,MAAJ,EAAY9F,CAAZ,EAAeI,CAAf;EACA,QAAI3C,CAAC,GAAGqJ,QAAQ,CAACQ,MAAT,CAAgBL,MAAhB,EAAwB1B,IAAxB,EAA8B;EAAE;EAAhC,KAAR;EACA,QAAImE,SAAS,GAAG,KAAKhC,MAAL,CAAYjK,CAAC,IAAI,CAAjB,CAAhB;;EACA,YAAQiM,SAAR;EACI,WAAK;EAAE;EAAP;EACI,YAAIC,MAAM,GAAG1C,MAAM,CAACxJ,CAAD,CAAnB;EACAqI,QAAAA,MAAM,GAAGmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA,YAAIiN,CAAC,GAAG,CAACnF,IAAI,GAAGoE,MAAR,KAAmB1C,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAN,GAA4BkM,MAA/C,CAAR;EACA7D,QAAAA,MAAM,IAAI,CAACmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAA2CqI,MAA5C,IAAsD4E,CAAhE;EACA1K,QAAAA,CAAC,IAAI,CAACiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsCuC,CAAvC,IAA4C0K,CAAjD;EACAtK,QAAAA,CAAC,IAAI,CAAC6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAN,UAAoB;EAAE;EAAvB,SAAN,GAAsC2C,CAAvC,IAA4CsK,CAAjD;EACA;;EACJ,WAAK;EAAE;EAAP;EACI5E,QAAAA,MAAM,GAAGmB,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAf;EACAuC,QAAAA,CAAC,GAAGiH,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA2C,QAAAA,CAAC,GAAG6G,MAAM,CAACxJ,CAAC,GAAG;EAAE;EAAP,SAAV;EACA;;EACJ;EACIqI,QAAAA,MAAM,GAAG,KAAKoD,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAA2CiM,SAAS,GAAG;EAAE;EAAzD,SAAT;EACA1J,QAAAA,CAAC,GAAG,KAAKkJ,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAf,UAAiC;EAAE;EAAzE,SAAJ;EACAtJ,QAAAA,CAAC,GAAG,KAAK8I,cAAL,CAAoB3D,IAApB,EAA0B9H,CAA1B,EAA6B;EAAE;EAA/B,UAAsCiM,SAAS,GAAG;EAAG;EAAH,UAAqB,CAAjC,GAAqC;EAAE;EAA7E,SAAJ;EAnBR;;EAqBA,QAAInG,KAAK,IAAIoC,QAAQ,CAACyE,KAAtB,EAA6B;EACzB,UAAIE,IAAI,GAAGmE,UAAU,CAACnE,IAAtB;EACAmE,MAAAA,UAAU,CAACK,SAAX,GAAuBxE,IAAI,CAACwE,SAAL,GAAiB,CAAChJ,MAAM,GAAGwE,IAAI,CAACwE,SAAf,IAA4BxL,KAApE;EACAmL,MAAAA,UAAU,CAACM,IAAX,GAAkBzE,IAAI,CAACyE,IAAL,GAAY,CAAC/O,CAAC,GAAGsK,IAAI,CAACyE,IAAV,IAAkBzL,KAAhD;EACAmL,MAAAA,UAAU,CAACO,IAAX,GAAkB1E,IAAI,CAAC0E,IAAL,GAAY,CAAC5O,CAAC,GAAGkK,IAAI,CAAC0E,IAAV,IAAkB1L,KAAhD;EACH,KALD,MAMK;EACDmL,MAAAA,UAAU,CAACK,SAAX,IAAwB,CAAChJ,MAAM,GAAG2I,UAAU,CAACK,SAArB,IAAkCxL,KAA1D;EACAmL,MAAAA,UAAU,CAACM,IAAX,IAAmB,CAAC/O,CAAC,GAAGyO,UAAU,CAACM,IAAhB,IAAwBzL,KAA3C;EACAmL,MAAAA,UAAU,CAACO,IAAX,IAAmB,CAAC5O,CAAC,GAAGqO,UAAU,CAACO,IAAhB,IAAwB1L,KAA3C;EACH;EACJ;;EA1EwD;;ECj1D7D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;;EACO,MAAMsM,cAAN,CAAqB;EACxB5S,EAAAA,WAAW,CAACsN,IAAD,EAAO;EACd;EACA,SAAKuF,MAAL,GAAc,IAAIjN,KAAJ,EAAd;EACA;EACR;EACA;EACA;;EACQ,SAAKkN,SAAL,GAAiB,CAAjB;EACA,SAAKC,YAAL,GAAoB,CAApB;EACA,SAAKtK,MAAL,GAAc,IAAI7C,KAAJ,EAAd;EACA,SAAKoN,SAAL,GAAiB,IAAIpN,KAAJ,EAAjB;EACA,SAAKqN,KAAL,GAAa,IAAIC,UAAJ,CAAe,IAAf,CAAb;EACA,SAAKC,WAAL,GAAmB,IAAIpT,SAAJ,EAAnB;EACA,SAAKqT,iBAAL,GAAyB,KAAzB;EACA,SAAKC,cAAL,GAAsB,IAAItM,IAAJ,CAAS,MAAM,IAAIuM,UAAJ,EAAf,CAAtB;EACA,SAAKhG,IAAL,GAAYA,IAAZ;EACH;;EACoB,SAAdiG,cAAc,GAAG;EACpB,QAAI,CAACC,eAAL,EACIA,eAAe,GAAG,IAAI5L,SAAJ,CAAc,SAAd,EAAyB,EAAzB,EAA6B,CAA7B,CAAlB;EACJ,WAAO4L,eAAP;EACH;EACD;;;EACAC,EAAAA,MAAM,CAACC,KAAD,EAAQ;EACVA,IAAAA,KAAK,IAAI,KAAKZ,SAAd;EACA,QAAID,MAAM,GAAG,KAAKA,MAAlB;;EACA,SAAK,IAAIpS,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmS,MAAM,CAAClS,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;EAC3C,UAAIkT,OAAO,GAAGd,MAAM,CAACpS,CAAD,CAApB;EACA,UAAI,CAACkT,OAAL,EACI;EACJA,MAAAA,OAAO,CAACC,aAAR,GAAwBD,OAAO,CAACE,iBAAhC;EACAF,MAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACI,aAA5B;EACA,UAAIC,YAAY,GAAGN,KAAK,GAAGC,OAAO,CAACb,SAAnC;;EACA,UAAIa,OAAO,CAACM,KAAR,GAAgB,CAApB,EAAuB;EACnBN,QAAAA,OAAO,CAACM,KAAR,IAAiBD,YAAjB;EACA,YAAIL,OAAO,CAACM,KAAR,GAAgB,CAApB,EACI;EACJD,QAAAA,YAAY,GAAG,CAACL,OAAO,CAACM,KAAxB;EACAN,QAAAA,OAAO,CAACM,KAAR,GAAgB,CAAhB;EACH;;EACD,UAAIC,IAAI,GAAGP,OAAO,CAACO,IAAnB;;EACA,UAAIA,IAAJ,EAAU;EACN;EACA,YAAIC,QAAQ,GAAGR,OAAO,CAACG,SAAR,GAAoBI,IAAI,CAACD,KAAxC;;EACA,YAAIE,QAAQ,IAAI,CAAhB,EAAmB;EACfD,UAAAA,IAAI,CAACD,KAAL,GAAa,CAAb;EACAC,UAAAA,IAAI,CAACE,SAAL,IAAkBT,OAAO,CAACb,SAAR,IAAqB,CAArB,GAAyB,CAAzB,GAA6B,CAACqB,QAAQ,GAAGR,OAAO,CAACb,SAAnB,GAA+BY,KAAhC,IAAyCQ,IAAI,CAACpB,SAA7F;EACAa,UAAAA,OAAO,CAACS,SAAR,IAAqBJ,YAArB;EACA,eAAKK,UAAL,CAAgB5T,CAAhB,EAAmByT,IAAnB,EAAyB,IAAzB;;EACA,iBAAOA,IAAI,CAACI,UAAZ,EAAwB;EACpBJ,YAAAA,IAAI,CAACK,OAAL,IAAgBb,KAAhB;EACAQ,YAAAA,IAAI,GAAGA,IAAI,CAACI,UAAZ;EACH;;EACD;EACH;EACJ,OAdD,MAeK,IAAIX,OAAO,CAACG,SAAR,IAAqBH,OAAO,CAACa,QAA7B,IAAyC,CAACb,OAAO,CAACW,UAAtD,EAAkE;EACnEzB,QAAAA,MAAM,CAACpS,CAAD,CAAN,GAAY,IAAZ;EACA,aAAKwS,KAAL,CAAW1O,GAAX,CAAeoP,OAAf;EACA,aAAKc,SAAL,CAAed,OAAf;EACA;EACH;;EACD,UAAIA,OAAO,CAACW,UAAR,IAAsB,KAAKI,gBAAL,CAAsBf,OAAtB,EAA+BD,KAA/B,CAA1B,EAAiE;EAC7D;EACA,YAAIiB,IAAI,GAAGhB,OAAO,CAACW,UAAnB;EACAX,QAAAA,OAAO,CAACW,UAAR,GAAqB,IAArB;EACA,YAAIK,IAAJ,EACIA,IAAI,CAACC,QAAL,GAAgB,IAAhB;;EACJ,eAAOD,IAAP,EAAa;EACT,eAAK1B,KAAL,CAAW1O,GAAX,CAAeoQ,IAAf;EACAA,UAAAA,IAAI,GAAGA,IAAI,CAACL,UAAZ;EACH;EACJ;;EACDX,MAAAA,OAAO,CAACS,SAAR,IAAqBJ,YAArB;EACH;;EACD,SAAKf,KAAL,CAAW4B,KAAX;EACH;EACD;;;EACAH,EAAAA,gBAAgB,CAACI,EAAD,EAAKpB,KAAL,EAAY;EACxB,QAAIiB,IAAI,GAAGG,EAAE,CAACR,UAAd;EACA,QAAI,CAACK,IAAL,EACI,OAAO,IAAP;EACJ,QAAII,QAAQ,GAAG,KAAKL,gBAAL,CAAsBC,IAAtB,EAA4BjB,KAA5B,CAAf;EACAiB,IAAAA,IAAI,CAACf,aAAL,GAAqBe,IAAI,CAACd,iBAA1B;EACAc,IAAAA,IAAI,CAACb,SAAL,GAAiBa,IAAI,CAACZ,aAAtB,CANwB;;EAQxB,QAAIe,EAAE,CAACP,OAAH,GAAa,CAAb,IAAkBO,EAAE,CAACP,OAAH,IAAcO,EAAE,CAACE,WAAvC,EAAoD;EAChD;EACA,UAAIL,IAAI,CAACM,UAAL,IAAmB,CAAnB,IAAwBH,EAAE,CAACE,WAAH,IAAkB,CAA9C,EAAiD;EAC7CF,QAAAA,EAAE,CAACR,UAAH,GAAgBK,IAAI,CAACL,UAArB;EACA,YAAIK,IAAI,CAACL,UAAT,EACIK,IAAI,CAACL,UAAL,CAAgBM,QAAhB,GAA2BE,EAA3B;EACJA,QAAAA,EAAE,CAACI,cAAH,GAAoBP,IAAI,CAACO,cAAzB;EACA,aAAKjC,KAAL,CAAW1O,GAAX,CAAeoQ,IAAf;EACH;;EACD,aAAOI,QAAP;EACH;;EACDJ,IAAAA,IAAI,CAACP,SAAL,IAAkBV,KAAK,GAAGiB,IAAI,CAAC7B,SAA/B;EACAgC,IAAAA,EAAE,CAACP,OAAH,IAAcb,KAAd;EACA,WAAO,KAAP;EACH;EACD;EACJ;EACA;;;EACIrP,EAAAA,KAAK,CAACgE,QAAD,EAAW;EACZ,QAAI,CAACA,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAI,KAAKqL,iBAAT,EACI,KAAK+B,kBAAL;EACJ,QAAI1M,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIoK,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIuC,OAAO,GAAG,KAAd;;EACA,SAAK,IAAI3U,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmS,MAAM,CAAClS,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;EAC3C,UAAIkT,OAAO,GAAGd,MAAM,CAACpS,CAAD,CAApB;EACA,UAAI,CAACkT,OAAD,IAAYA,OAAO,CAACM,KAAR,GAAgB,CAAhC,EACI;EACJmB,MAAAA,OAAO,GAAG,IAAV;EACA,UAAI7O,KAAK,GAAG9F,CAAC,IAAI,CAAL,GAASkI,QAAQ,CAAC4E,KAAlB,GAA0BoG,OAAO,CAAC0B,QAA9C,CAL2C;;EAO3C,UAAIjE,GAAG,GAAGuC,OAAO,CAACrN,KAAlB;EACA,UAAIqN,OAAO,CAACW,UAAZ,EACIlD,GAAG,IAAI,KAAKkE,eAAL,CAAqB3B,OAArB,EAA8BtL,QAA9B,EAAwC9B,KAAxC,CAAP,CADJ,KAEK,IAAIoN,OAAO,CAACS,SAAR,IAAqBT,OAAO,CAACa,QAA7B,IAAyC,CAACb,OAAO,CAACO,IAAtD,EACD9C,GAAG,GAAG,CAAN,CAXuC;;EAa3C,UAAIwC,aAAa,GAAGD,OAAO,CAACC,aAA5B;EAAA,UAA2C2B,aAAa,GAAG5B,OAAO,CAAC6B,gBAAR,EAA3D;EAAA,UAAuFC,SAAS,GAAGF,aAAnG;EACA,UAAIG,WAAW,GAAGjN,MAAlB;;EACA,UAAIkL,OAAO,CAACgC,OAAZ,EAAqB;EACjBF,QAAAA,SAAS,GAAG9B,OAAO,CAACiC,SAAR,CAAkB9N,QAAlB,GAA6B2N,SAAzC;EACAC,QAAAA,WAAW,GAAG,IAAd;EACH;;EACD,UAAI7N,SAAS,GAAG8L,OAAO,CAACiC,SAAR,CAAkB/N,SAAlC;EACA,UAAIgO,aAAa,GAAGhO,SAAS,CAAClH,MAA9B;;EACA,UAAKF,CAAC,IAAI,CAAL,IAAU2Q,GAAG,IAAI,CAAlB,IAAwB7K,KAAK,IAAIoC,QAAQ,CAACxI,GAA9C,EAAmD;EAC/C,aAAK,IAAIsM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGoJ,aAAtB,EAAqCpJ,EAAE,EAAvC,EAA2C;EAKvC,cAAIqJ,QAAQ,GAAGjO,SAAS,CAAC4E,EAAD,CAAxB;EACA,cAAIqJ,QAAQ,YAAYxG,kBAAxB,EACI,KAAKyG,uBAAL,CAA6BD,QAA7B,EAAuCzN,QAAvC,EAAiDoN,SAAjD,EAA4DlP,KAA5D,EAAmE,IAAnE,EADJ,KAGIuP,QAAQ,CAACzR,KAAT,CAAegE,QAAf,EAAyBuL,aAAzB,EAAwC6B,SAAxC,EAAmDC,WAAnD,EAAgEtE,GAAhE,EAAqE7K,KAArE,EAA4EqC,YAAY,CAAC+I,KAAzF;EACP;EACJ,OAZD,MAaK;EACD,YAAIqE,YAAY,GAAGrC,OAAO,CAACqC,YAA3B;EACA,YAAIC,UAAU,GAAGtC,OAAO,CAACuC,iBAAR,CAA0BvV,MAA1B,IAAoCkV,aAAa,IAAI,CAAtE;EACA,YAAII,UAAJ,EACItC,OAAO,CAACuC,iBAAR,CAA0BvV,MAA1B,GAAmCkV,aAAa,IAAI,CAApD;;EACJ,aAAK,IAAIpJ,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGoJ,aAAtB,EAAqCpJ,EAAE,EAAvC,EAA2C;EACvC,cAAIqJ,QAAQ,GAAGjO,SAAS,CAAC4E,EAAD,CAAxB;EACA,cAAI0J,aAAa,GAAGH,YAAY,CAACvJ,EAAD,CAAZ,IAAoB2J,UAApB,GAAiC7P,KAAjC,GAAyCoC,QAAQ,CAACyE,KAAtE;;EACA,cAAI0I,QAAQ,YAAY/I,cAAxB,EAAwC;EACpC,iBAAKsJ,mBAAL,CAAyBP,QAAzB,EAAmCzN,QAAnC,EAA6CoN,SAA7C,EAAwDrE,GAAxD,EAA6D+E,aAA7D,EAA4ExC,OAAO,CAACuC,iBAApF,EAAuGzJ,EAAE,IAAI,CAA7G,EAAgHwJ,UAAhH;EACH,WAFD,MAGK,IAAIH,QAAQ,YAAYxG,kBAAxB,EAA4C;EAC7C,iBAAKyG,uBAAL,CAA6BD,QAA7B,EAAuCzN,QAAvC,EAAiDoN,SAAjD,EAA4DlP,KAA5D,EAAmE,IAAnE;EACH,WAFI,MAGA;EAGDuP,YAAAA,QAAQ,CAACzR,KAAT,CAAegE,QAAf,EAAyBuL,aAAzB,EAAwC6B,SAAxC,EAAmDC,WAAnD,EAAgEtE,GAAhE,EAAqE+E,aAArE,EAAoFvN,YAAY,CAAC+I,KAAjG;EACH;EACJ;EACJ;;EACD,WAAK2E,WAAL,CAAiB3C,OAAjB,EAA0B4B,aAA1B;EACA9M,MAAAA,MAAM,CAAC9H,MAAP,GAAgB,CAAhB;EACAgT,MAAAA,OAAO,CAACE,iBAAR,GAA4B0B,aAA5B;EACA5B,MAAAA,OAAO,CAACI,aAAR,GAAwBJ,OAAO,CAACS,SAAhC;EACH,KAnEW;EAqEZ;EACA;;;EACA,QAAImC,UAAU,GAAG,KAAKxD,YAAL,GAAoByD,KAArC;EACA,QAAI/H,KAAK,GAAGpG,QAAQ,CAACoG,KAArB;;EACA,SAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG2H,QAAQ,CAACoG,KAAT,CAAe9N,MAAnC,EAA2CF,CAAC,GAAGC,CAA/C,EAAkDD,CAAC,EAAnD,EAAuD;EACnD,UAAI+N,IAAI,GAAGC,KAAK,CAAChO,CAAD,CAAhB;;EACA,UAAI+N,IAAI,CAACiI,eAAL,IAAwBF,UAA5B,EAAwC;EACpC,YAAI/G,cAAc,GAAGhB,IAAI,CAAClB,IAAL,CAAUkC,cAA/B;EACAhB,QAAAA,IAAI,CAACiB,aAAL,CAAmB,CAACD,cAAD,GAAkB,IAAlB,GAAyBnH,QAAQ,CAACqH,aAAT,CAAuBlB,IAAI,CAAClB,IAAL,CAAUoJ,KAAjC,EAAwClH,cAAxC,CAA5C;EACH;EACJ;;EACD,SAAKuD,YAAL,IAAqB,CAArB,CAhFY;;EAiFZ,SAAKE,KAAL,CAAW4B,KAAX;EACA,WAAOO,OAAP;EACH;;EACDE,EAAAA,eAAe,CAACR,EAAD,EAAKzM,QAAL,EAAe9B,KAAf,EAAsB;EACjC,QAAIoO,IAAI,GAAGG,EAAE,CAACR,UAAd;EACA,QAAIK,IAAI,CAACL,UAAT,EACI,KAAKgB,eAAL,CAAqBX,IAArB,EAA2BtM,QAA3B,EAAqC9B,KAArC;EACJ,QAAI6K,GAAG,GAAG,CAAV;;EACA,QAAI0D,EAAE,CAACE,WAAH,IAAkB,CAAtB,EAAyB;EAAE;EACvB5D,MAAAA,GAAG,GAAG,CAAN;EACA,UAAI7K,KAAK,IAAIoC,QAAQ,CAAC4E,KAAtB,EACIhH,KAAK,GAAGoC,QAAQ,CAACyE,KAAjB;EACP,KAJD,MAKK;EACDgE,MAAAA,GAAG,GAAG0D,EAAE,CAACP,OAAH,GAAaO,EAAE,CAACE,WAAtB;EACA,UAAI5D,GAAG,GAAG,CAAV,EACIA,GAAG,GAAG,CAAN;EACJ,UAAI7K,KAAK,IAAIoC,QAAQ,CAAC4E,KAAtB,EACIhH,KAAK,GAAGoO,IAAI,CAACU,QAAb;EACP;;EACD,QAAIsB,WAAW,GAAGvF,GAAG,GAAGuD,IAAI,CAACiC,mBAA7B;EAAA,QAAkDpN,SAAS,GAAG4H,GAAG,GAAGuD,IAAI,CAACkC,kBAAzE;EACA,QAAIhP,SAAS,GAAG8M,IAAI,CAACiB,SAAL,CAAe/N,SAA/B;EACA,QAAIgO,aAAa,GAAGhO,SAAS,CAAClH,MAA9B;EACA,QAAImW,SAAS,GAAGnC,IAAI,CAACrO,KAAL,GAAawO,EAAE,CAACI,cAAhC;EAAA,QAAgD6B,QAAQ,GAAGD,SAAS,IAAI,IAAI1F,GAAR,CAApE;EACA,QAAIwC,aAAa,GAAGe,IAAI,CAACf,aAAzB;EAAA,QAAwC2B,aAAa,GAAGZ,IAAI,CAACa,gBAAL,EAAxD;EAAA,QAAiFC,SAAS,GAAGF,aAA7F;EACA,QAAI9M,MAAM,GAAG,IAAb;EACA,QAAIkM,IAAI,CAACgB,OAAT,EACIF,SAAS,GAAGd,IAAI,CAACiB,SAAL,CAAe9N,QAAf,GAA0B2N,SAAtC,CADJ,KAEK,IAAIrE,GAAG,GAAGuD,IAAI,CAACqC,cAAf,EACDvO,MAAM,GAAG,KAAKA,MAAd;;EACJ,QAAIlC,KAAK,IAAIoC,QAAQ,CAACxI,GAAtB,EAA2B;EACvB,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoV,aAApB,EAAmCpV,CAAC,EAApC,EACIoH,SAAS,CAACpH,CAAD,CAAT,CAAa4D,KAAb,CAAmBgE,QAAnB,EAA6BuL,aAA7B,EAA4C6B,SAA5C,EAAuDhN,MAAvD,EAA+DsO,QAA/D,EAAyExQ,KAAzE,EAAgFqC,YAAY,CAACoF,MAA7F;EACP,KAHD,MAIK;EACD,UAAIgI,YAAY,GAAGrB,IAAI,CAACqB,YAAxB;EACA,UAAIiB,eAAe,GAAGtC,IAAI,CAACsC,eAA3B;EACA,UAAIhB,UAAU,GAAGtB,IAAI,CAACuB,iBAAL,CAAuBvV,MAAvB,IAAiCkV,aAAa,IAAI,CAAnE;EACA,UAAII,UAAJ,EACItB,IAAI,CAACuB,iBAAL,CAAuBvV,MAAvB,GAAgCkV,aAAa,IAAI,CAAjD;EACJlB,MAAAA,IAAI,CAACM,UAAL,GAAkB,CAAlB;;EACA,WAAK,IAAIxU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoV,aAApB,EAAmCpV,CAAC,EAApC,EAAwC;EACpC,YAAIqV,QAAQ,GAAGjO,SAAS,CAACpH,CAAD,CAAxB;EACA,YAAIiI,SAAS,GAAGE,YAAY,CAACoF,MAA7B;EACA,YAAImI,aAAJ;EACA,YAAI7P,KAAK,GAAG,CAAZ;;EACA,gBAAQ0P,YAAY,CAACvV,CAAD,CAApB;EACI,eAAK2V,UAAL;EACI,gBAAI,CAAC5M,SAAD,IAAcsM,QAAQ,YAAY/E,iBAAtC,EACI;EACJoF,YAAAA,aAAa,GAAG5P,KAAhB;EACAD,YAAAA,KAAK,GAAGyQ,QAAR;EACA;;EACJ,eAAKG,KAAL;EACIf,YAAAA,aAAa,GAAGxN,QAAQ,CAACyE,KAAzB;EACA9G,YAAAA,KAAK,GAAGyQ,QAAR;EACA;;EACJ,eAAKI,eAAL;EACIhB,YAAAA,aAAa,GAAG5P,KAAhB;EACAD,YAAAA,KAAK,GAAGwQ,SAAR;EACA;;EACJ,eAAKM,UAAL;EACIjB,YAAAA,aAAa,GAAGxN,QAAQ,CAACyE,KAAzB;EACA9G,YAAAA,KAAK,GAAGwQ,SAAR;EACA;;EACJ;EACIX,YAAAA,aAAa,GAAGxN,QAAQ,CAACyE,KAAzB;EACA,gBAAIiK,OAAO,GAAGJ,eAAe,CAACxW,CAAD,CAA7B;EACA6F,YAAAA,KAAK,GAAGwQ,SAAS,GAAGrU,IAAI,CAACH,GAAL,CAAS,CAAT,EAAY,IAAI+U,OAAO,CAAC9C,OAAR,GAAkB8C,OAAO,CAACrC,WAA1C,CAApB;EACA;EAvBR;;EAyBAL,QAAAA,IAAI,CAACM,UAAL,IAAmB3O,KAAnB;EACA,YAAIwP,QAAQ,YAAY/I,cAAxB,EACI,KAAKsJ,mBAAL,CAAyBP,QAAzB,EAAmCzN,QAAnC,EAA6CoN,SAA7C,EAAwDnP,KAAxD,EAA+D6P,aAA/D,EAA8ExB,IAAI,CAACuB,iBAAnF,EAAsGzV,CAAC,IAAI,CAA3G,EAA8GwV,UAA9G,EADJ,KAEK,IAAIH,QAAQ,YAAYxG,kBAAxB,EACD,KAAKyG,uBAAL,CAA6BD,QAA7B,EAAuCzN,QAAvC,EAAiDoN,SAAjD,EAA4DU,aAA5D,EAA2EQ,WAA3E,EADC,KAEA;EAGD,cAAInN,SAAS,IAAIsM,QAAQ,YAAY/E,iBAAjC,IAAsDoF,aAAa,IAAIxN,QAAQ,CAACyE,KAApF,EACI1E,SAAS,GAAGE,YAAY,CAAC+I,KAAzB;EACJmE,UAAAA,QAAQ,CAACzR,KAAT,CAAegE,QAAf,EAAyBuL,aAAzB,EAAwC6B,SAAxC,EAAmDhN,MAAnD,EAA2DnC,KAA3D,EAAkE6P,aAAlE,EAAiFzN,SAAjF;EACH;EACJ;EACJ;;EACD,QAAIoM,EAAE,CAACE,WAAH,GAAiB,CAArB,EACI,KAAKsB,WAAL,CAAiB3B,IAAjB,EAAuBY,aAAvB;EACJ,SAAK9M,MAAL,CAAY9H,MAAZ,GAAqB,CAArB;EACAgU,IAAAA,IAAI,CAACd,iBAAL,GAAyB0B,aAAzB;EACAZ,IAAAA,IAAI,CAACZ,aAAL,GAAqBY,IAAI,CAACP,SAA1B;EACA,WAAOhD,GAAP;EACH;;EACD2E,EAAAA,uBAAuB,CAACD,QAAD,EAAWzN,QAAX,EAAqBE,IAArB,EAA2BhC,KAA3B,EAAkCoQ,WAAlC,EAA+C;EAClE,QAAInI,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAeqH,QAAQ,CAACvH,SAAxB,CAAX;EACA,QAAI,CAACC,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;;EACJ,QAAI5E,IAAI,GAAGuN,QAAQ,CAAC7L,MAAT,CAAgB,CAAhB,CAAX,EAA+B;EAAE;EAC7B,UAAI1D,KAAK,IAAIoC,QAAQ,CAACyE,KAAlB,IAA2B7G,KAAK,IAAIoC,QAAQ,CAAC4E,KAAjD,EACI,KAAKkC,aAAL,CAAmBpH,QAAnB,EAA6BmG,IAA7B,EAAmCA,IAAI,CAAClB,IAAL,CAAUkC,cAA7C,EAA6DmH,WAA7D;EACP,KAHD,MAKI,KAAKlH,aAAL,CAAmBpH,QAAnB,EAA6BmG,IAA7B,EAAmCsH,QAAQ,CAACvG,eAAT,CAAyBzF,QAAQ,CAACO,OAAT,CAAiByL,QAAQ,CAAC7L,MAA1B,EAAkC1B,IAAlC,CAAzB,CAAnC,EAAsGoO,WAAtG,EAT8D;;;EAWlE,QAAInI,IAAI,CAACiI,eAAL,IAAwB,KAAK1D,YAAjC,EACIvE,IAAI,CAACiI,eAAL,GAAuB,KAAK1D,YAAL,GAAoByD,KAA3C;EACP;;EACD/G,EAAAA,aAAa,CAACpH,QAAD,EAAWmG,IAAX,EAAiBgB,cAAjB,EAAiCmH,WAAjC,EAA8C;EACvDnI,IAAAA,IAAI,CAACiB,aAAL,CAAmB,CAACD,cAAD,GAAkB,IAAlB,GAAyBnH,QAAQ,CAACqH,aAAT,CAAuBlB,IAAI,CAAClB,IAAL,CAAUoJ,KAAjC,EAAwClH,cAAxC,CAA5C;EACA,QAAImH,WAAJ,EACInI,IAAI,CAACiI,eAAL,GAAuB,KAAK1D,YAAL,GAAoBuE,OAA3C;EACP;;EACDjB,EAAAA,mBAAmB,CAACP,QAAD,EAAWzN,QAAX,EAAqBE,IAArB,EAA2BjC,KAA3B,EAAkCC,KAAlC,EAAyC2P,iBAAzC,EAA4DzV,CAA5D,EAA+DwV,UAA/D,EAA2E;EAC1F,QAAIA,UAAJ,EACIC,iBAAiB,CAACzV,CAAD,CAAjB,GAAuB,CAAvB;;EACJ,QAAI6F,KAAK,IAAI,CAAb,EAAgB;EACZwP,MAAAA,QAAQ,CAACzR,KAAT,CAAegE,QAAf,EAAyB,CAAzB,EAA4BE,IAA5B,EAAkC,IAAlC,EAAwC,CAAxC,EAA2ChC,KAA3C,EAAkDqC,YAAY,CAAC+I,KAA/D;EACA;EACH;;EACD,QAAI1E,IAAI,GAAG5E,QAAQ,CAAC6E,KAAT,CAAe4I,QAAQ,CAAC9I,SAAxB,CAAX;EACA,QAAI,CAACC,IAAI,CAACE,MAAV,EACI;EACJ,QAAIlD,MAAM,GAAG6L,QAAQ,CAAC7L,MAAtB;EACA,QAAIsN,EAAE,GAAG,CAAT;EAAA,QAAY1I,EAAE,GAAG,CAAjB;;EACA,QAAItG,IAAI,GAAG0B,MAAM,CAAC,CAAD,CAAjB,EAAsB;EAClB,cAAQ1D,KAAR;EACI,aAAKoC,QAAQ,CAACyE,KAAd;EACIH,UAAAA,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACK,IAAL,CAAUD,QAA1B;;EACJ;EACI;;EACJ,aAAK1E,QAAQ,CAAC4E,KAAd;EACIgK,UAAAA,EAAE,GAAGtK,IAAI,CAACI,QAAV;EACAwB,UAAAA,EAAE,GAAG5B,IAAI,CAACK,IAAL,CAAUD,QAAf;EAPR;EASH,KAVD,MAWK;EACDkK,MAAAA,EAAE,GAAGhR,KAAK,IAAIoC,QAAQ,CAACyE,KAAlB,GAA0BH,IAAI,CAACK,IAAL,CAAUD,QAApC,GAA+CJ,IAAI,CAACI,QAAzD;EACAwB,MAAAA,EAAE,GAAG5B,IAAI,CAACK,IAAL,CAAUD,QAAV,GAAqByI,QAAQ,CAACtJ,aAAT,CAAuBjE,IAAvB,CAA1B;EACH,KA1ByF;;;EA4B1F,QAAIiP,KAAK,GAAG,CAAZ;EAAA,QAAeC,IAAI,GAAG5I,EAAE,GAAG0I,EAA3B;EACAE,IAAAA,IAAI,IAAI,CAAC,SAAU,qBAAqBA,IAAI,GAAG,GAA7B,GAAoC,CAA7C,CAAD,IAAoD,GAA5D;;EACA,QAAIA,IAAI,IAAI,CAAZ,EAAe;EACXD,MAAAA,KAAK,GAAGtB,iBAAiB,CAACzV,CAAD,CAAzB;EACH,KAFD,MAGK;EACD,UAAIiX,SAAS,GAAG,CAAhB;EAAA,UAAmBC,QAAQ,GAAG,CAA9B;;EACA,UAAI1B,UAAJ,EAAgB;EACZyB,QAAAA,SAAS,GAAG,CAAZ;EACAC,QAAAA,QAAQ,GAAGF,IAAX;EACH,OAHD,MAIK;EACDC,QAAAA,SAAS,GAAGxB,iBAAiB,CAACzV,CAAD,CAA7B,CADC;;EAEDkX,QAAAA,QAAQ,GAAGzB,iBAAiB,CAACzV,CAAC,GAAG,CAAL,CAA5B,CAFC;EAGJ;;EACD,UAAIkT,OAAO,GAAG8D,IAAI,GAAG,CAArB;EAAA,UAAwBG,GAAG,GAAGF,SAAS,IAAI,CAA3C,CAVC;;EAYD,UAAItV,SAAS,CAACU,MAAV,CAAiB6U,QAAjB,KAA8BvV,SAAS,CAACU,MAAV,CAAiB2U,IAAjB,CAA9B,IAAwDhV,IAAI,CAACa,GAAL,CAASqU,QAAT,KAAsB,EAAlF,EAAsF;EAClF;EACA,YAAIlV,IAAI,CAACa,GAAL,CAASoU,SAAT,IAAsB,GAA1B,EACIA,SAAS,IAAI,MAAMtV,SAAS,CAACU,MAAV,CAAiB4U,SAAjB,CAAnB;EACJE,QAAAA,GAAG,GAAGjE,OAAN;EACH;;EACD6D,MAAAA,KAAK,GAAGC,IAAI,GAAGC,SAAP,GAAmBA,SAAS,GAAG,GAAvC,CAlBC;;EAmBD,UAAIE,GAAG,IAAIjE,OAAX,EACI6D,KAAK,IAAI,MAAMpV,SAAS,CAACU,MAAV,CAAiB4U,SAAjB,CAAf;EACJxB,MAAAA,iBAAiB,CAACzV,CAAD,CAAjB,GAAuB+W,KAAvB;EACH;;EACDtB,IAAAA,iBAAiB,CAACzV,CAAC,GAAG,CAAL,CAAjB,GAA2BgX,IAA3B;EACAxK,IAAAA,IAAI,CAACI,QAAL,GAAgBkK,EAAE,GAAGC,KAAK,GAAGlR,KAA7B;EACH;;EACDgQ,EAAAA,WAAW,CAACuB,KAAD,EAAQtC,aAAR,EAAuB;EAC9B,QAAIuC,cAAc,GAAGD,KAAK,CAACC,cAA3B;EAAA,QAA2CC,YAAY,GAAGF,KAAK,CAACE,YAAhE;EACA,QAAIjQ,QAAQ,GAAGiQ,YAAY,GAAGD,cAA9B;EACA,QAAIE,gBAAgB,GAAGH,KAAK,CAAC/D,SAAN,GAAkBhM,QAAzC,CAH8B;;EAK9B,QAAIW,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIhI,CAAC,GAAG,CAAR;EAAA,QAAWC,CAAC,GAAG+H,MAAM,CAAC9H,MAAtB;;EACA,WAAOF,CAAC,GAAGC,CAAX,EAAcD,CAAC,EAAf,EAAmB;EACf,UAAI8I,KAAK,GAAGd,MAAM,CAAChI,CAAD,CAAlB;EACA,UAAI8I,KAAK,CAAChB,IAAN,GAAayP,gBAAjB,EACI;EACJ,UAAIzO,KAAK,CAAChB,IAAN,GAAawP,YAAjB,EACI,SALW;;EAMf,WAAK9E,KAAL,CAAW1J,KAAX,CAAiBsO,KAAjB,EAAwBtO,KAAxB;EACH,KAd6B;EAiB9B;;;EACA,QAAI0O,QAAQ,GAAG,KAAf;EACA,QAAIJ,KAAK,CAACrP,IAAN,IAAc,CAAlB,EACIyP,QAAQ,GAAGnQ,QAAQ,KAAK,CAAb,IAAkBkQ,gBAAgB,GAAGH,KAAK,CAACzD,SAAN,GAAkBtM,QAAlE,CADJ,KAGImQ,QAAQ,GAAG1C,aAAa,IAAIwC,YAAjB,IAAiCF,KAAK,CAACjE,aAAN,GAAsBmE,YAAlE;;EACJ,QAAIE,QAAJ,EAAa;EACTJ,MAAAA,KAAK,CAACrP,IAAN;EACA,WAAKyK,KAAL,CAAWgF,QAAX,CAAoBJ,KAApB;EACH,KA1B6B;;;EA4B9B,WAAOpX,CAAC,GAAGC,CAAX,EAAcD,CAAC,EAAf,EAAmB;EACf,UAAI8I,KAAK,GAAGd,MAAM,CAAChI,CAAD,CAAlB;EACA,UAAI8I,KAAK,CAAChB,IAAN,GAAauP,cAAjB,EACI,SAHW;;EAIf,WAAK7E,KAAL,CAAW1J,KAAX,CAAiBsO,KAAjB,EAAwBtO,KAAxB;EACH;EACJ;EACD;EACJ;EACA;EACA;;;EACI2O,EAAAA,WAAW,GAAG;EACV,QAAIC,gBAAgB,GAAG,KAAKlF,KAAL,CAAWmF,aAAlC;EACA,SAAKnF,KAAL,CAAWmF,aAAX,GAA2B,IAA3B;;EACA,SAAK,IAAI3X,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKmS,MAAL,CAAYlS,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EACI,KAAK4X,UAAL,CAAgB5X,CAAhB;;EACJ,SAAKoS,MAAL,CAAYlS,MAAZ,GAAqB,CAArB;EACA,SAAKsS,KAAL,CAAWmF,aAAX,GAA2BD,gBAA3B;EACA,SAAKlF,KAAL,CAAW4B,KAAX;EACH;EACD;EACJ;EACA;EACA;;;EACIwD,EAAAA,UAAU,CAACC,UAAD,EAAa;EACnB,QAAIA,UAAU,IAAI,KAAKzF,MAAL,CAAYlS,MAA9B,EACI;EACJ,QAAIgT,OAAO,GAAG,KAAKd,MAAL,CAAYyF,UAAZ,CAAd;EACA,QAAI,CAAC3E,OAAL,EACI;EACJ,SAAKV,KAAL,CAAW1O,GAAX,CAAeoP,OAAf;EACA,SAAKc,SAAL,CAAed,OAAf;EACA,QAAIkE,KAAK,GAAGlE,OAAZ;;EACA,WAAO,IAAP,EAAa;EACT,UAAIgB,IAAI,GAAGkD,KAAK,CAACvD,UAAjB;EACA,UAAI,CAACK,IAAL,EACI;EACJ,WAAK1B,KAAL,CAAW1O,GAAX,CAAeoQ,IAAf;EACAkD,MAAAA,KAAK,CAACvD,UAAN,GAAmB,IAAnB;EACAuD,MAAAA,KAAK,CAACjD,QAAN,GAAiB,IAAjB;EACAiD,MAAAA,KAAK,GAAGlD,IAAR;EACH;;EACD,SAAK9B,MAAL,CAAYc,OAAO,CAAC2E,UAApB,IAAkC,IAAlC;EACA,SAAKrF,KAAL,CAAW4B,KAAX;EACH;;EACDR,EAAAA,UAAU,CAACqC,KAAD,EAAQ/C,OAAR,EAAiB4E,SAAjB,EAA4B;EAClC,QAAI5D,IAAI,GAAG,KAAK6D,aAAL,CAAmB9B,KAAnB,CAAX;EACA,SAAK7D,MAAL,CAAY6D,KAAZ,IAAqB/C,OAArB;EACAA,IAAAA,OAAO,CAAC8E,QAAR,GAAmB,IAAnB;;EACA,QAAI9D,IAAJ,EAAU;EACN,UAAI4D,SAAJ,EACI,KAAKtF,KAAL,CAAWsF,SAAX,CAAqB5D,IAArB;EACJhB,MAAAA,OAAO,CAACW,UAAR,GAAqBK,IAArB;EACAA,MAAAA,IAAI,CAACC,QAAL,GAAgBjB,OAAhB;EACAA,MAAAA,OAAO,CAACY,OAAR,GAAkB,CAAlB,CALM;;EAON,UAAII,IAAI,CAACL,UAAL,IAAmBK,IAAI,CAACK,WAAL,GAAmB,CAA1C,EACIrB,OAAO,CAACuB,cAAR,IAA0BzS,IAAI,CAACJ,GAAL,CAAS,CAAT,EAAYsS,IAAI,CAACJ,OAAL,GAAeI,IAAI,CAACK,WAAhC,CAA1B;EACJL,MAAAA,IAAI,CAACuB,iBAAL,CAAuBvV,MAAvB,GAAgC,CAAhC,CATM;EAUT;;EACD,SAAKsS,KAAL,CAAW3O,KAAX,CAAiBqP,OAAjB;EACH;EACD;EACJ;EACA;;;EACI+E,EAAAA,YAAY,CAACJ,UAAD,EAAaK,aAAb,EAA4BnQ,IAAI,GAAG,CAAnC,EAAsC;EAC9C,QAAIoN,SAAS,GAAG,KAAKtI,IAAL,CAAUsL,YAAV,CAAuBC,aAAvB,CAAqCF,aAArC,CAAhB;EACA,QAAI,CAAC/C,SAAL,EACI,MAAM,IAAI7N,KAAJ,CAAU,0BAA0B4Q,aAApC,CAAN;EACJ,WAAO,KAAKG,gBAAL,CAAsBR,UAAtB,EAAkC1C,SAAlC,EAA6CpN,IAA7C,CAAP;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;;;EACIsQ,EAAAA,gBAAgB,CAACR,UAAD,EAAa1C,SAAb,EAAwBpN,IAAI,GAAG,CAA/B,EAAkC;EAC9C,QAAI,CAACoN,SAAL,EACI,MAAM,IAAI7N,KAAJ,CAAU,2BAAV,CAAN;EACJ,QAAIwQ,SAAS,GAAG,IAAhB;EACA,QAAI5E,OAAO,GAAG,KAAK6E,aAAL,CAAmBF,UAAnB,CAAd;;EACA,QAAI3E,OAAJ,EAAa;EACT,UAAIA,OAAO,CAACI,aAAR,IAAyB,CAAC,CAA9B,EAAiC;EAC7B;EACA,aAAKlB,MAAL,CAAYyF,UAAZ,IAA0B3E,OAAO,CAACW,UAAlC;EACA,aAAKrB,KAAL,CAAWsF,SAAX,CAAqB5E,OAArB;EACA,aAAKV,KAAL,CAAW1O,GAAX,CAAeoP,OAAf;EACA,aAAKc,SAAL,CAAed,OAAf;EACAA,QAAAA,OAAO,GAAGA,OAAO,CAACW,UAAlB;EACAiE,QAAAA,SAAS,GAAG,KAAZ;EACH,OARD,MAUI,KAAK9D,SAAL,CAAed,OAAf;EACP;;EACD,QAAIkE,KAAK,GAAG,KAAKkB,UAAL,CAAgBT,UAAhB,EAA4B1C,SAA5B,EAAuCpN,IAAvC,EAA6CmL,OAA7C,CAAZ;EACA,SAAKU,UAAL,CAAgBiE,UAAhB,EAA4BT,KAA5B,EAAmCU,SAAnC;EACA,SAAKtF,KAAL,CAAW4B,KAAX;EACA,WAAOgD,KAAP;EACH;EACD;EACJ;EACA;;;EACImB,EAAAA,YAAY,CAACV,UAAD,EAAaK,aAAb,EAA4BnQ,IAAI,GAAG,CAAnC,EAAsCyL,KAAK,GAAG,CAA9C,EAAiD;EACzD,QAAI2B,SAAS,GAAG,KAAKtI,IAAL,CAAUsL,YAAV,CAAuBC,aAAvB,CAAqCF,aAArC,CAAhB;EACA,QAAI,CAAC/C,SAAL,EACI,MAAM,IAAI7N,KAAJ,CAAU,0BAA0B4Q,aAApC,CAAN;EACJ,WAAO,KAAKM,gBAAL,CAAsBX,UAAtB,EAAkC1C,SAAlC,EAA6CpN,IAA7C,EAAmDyL,KAAnD,CAAP;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIgF,EAAAA,gBAAgB,CAACX,UAAD,EAAa1C,SAAb,EAAwBpN,IAAI,GAAG,CAA/B,EAAkCyL,KAAK,GAAG,CAA1C,EAA6C;EACzD,QAAI,CAAC2B,SAAL,EACI,MAAM,IAAI7N,KAAJ,CAAU,2BAAV,CAAN;EACJ,QAAImR,IAAI,GAAG,KAAKV,aAAL,CAAmBF,UAAnB,CAAX;;EACA,QAAIY,IAAJ,EAAU;EACN,aAAOA,IAAI,CAAChF,IAAZ,EACIgF,IAAI,GAAGA,IAAI,CAAChF,IAAZ;EACP;;EACD,QAAI2D,KAAK,GAAG,KAAKkB,UAAL,CAAgBT,UAAhB,EAA4B1C,SAA5B,EAAuCpN,IAAvC,EAA6C0Q,IAA7C,CAAZ;;EACA,QAAI,CAACA,IAAL,EAAW;EACP,WAAK7E,UAAL,CAAgBiE,UAAhB,EAA4BT,KAA5B,EAAmC,IAAnC;EACA,WAAK5E,KAAL,CAAW4B,KAAX;EACH,KAHD,MAIK;EACDqE,MAAAA,IAAI,CAAChF,IAAL,GAAY2D,KAAZ;EACAA,MAAAA,KAAK,CAACY,QAAN,GAAiBS,IAAjB;EACA,UAAIjF,KAAK,IAAI,CAAb,EACIA,KAAK,IAAIiF,IAAI,CAACC,gBAAL,KAA0BtB,KAAK,CAAC7C,WAAzC;EACP;;EACD6C,IAAAA,KAAK,CAAC5D,KAAN,GAAcA,KAAd;EACA,WAAO4D,KAAP;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIuB,EAAAA,iBAAiB,CAACd,UAAD,EAAatD,WAAW,GAAG,CAA3B,EAA8B;EAC3C,QAAI6C,KAAK,GAAG,KAAKiB,gBAAL,CAAsBR,UAAtB,EAAkC1F,cAAc,CAACW,cAAf,EAAlC,EAAmE,KAAnE,CAAZ;EACAsE,IAAAA,KAAK,CAAC7C,WAAN,GAAoBA,WAApB;EACA6C,IAAAA,KAAK,CAACrD,QAAN,GAAiBQ,WAAjB;EACA,WAAO6C,KAAP;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIwB,EAAAA,iBAAiB,CAACf,UAAD,EAAatD,WAAW,GAAG,CAA3B,EAA8Bf,KAAK,GAAG,CAAtC,EAAyC;EACtD,QAAI4D,KAAK,GAAG,KAAKoB,gBAAL,CAAsBX,UAAtB,EAAkC1F,cAAc,CAACW,cAAf,EAAlC,EAAmE,KAAnE,EAA0EU,KAA1E,CAAZ;EACA,QAAIA,KAAK,IAAI,CAAb,EACI4D,KAAK,CAAC5D,KAAN,IAAe4D,KAAK,CAAC7C,WAAN,GAAoBA,WAAnC;EACJ6C,IAAAA,KAAK,CAAC7C,WAAN,GAAoBA,WAApB;EACA6C,IAAAA,KAAK,CAACrD,QAAN,GAAiBQ,WAAjB;EACA,WAAO6C,KAAP;EACH;EACD;EACJ;;;EACIyB,EAAAA,kBAAkB,CAACtE,WAAW,GAAG,CAAf,EAAkB;EAChC,QAAImD,gBAAgB,GAAG,KAAKlF,KAAL,CAAWmF,aAAlC;EACA,SAAKnF,KAAL,CAAWmF,aAAX,GAA2B,IAA3B;;EACA,SAAK,IAAI3X,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKmS,MAAL,CAAYlS,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAoD;EAChD,UAAIkT,OAAO,GAAG,KAAKd,MAAL,CAAYpS,CAAZ,CAAd;EACA,UAAIkT,OAAJ,EACI,KAAKyF,iBAAL,CAAuBzF,OAAO,CAAC2E,UAA/B,EAA2CtD,WAA3C;EACP;;EACD,SAAK/B,KAAL,CAAWmF,aAAX,GAA2BD,gBAA3B;EACA,SAAKlF,KAAL,CAAW4B,KAAX;EACH;;EACD2D,EAAAA,aAAa,CAAC9B,KAAD,EAAQ;EACjB,QAAIA,KAAK,GAAG,KAAK7D,MAAL,CAAYlS,MAAxB,EACI,OAAO,KAAKkS,MAAL,CAAY6D,KAAZ,CAAP;EACJ9R,IAAAA,KAAK,CAACa,mBAAN,CAA0B,KAAKoN,MAA/B,EAAuC6D,KAAK,GAAG,CAA/C,EAAkD,IAAlD;EACA,SAAK7D,MAAL,CAAYlS,MAAZ,GAAqB+V,KAAK,GAAG,CAA7B;EACA,WAAO,IAAP;EACH;EACD;;;EACAqC,EAAAA,UAAU,CAACT,UAAD,EAAa1C,SAAb,EAAwBpN,IAAxB,EAA8B0Q,IAA9B,EAAoC;EAC1C,QAAIrB,KAAK,GAAG,KAAKxE,cAAL,CAAoBnM,MAApB,EAAZ;EACA2Q,IAAAA,KAAK,CAACS,UAAN,GAAmBA,UAAnB;EACAT,IAAAA,KAAK,CAACjC,SAAN,GAAkBA,SAAlB;EACAiC,IAAAA,KAAK,CAACrP,IAAN,GAAaA,IAAb;EACAqP,IAAAA,KAAK,CAAC0B,YAAN,GAAqB,KAArB;EACA1B,IAAAA,KAAK,CAACb,cAAN,GAAuB,CAAvB;EACAa,IAAAA,KAAK,CAACjB,mBAAN,GAA4B,CAA5B;EACAiB,IAAAA,KAAK,CAAChB,kBAAN,GAA2B,CAA3B;EACAgB,IAAAA,KAAK,CAACC,cAAN,GAAuB,CAAvB;EACAD,IAAAA,KAAK,CAACE,YAAN,GAAqBnC,SAAS,CAAC9N,QAA/B;EACA+P,IAAAA,KAAK,CAACjE,aAAN,GAAsB,CAAC,CAAvB;EACAiE,IAAAA,KAAK,CAAChE,iBAAN,GAA0B,CAAC,CAA3B;EACAgE,IAAAA,KAAK,CAAC5D,KAAN,GAAc,CAAd;EACA4D,IAAAA,KAAK,CAACzD,SAAN,GAAkB,CAAlB;EACAyD,IAAAA,KAAK,CAAC/D,SAAN,GAAkB,CAAC,CAAnB;EACA+D,IAAAA,KAAK,CAAC9D,aAAN,GAAsB,CAAC,CAAvB;EACA8D,IAAAA,KAAK,CAACrD,QAAN,GAAiB5D,MAAM,CAACC,SAAxB;EACAgH,IAAAA,KAAK,CAAC/E,SAAN,GAAkB,CAAlB;EACA+E,IAAAA,KAAK,CAACvR,KAAN,GAAc,CAAd;EACAuR,IAAAA,KAAK,CAAC3C,cAAN,GAAuB,CAAvB;EACA2C,IAAAA,KAAK,CAACtD,OAAN,GAAgB,CAAhB;EACAsD,IAAAA,KAAK,CAAC7C,WAAN,GAAoB,CAACkE,IAAD,GAAQ,CAAR,GAAY,KAAK5L,IAAL,CAAUkM,MAAV,CAAiBN,IAAI,CAACtD,SAAtB,EAAiCA,SAAjC,CAAhC;EACAiC,IAAAA,KAAK,CAACxC,QAAN,GAAiB1M,QAAQ,CAAC6E,OAA1B;EACA,WAAOqK,KAAP;EACH;EACD;;;EACApD,EAAAA,SAAS,CAACoD,KAAD,EAAQ;EACb,QAAI3D,IAAI,GAAG2D,KAAK,CAAC3D,IAAjB;;EACA,WAAOA,IAAP,EAAa;EACT,WAAKjB,KAAL,CAAWwG,OAAX,CAAmBvF,IAAnB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACA,IAAZ;EACH;;EACD2D,IAAAA,KAAK,CAAC3D,IAAN,GAAa,IAAb;EACH;;EACDiB,EAAAA,kBAAkB,GAAG;EACjB,SAAK/B,iBAAL,GAAyB,KAAzB;EACA,SAAKD,WAAL,CAAiBvS,KAAjB;EACA,QAAIiS,MAAM,GAAG,KAAKA,MAAlB;;EACA,SAAK,IAAIpS,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmS,MAAM,CAAClS,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;EAC3C,UAAIoX,KAAK,GAAGhF,MAAM,CAACpS,CAAD,CAAlB;EACA,UAAI,CAACoX,KAAL,EACI;;EACJ,aAAOA,KAAK,CAACvD,UAAb,EACIuD,KAAK,GAAGA,KAAK,CAACvD,UAAd;;EACJ,SAAG;EACC,YAAI,CAACuD,KAAK,CAACjD,QAAP,IAAmBiD,KAAK,CAACxC,QAAN,IAAkB1M,QAAQ,CAACxI,GAAlD,EACI,KAAKuZ,WAAL,CAAiB7B,KAAjB;EACJA,QAAAA,KAAK,GAAGA,KAAK,CAACjD,QAAd;EACH,OAJD,QAISiD,KAJT;EAKH;EACJ;;EACD6B,EAAAA,WAAW,CAAC7B,KAAD,EAAQ;EACf,QAAI/C,EAAE,GAAG+C,KAAK,CAACjD,QAAf;EACA,QAAI/M,SAAS,GAAGgQ,KAAK,CAACjC,SAAN,CAAgB/N,SAAhC;EACA,QAAI8R,cAAc,GAAG9B,KAAK,CAACjC,SAAN,CAAgB/N,SAAhB,CAA0BlH,MAA/C;EACA,QAAIqV,YAAY,GAAG6B,KAAK,CAAC7B,YAAzB;EACAA,IAAAA,YAAY,CAACrV,MAAb,GAAsBgZ,cAAtB;EACA,QAAI1C,eAAe,GAAGY,KAAK,CAACZ,eAA5B;EACAA,IAAAA,eAAe,CAACtW,MAAhB,GAAyB,CAAzB;EACA,QAAIwS,WAAW,GAAG,KAAKA,WAAvB;;EACA,QAAI2B,EAAE,IAAIA,EAAE,CAACyE,YAAb,EAA2B;EACvB,WAAK,IAAI9Y,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkZ,cAApB,EAAoClZ,CAAC,EAArC,EACIuV,YAAY,CAACvV,CAAD,CAAZ,GAAkB0S,WAAW,CAAC7S,MAAZ,CAAmBuH,SAAS,CAACpH,CAAD,CAAT,CAAayH,cAAb,EAAnB,IAAoDkP,UAApD,GAAiED,eAAnF;;EACJ;EACH;;EACDyC,IAAAA,KAAK,EAAE,KAAK,IAAInZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkZ,cAApB,EAAoClZ,CAAC,EAArC,EAAyC;EAC5C,UAAIqV,QAAQ,GAAGjO,SAAS,CAACpH,CAAD,CAAxB;EACA,UAAI2H,GAAG,GAAG0N,QAAQ,CAAC5N,cAAT,EAAV;EACA,UAAI,CAACiL,WAAW,CAAC7S,MAAZ,CAAmB8H,GAAnB,CAAL,EACI4N,YAAY,CAACvV,CAAD,CAAZ,GAAkB2V,UAAlB,CADJ,KAEK,IAAI,CAACtB,EAAD,IAAOgB,QAAQ,YAAYxG,kBAA3B,IAAiDwG,QAAQ,YAAY/E,iBAArE,IACF+E,QAAQ,YAAYnF,aADlB,IACmC,CAACmE,EAAE,CAACc,SAAH,CAAazN,WAAb,CAAyBC,GAAzB,CADxC,EACuE;EACxE4N,QAAAA,YAAY,CAACvV,CAAD,CAAZ,GAAkByW,KAAlB;EACH,OAHI,MAIA;EACD,aAAK,IAAIhD,IAAI,GAAGY,EAAE,CAACF,QAAnB,EAA6BV,IAA7B,EAAmCA,IAAI,GAAGA,IAAI,CAACU,QAA/C,EAAyD;EACrD,cAAIV,IAAI,CAAC0B,SAAL,CAAezN,WAAf,CAA2BC,GAA3B,CAAJ,EACI;;EACJ,cAAIyP,KAAK,CAAC7C,WAAN,GAAoB,CAAxB,EAA2B;EACvBgB,YAAAA,YAAY,CAACvV,CAAD,CAAZ,GAAkBoZ,QAAlB;EACA5C,YAAAA,eAAe,CAACxW,CAAD,CAAf,GAAqByT,IAArB;EACA,qBAAS0F,KAAT;EACH;;EACD;EACH;;EACD5D,QAAAA,YAAY,CAACvV,CAAD,CAAZ,GAAkB2W,UAAlB;EACH;EACJ;EACJ;EACD;;;EACA0C,EAAAA,UAAU,CAACxB,UAAD,EAAa;EACnB,QAAIA,UAAU,IAAI,KAAKzF,MAAL,CAAYlS,MAA9B,EACI,OAAO,IAAP;EACJ,WAAO,KAAKkS,MAAL,CAAYyF,UAAZ,CAAP;EACH;EACD;;;EACAyB,EAAAA,WAAW,CAACC,QAAD,EAAW;EAClB,QAAI,CAACA,QAAL,EACI,MAAM,IAAIjS,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAKiL,SAAL,CAAezL,IAAf,CAAoByS,QAApB;EACH;EACD;;;EACAC,EAAAA,cAAc,CAACD,QAAD,EAAW;EACrB,QAAItD,KAAK,GAAG,KAAK1D,SAAL,CAAekH,OAAf,CAAuBF,QAAvB,CAAZ;EACA,QAAItD,KAAK,IAAI,CAAb,EACI,KAAK1D,SAAL,CAAemH,MAAf,CAAsBzD,KAAtB,EAA6B,CAA7B;EACP;EACD;;;EACA0D,EAAAA,cAAc,GAAG;EACb,SAAKpH,SAAL,CAAerS,MAAf,GAAwB,CAAxB;EACH;EACD;EACJ;EACA;;;EACI0Z,EAAAA,0BAA0B,GAAG;EACzB,SAAKpH,KAAL,CAAWrS,KAAX;EACH;;EA5rBuB;EA8rB5B;EACA;EACA;;EACO,MAAM0S,UAAN,CAAiB;EACpBtT,EAAAA,WAAW,GAAG;EACV;EACR;EACA;EACA;EACA;EACA;EACQ,SAAKqV,QAAL,GAAgB1M,QAAQ,CAAC6E,OAAzB;EACA,SAAKwI,YAAL,GAAoB,IAAIpQ,KAAJ,EAApB;EACA,SAAKqR,eAAL,GAAuB,IAAIrR,KAAJ,EAAvB;EACA,SAAKsQ,iBAAL,GAAyB,IAAItQ,KAAJ,EAAzB;EACH;;EACD0B,EAAAA,KAAK,GAAG;EACJ,SAAK4M,IAAL,GAAY,IAAZ;EACA,SAAKuE,QAAL,GAAgB,IAAhB;EACA,SAAKnE,UAAL,GAAkB,IAAlB;EACA,SAAKM,QAAL,GAAgB,IAAhB;EACA,SAAKgB,SAAL,GAAiB,IAAjB;EACA,SAAKoE,QAAL,GAAgB,IAAhB;EACA,SAAKhE,YAAL,CAAkBrV,MAAlB,GAA2B,CAA3B;EACA,SAAKsW,eAAL,CAAqBtW,MAArB,GAA8B,CAA9B;EACA,SAAKuV,iBAAL,CAAuBvV,MAAvB,GAAgC,CAAhC;EACH;EACD;EACJ;EACA;;;EACI6U,EAAAA,gBAAgB,GAAG;EACf;EACA,QAAI,KAAKhN,IAAL,GAAY,CAAhB,EAAmB;EACf,aAAO/F,IAAI,CAACJ,GAAL,CAAS,KAAK+R,SAAL,GAAiB,KAAK0D,cAA/B,EAA+C,KAAKC,YAApD,CAAP;EACH;;EACD,QAAI,KAAKvP,IAAL,GAAY,CAAhB,EAAmB;EACf,UAAIV,QAAQ,GAAG,KAAKiQ,YAAL,GAAoB,KAAKD,cAAxC;EACA,UAAIhQ,QAAQ,KAAK,CAAjB,EACI,OAAO,KAAKgQ,cAAZ;EACJ,aAAQ,KAAK1D,SAAL,GAAiBtM,QAAlB,GAA8B,KAAKgQ,cAA1C;EACH;;EACD,WAAOrV,IAAI,CAACJ,GAAL,CAAS,KAAK+R,SAAL,GAAiB,KAAK0D,cAA/B,EAA+C,KAAKC,YAApD,CAAP;EACH;;EACDuC,EAAAA,gBAAgB,CAAC1G,aAAD,EAAgB;EAC5B,SAAKA,aAAL,GAAqBA,aAArB;EACA,SAAKC,iBAAL,GAAyBD,aAAzB;EACH;EACD;EACJ;EACA;;;EACI2G,EAAAA,UAAU,GAAG;EACT,WAAO,KAAKnG,SAAL,IAAkB,KAAK2D,YAAL,GAAoB,KAAKD,cAAlD;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;;;EACI0C,EAAAA,uBAAuB,GAAG;EACtB,SAAKtE,iBAAL,CAAuBvV,MAAvB,GAAgC,CAAhC;EACH;;EACDwY,EAAAA,gBAAgB,GAAG;EACf,QAAIrR,QAAQ,GAAG,KAAKiQ,YAAL,GAAoB,KAAKD,cAAxC;;EACA,QAAIhQ,QAAQ,KAAK,CAAjB,EAAoB;EAChB,UAAI,KAAKU,IAAL,GAAY,CAAhB,EACI,OAAOV,QAAQ,IAAI,KAAM,KAAKsM,SAAL,GAAiBtM,QAAlB,GAA8B,CAAnC,CAAJ,CAAf,CAFY;;EAGhB,UAAI,KAAKsM,SAAL,GAAiBtM,QAArB,EACI,OAAOA,QAAP,CAJY;EAKnB;;EACD,WAAO,KAAKsM,SAAZ,CARe;EASlB;;EArEmB;EAuEjB,MAAMlB,UAAN,CAAiB;EACpBlT,EAAAA,WAAW,CAACya,SAAD,EAAY;EACnB,SAAKC,OAAL,GAAe,EAAf;EACA,SAAKtC,aAAL,GAAqB,KAArB;EACA,SAAKqC,SAAL,GAAiBA,SAAjB;EACH;;EACDnW,EAAAA,KAAK,CAACuT,KAAD,EAAQ;EACT,SAAK6C,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAACrW,KAA5B;EACA,SAAKoW,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACA,SAAK4C,SAAL,CAAerH,iBAAf,GAAmC,IAAnC;EACH;;EACDmF,EAAAA,SAAS,CAACV,KAAD,EAAQ;EACb,SAAK6C,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAACpC,SAA5B;EACA,SAAKmC,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACH;;EACDtT,EAAAA,GAAG,CAACsT,KAAD,EAAQ;EACP,SAAK6C,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAACpW,GAA5B;EACA,SAAKmW,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACA,SAAK4C,SAAL,CAAerH,iBAAf,GAAmC,IAAnC;EACH;;EACDqG,EAAAA,OAAO,CAAC5B,KAAD,EAAQ;EACX,SAAK6C,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAAClB,OAA5B;EACA,SAAKiB,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACH;;EACDI,EAAAA,QAAQ,CAACJ,KAAD,EAAQ;EACZ,SAAK6C,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAAC1C,QAA5B;EACA,SAAKyC,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACH;;EACDtO,EAAAA,KAAK,CAACsO,KAAD,EAAQtO,KAAR,EAAe;EAChB,SAAKmR,OAAL,CAAanT,IAAb,CAAkBoT,SAAS,CAACpR,KAA5B;EACA,SAAKmR,OAAL,CAAanT,IAAb,CAAkBsQ,KAAlB;EACA,SAAK6C,OAAL,CAAanT,IAAb,CAAkBgC,KAAlB;EACH;;EACDsL,EAAAA,KAAK,GAAG;EACJ,QAAI,KAAKuD,aAAT,EACI;EACJ,SAAKA,aAAL,GAAqB,IAArB;EACA,QAAIsC,OAAO,GAAG,KAAKA,OAAnB;EACA,QAAI1H,SAAS,GAAG,KAAKyH,SAAL,CAAezH,SAA/B;;EACA,SAAK,IAAIvS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGia,OAAO,CAAC/Z,MAA5B,EAAoCF,CAAC,IAAI,CAAzC,EAA4C;EACxC,UAAIkG,IAAI,GAAG+T,OAAO,CAACja,CAAD,CAAlB;EACA,UAAIoX,KAAK,GAAG6C,OAAO,CAACja,CAAC,GAAG,CAAL,CAAnB;;EACA,cAAQkG,IAAR;EACI,aAAKgU,SAAS,CAACrW,KAAf;EACI,cAAIuT,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAe1V,KAArC,EACIuT,KAAK,CAACmC,QAAN,CAAe1V,KAAf,CAAqBuT,KAArB;;EACJ,eAAK,IAAIpL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAcnI,KAAlB,EACI0O,SAAS,CAACvG,EAAD,CAAT,CAAcnI,KAAd,CAAoBuT,KAApB;;EACR;;EACJ,aAAK8C,SAAS,CAACpC,SAAf;EACI,cAAIV,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAezB,SAArC,EACIV,KAAK,CAACmC,QAAN,CAAezB,SAAf,CAAyBV,KAAzB;;EACJ,eAAK,IAAIpL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAc8L,SAAlB,EACIvF,SAAS,CAACvG,EAAD,CAAT,CAAc8L,SAAd,CAAwBV,KAAxB;;EACR;;EACJ,aAAK8C,SAAS,CAACpW,GAAf;EACI,cAAIsT,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAezV,GAArC,EACIsT,KAAK,CAACmC,QAAN,CAAezV,GAAf,CAAmBsT,KAAnB;;EACJ,eAAK,IAAIpL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAclI,GAAlB,EACIyO,SAAS,CAACvG,EAAD,CAAT,CAAclI,GAAd,CAAkBsT,KAAlB;;EACZ;;EACA,aAAK8C,SAAS,CAAClB,OAAf;EACI,cAAI5B,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAeP,OAArC,EACI5B,KAAK,CAACmC,QAAN,CAAeP,OAAf,CAAuB5B,KAAvB;;EACJ,eAAK,IAAIpL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAcgN,OAAlB,EACIzG,SAAS,CAACvG,EAAD,CAAT,CAAcgN,OAAd,CAAsB5B,KAAtB;;EACR,eAAK4C,SAAL,CAAepH,cAAf,CAA8BjM,IAA9B,CAAmCyQ,KAAnC;EACA;;EACJ,aAAK8C,SAAS,CAAC1C,QAAf;EACI,cAAIJ,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAe/B,QAArC,EACIJ,KAAK,CAACmC,QAAN,CAAe/B,QAAf,CAAwBJ,KAAxB;;EACJ,eAAK,IAAIpL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAcwL,QAAlB,EACIjF,SAAS,CAACvG,EAAD,CAAT,CAAcwL,QAAd,CAAuBJ,KAAvB;;EACR;;EACJ,aAAK8C,SAAS,CAACpR,KAAf;EACI,cAAIA,KAAK,GAAGmR,OAAO,CAACja,CAAC,KAAK,CAAP,CAAnB;EACA,cAAIoX,KAAK,CAACmC,QAAN,IAAkBnC,KAAK,CAACmC,QAAN,CAAezQ,KAArC,EACIsO,KAAK,CAACmC,QAAN,CAAezQ,KAAf,CAAqBsO,KAArB,EAA4BtO,KAA5B;;EACJ,eAAK,IAAIkD,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuG,SAAS,CAACrS,MAAhC,EAAwC8L,EAAE,EAA1C,EACI,IAAIuG,SAAS,CAACvG,EAAD,CAAT,CAAclD,KAAlB,EACIyJ,SAAS,CAACvG,EAAD,CAAT,CAAclD,KAAd,CAAoBsO,KAApB,EAA2BtO,KAA3B;;EACR;EA5CR;EA8CH;;EACD,SAAK3I,KAAL;EACA,SAAKwX,aAAL,GAAqB,KAArB;EACH;;EACDxX,EAAAA,KAAK,GAAG;EACJ,SAAK8Z,OAAL,CAAa/Z,MAAb,GAAsB,CAAtB;EACH;;EA9FmB;EAgGjB,IAAIga,SAAJ;;EACP,CAAC,UAAUA,SAAV,EAAqB;EAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,OAAD,CAAT,GAAqB,CAAtB,CAAT,GAAoC,OAApC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,WAAD,CAAT,GAAyB,CAA1B,CAAT,GAAwC,WAAxC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,KAAD,CAAT,GAAmB,CAApB,CAAT,GAAkC,KAAlC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAxB,CAAT,GAAsC,SAAtC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,UAAD,CAAT,GAAwB,CAAzB,CAAT,GAAuC,UAAvC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,OAAD,CAAT,GAAqB,CAAtB,CAAT,GAAoC,OAApC;EACH,CAPD,EAOGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAPZ;EAsBA;EACA;EACA;;EACO,MAAMvE,UAAU,GAAG,CAAnB;EACP;EACA;EACA;EACA;;EACO,MAAMc,KAAK,GAAG,CAAd;EACP;EACA;EACA;EACA;EACA;;EACO,MAAMC,eAAe,GAAG,CAAxB;EACP;EACA;EACA;EACA;EACA;;EACO,MAAMC,UAAU,GAAG,CAAnB;EACP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACO,MAAMyC,QAAQ,GAAG,CAAjB;EACA,MAAMrD,KAAK,GAAG,CAAd;EACA,MAAMc,OAAO,GAAG,CAAhB;EACP,IAAI9D,eAAe,GAAG,IAAtB;;ECr8BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;EACO,MAAMoH,kBAAN,CAAyB;EAC5B5a,EAAAA,WAAW,CAAC4Y,YAAD,EAAe;EACtB,SAAKiC,kBAAL,GAA0B,EAA1B;EACA;;EACA,SAAKC,UAAL,GAAkB,CAAlB;EACA,QAAI,CAAClC,YAAL,EACI,MAAM,IAAI7Q,KAAJ,CAAU,8BAAV,CAAN;EACJ,SAAK6Q,YAAL,GAAoBA,YAApB;EACH;EACD;EACJ;EACA;;;EACImC,EAAAA,MAAM,CAACC,QAAD,EAAWC,MAAX,EAAmBnT,QAAnB,EAA6B;EAC/B,QAAI6M,IAAI,GAAG,KAAKiE,YAAL,CAAkBC,aAAlB,CAAgCmC,QAAhC,CAAX;EACA,QAAI,CAACrG,IAAL,EACI,MAAM,IAAI5M,KAAJ,CAAU,0BAA0BiT,QAApC,CAAN;EACJ,QAAIlG,EAAE,GAAG,KAAK8D,YAAL,CAAkBC,aAAlB,CAAgCoC,MAAhC,CAAT;EACA,QAAI,CAACnG,EAAL,EACI,MAAM,IAAI/M,KAAJ,CAAU,0BAA0BkT,MAApC,CAAN;EACJ,SAAKC,UAAL,CAAgBvG,IAAhB,EAAsBG,EAAtB,EAA0BhN,QAA1B;EACH;EACD;EACJ;EACA;;;EACIoT,EAAAA,UAAU,CAACvG,IAAD,EAAOG,EAAP,EAAWhN,QAAX,EAAqB;EAC3B,QAAI,CAAC6M,IAAL,EACI,MAAM,IAAI5M,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAAC+M,EAAL,EACI,MAAM,IAAI/M,KAAJ,CAAU,oBAAV,CAAN;EACJ,QAAIoT,GAAG,GAAGxG,IAAI,CAAC/N,IAAL,GAAY,GAAZ,GAAkBkO,EAAE,CAAClO,IAA/B;EACA,SAAKiU,kBAAL,CAAwBM,GAAxB,IAA+BrT,QAA/B;EACH;EACD;EACJ;;;EACI0R,EAAAA,MAAM,CAAC7E,IAAD,EAAOG,EAAP,EAAW;EACb,QAAIqG,GAAG,GAAGxG,IAAI,CAAC/N,IAAL,GAAY,GAAZ,GAAkBkO,EAAE,CAAClO,IAA/B;EACA,QAAIxG,KAAK,GAAG,KAAKya,kBAAL,CAAwBM,GAAxB,CAAZ;EACA,WAAO/a,KAAK,KAAKgb,SAAV,GAAsB,KAAKN,UAA3B,GAAwC1a,KAA/C;EACH;;EAtC2B;;EC7BhC;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAK/E;;;;EAIY;;EACN,MAAO,qBAAP,SAAqC,gBAArC,CAAqD;EAG1D,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EAHD,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAR;EAIC;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,IAAI,GAAG,IAAI,qBAAJ,CAA0B,KAAK,IAA/B,CAAX;EACA,SAAK,MAAL,CAAY,IAAZ;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,WAAO,IAAP;EACA;;EAZyD;;ECrC3D;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAM/E;;EACM,MAAO,kBAAP,SAAkC,gBAAlC,CAAkD;EAUvD,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN,EADwB;;EAJzB;EAC0C;;EAC1C,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,MAAV,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,CAAlC,CAAR,CAEyB;EAExB;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,IAAI,GAAG,IAAI,kBAAJ,CAAuB,KAAK,IAA5B,CAAX;EACA,SAAK,MAAL,CAAY,IAAZ;EACA,IAAA,IAAI,CAAC,OAAL,GAAe,KAAK,OAApB;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,WAAO,IAAP;EACA;;EApBsD;;EClCxD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,MAAMib,OAAN,CAAc;EACjBrb,EAAAA,WAAW,CAACsb,KAAD,EAAQ;EACf,SAAKC,MAAL,GAAcD,KAAd;EACH;;EACDE,EAAAA,QAAQ,GAAG;EACP,WAAO,KAAKD,MAAZ;EACH;;EANgB;EAQd,IAAIE,aAAJ;;EACP,CAAC,UAAUA,aAAV,EAAyB;EACtBA,EAAAA,aAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,IAA5B,CAAb,GAAiD,SAAjD;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,IAA3B,CAAb,GAAgD,QAAhD;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,IAA3B,CAAb,GAAgD,QAAhD;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,sBAAD,CAAb,GAAwC,IAAzC,CAAb,GAA8D,sBAA9D;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,qBAAD,CAAb,GAAuC,IAAxC,CAAb,GAA6D,qBAA7D;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,qBAAD,CAAb,GAAuC,IAAxC,CAAb,GAA6D,qBAA7D;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,oBAAD,CAAb,GAAsC,IAAvC,CAAb,GAA4D,oBAA5D,CAPsB;EAQzB,CARD,EAQGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CARhB;;EASO,IAAIC,WAAJ;;EACP,CAAC,UAAUA,WAAV,EAAuB;EACpBA,EAAAA,WAAW,CAACA,WAAW,CAAC,gBAAD,CAAX,GAAgC,KAAjC,CAAX,GAAqD,gBAArD;EACAA,EAAAA,WAAW,CAACA,WAAW,CAAC,aAAD,CAAX,GAA6B,KAA9B,CAAX,GAAkD,aAAlD;EACAA,EAAAA,WAAW,CAACA,WAAW,CAAC,QAAD,CAAX,GAAwB,KAAzB,CAAX,GAA6C,QAA7C,CAHoB;EAIvB,CAJD,EAIGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CAJd;;EAKO,MAAMC,aAAN,CAAoB;EACvB3b,EAAAA,WAAW,GAAG;EACV,SAAK0D,CAAL,GAAS,CAAT;EACA,SAAKkY,CAAL,GAAS,CAAT;EACA,SAAKC,EAAL,GAAU,CAAV;EACA,SAAKC,EAAL,GAAU,CAAV;EACA,SAAKC,KAAL,GAAa,CAAb;EACA,SAAKC,MAAL,GAAc,CAAd;EACA,SAAKxZ,OAAL,GAAe,CAAf;EACA,SAAKyZ,OAAL,GAAe,CAAf;EACA,SAAKC,OAAL,GAAe,CAAf;EACA,SAAKC,aAAL,GAAqB,CAArB;EACA,SAAKC,cAAL,GAAsB,CAAtB;EACH;;EAbsB;;ECpD3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGO,MAAMC,YAAN,CAAmB;EACtBrc,EAAAA,WAAW,CAACsc,SAAD,EAAY;EACnB,SAAKC,KAAL,GAAa,IAAI3W,KAAJ,EAAb;EACA,SAAK4W,OAAL,GAAe,IAAI5W,KAAJ,EAAf;EACA,QAAI6W,MAAM,GAAG,IAAIC,kBAAJ,CAAuBJ,SAAvB,CAAb;EACA,QAAIzE,KAAK,GAAG,IAAIjS,KAAJ,CAAU,CAAV,CAAZ;EACA,QAAI+W,IAAI,GAAG,IAAX;EACA,QAAIC,MAAM,GAAG,IAAb;EACA,QAAIC,UAAU,GAAG,EAAjB;;EACAA,IAAAA,UAAU,CAAC,MAAD,CAAV,GAAqB,MAAM;EACvBF,MAAAA,IAAI,CAACZ,KAAL,GAAara,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAArB;EACA8E,MAAAA,IAAI,CAACX,MAAL,GAActa,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAtB;EACH,KAHD;;EAIAgF,IAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,MAAM;EAE5B,KAFD;;EAGAA,IAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,MAAM;EACzBF,MAAAA,IAAI,CAACG,SAAL,GAAiBlY,KAAK,CAAC8B,SAAN,CAAgB+U,aAAhB,EAA+B5D,KAAK,CAAC,CAAD,CAApC,CAAjB;EACA8E,MAAAA,IAAI,CAACI,SAAL,GAAiBnY,KAAK,CAAC8B,SAAN,CAAgB+U,aAAhB,EAA+B5D,KAAK,CAAC,CAAD,CAApC,CAAjB;EACH,KAHD;;EAIAgF,IAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,MAAM;EACzB,UAAIhF,KAAK,CAAC,CAAD,CAAL,CAASqC,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EACIyC,IAAI,CAACK,KAAL,GAAatB,WAAW,CAACuB,MAAzB;EACJ,UAAIpF,KAAK,CAAC,CAAD,CAAL,CAASqC,OAAT,CAAiB,GAAjB,KAAyB,CAAC,CAA9B,EACIyC,IAAI,CAACO,KAAL,GAAaxB,WAAW,CAACuB,MAAzB;EACP,KALD;;EAMAJ,IAAAA,UAAU,CAAC,KAAD,CAAV,GAAoB,MAAM;EACtBF,MAAAA,IAAI,CAACQ,GAAL,GAAWtF,KAAK,CAAC,CAAD,CAAL,IAAY,MAAvB;EACH,KAFD;;EAGA,QAAIuF,YAAY,GAAG,EAAnB;;EACAA,IAAAA,YAAY,CAAC,IAAD,CAAZ,GAAqB,MAAM;EACvBR,MAAAA,MAAM,CAAC5Z,CAAP,GAAWtB,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAnB;EACA+E,MAAAA,MAAM,CAACxZ,CAAP,GAAW1B,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAnB;EACH,KAHD;;EAIAuF,IAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuB,MAAM;EACzBR,MAAAA,MAAM,CAACb,KAAP,GAAera,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAvB;EACA+E,MAAAA,MAAM,CAACZ,MAAP,GAAgBta,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAxB;EACH,KAHD;;EAIAuF,IAAAA,YAAY,CAAC,QAAD,CAAZ,GAAyB,MAAM;EAC3BR,MAAAA,MAAM,CAAC5Z,CAAP,GAAWtB,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAnB;EACA+E,MAAAA,MAAM,CAACxZ,CAAP,GAAW1B,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAnB;EACA+E,MAAAA,MAAM,CAACb,KAAP,GAAera,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAvB;EACA+E,MAAAA,MAAM,CAACZ,MAAP,GAAgBta,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAxB;EACH,KALD;;EAMAuF,IAAAA,YAAY,CAAC,QAAD,CAAZ,GAAyB,MAAM;EAC3BR,MAAAA,MAAM,CAACX,OAAP,GAAiBva,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAzB;EACA+E,MAAAA,MAAM,CAACV,OAAP,GAAiBxa,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAzB;EACH,KAHD;;EAIAuF,IAAAA,YAAY,CAAC,MAAD,CAAZ,GAAuB,MAAM;EACzBR,MAAAA,MAAM,CAACT,aAAP,GAAuBza,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAA/B;EACA+E,MAAAA,MAAM,CAACR,cAAP,GAAwB1a,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAhC;EACH,KAHD;;EAIAuF,IAAAA,YAAY,CAAC,SAAD,CAAZ,GAA0B,MAAM;EAC5BR,MAAAA,MAAM,CAACX,OAAP,GAAiBva,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAzB;EACA+E,MAAAA,MAAM,CAACV,OAAP,GAAiBxa,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAzB;EACA+E,MAAAA,MAAM,CAACT,aAAP,GAAuBza,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAA/B;EACA+E,MAAAA,MAAM,CAACR,cAAP,GAAwB1a,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAhC;EACH,KALD;;EAMAuF,IAAAA,YAAY,CAAC,QAAD,CAAZ,GAAyB,MAAM;EAC3B,UAAIhd,KAAK,GAAGyX,KAAK,CAAC,CAAD,CAAjB;EACA,UAAIzX,KAAK,IAAI,MAAb,EACIwc,MAAM,CAACpa,OAAP,GAAiB,EAAjB,CADJ,KAEK,IAAIpC,KAAK,IAAI,OAAb,EACDwc,MAAM,CAACpa,OAAP,GAAiBd,QAAQ,CAACtB,KAAD,CAAzB;EACP,KAND;;EAOAgd,IAAAA,YAAY,CAAC,OAAD,CAAZ,GAAwB,MAAM;EAC1BR,MAAAA,MAAM,CAAClG,KAAP,GAAehV,QAAQ,CAACmW,KAAK,CAAC,CAAD,CAAN,CAAvB;EACH,KAFD;;EAGA,QAAIwF,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAAX,CAnEmB;;EAqEnB,WAAOD,IAAI,IAAIA,IAAI,CAACE,IAAL,GAAY5c,MAAZ,IAAsB,CAArC,EACI0c,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAAP,CAtEe;;;EAwEnB,WAAO,IAAP,EAAa;EACT,UAAI,CAACD,IAAD,IAASA,IAAI,CAACE,IAAL,GAAY5c,MAAZ,IAAsB,CAAnC,EACI;EACJ,UAAI8b,MAAM,CAACe,SAAP,CAAiB3F,KAAjB,EAAwBwF,IAAxB,KAAiC,CAArC,EACI,MAJK;;EAKTA,MAAAA,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAAP;EACH,KA9EkB;;;EAgFnB,QAAIG,KAAK,GAAG,IAAZ;EACA,QAAIld,MAAM,GAAG,IAAb;;EACA,WAAO,IAAP,EAAa;EACT,UAAI8c,IAAI,KAAK,IAAb,EACI;;EACJ,UAAIA,IAAI,CAACE,IAAL,GAAY5c,MAAZ,IAAsB,CAA1B,EAA6B;EACzBgc,QAAAA,IAAI,GAAG,IAAP;EACAU,QAAAA,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAAP;EACH,OAHD,MAIK,IAAI,CAACX,IAAL,EAAW;EACZA,QAAAA,IAAI,GAAG,IAAIe,gBAAJ,EAAP;EACAf,QAAAA,IAAI,CAAC/V,IAAL,GAAYyW,IAAI,CAACE,IAAL,EAAZ;;EACA,eAAO,IAAP,EAAa;EACT,cAAId,MAAM,CAACe,SAAP,CAAiB3F,KAAjB,EAAwBwF,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAA/B,KAAqD,CAAzD,EACI;EACJ,cAAIK,KAAK,GAAGd,UAAU,CAAChF,KAAK,CAAC,CAAD,CAAN,CAAtB;EACA,cAAI8F,KAAJ,EACIA,KAAK;EACZ;;EACD,aAAKpB,KAAL,CAAWhV,IAAX,CAAgBoV,IAAhB;EACH,OAXI,MAYA;EACDC,QAAAA,MAAM,GAAG,IAAIgB,kBAAJ,EAAT;EACAhB,QAAAA,MAAM,CAACD,IAAP,GAAcA,IAAd;EACAC,QAAAA,MAAM,CAAChW,IAAP,GAAcyW,IAAd;;EACA,eAAO,IAAP,EAAa;EACT,cAAIQ,KAAK,GAAGpB,MAAM,CAACe,SAAP,CAAiB3F,KAAjB,EAAwBwF,IAAI,GAAGZ,MAAM,CAACa,QAAP,EAA/B,CAAZ;EACA,cAAIO,KAAK,IAAI,CAAb,EACI;EACJ,cAAIF,KAAK,GAAGP,YAAY,CAACvF,KAAK,CAAC,CAAD,CAAN,CAAxB;EACA,cAAI8F,KAAJ,EACIA,KAAK,GADT,KAEK;EACD,gBAAI,CAACF,KAAL,EAAY;EACRA,cAAAA,KAAK,GAAG,EAAR;EACAld,cAAAA,MAAM,GAAG,EAAT;EACH;;EACDkd,YAAAA,KAAK,CAAClW,IAAN,CAAWsQ,KAAK,CAAC,CAAD,CAAhB;EACA,gBAAIiG,WAAW,GAAG,EAAlB;;EACA,iBAAK,IAAIrd,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGod,KAApB,EAA2Bpd,CAAC,EAA5B,EACIqd,WAAW,CAACvW,IAAZ,CAAiB7F,QAAQ,CAACmW,KAAK,CAACpX,CAAC,GAAG,CAAL,CAAN,CAAzB;;EACJF,YAAAA,MAAM,CAACgH,IAAP,CAAYuW,WAAZ;EACH;EACJ;;EACD,YAAIlB,MAAM,CAACT,aAAP,IAAwB,CAAxB,IAA6BS,MAAM,CAACR,cAAP,IAAyB,CAA1D,EAA6D;EACzDQ,UAAAA,MAAM,CAACT,aAAP,GAAuBS,MAAM,CAACb,KAA9B;EACAa,UAAAA,MAAM,CAACR,cAAP,GAAwBQ,MAAM,CAACZ,MAA/B;EACH;;EACD,YAAIyB,KAAK,IAAIA,KAAK,CAAC9c,MAAN,GAAe,CAA5B,EAA+B;EAC3Bic,UAAAA,MAAM,CAACa,KAAP,GAAeA,KAAf;EACAb,UAAAA,MAAM,CAACrc,MAAP,GAAgBA,MAAhB;EACAkd,UAAAA,KAAK,GAAG,IAAR;EACAld,UAAAA,MAAM,GAAG,IAAT;EACH;;EACDqc,QAAAA,MAAM,CAAClZ,CAAP,GAAWkZ,MAAM,CAAC5Z,CAAP,GAAW2Z,IAAI,CAACZ,KAA3B;EACAa,QAAAA,MAAM,CAAChB,CAAP,GAAWgB,MAAM,CAACxZ,CAAP,GAAWuZ,IAAI,CAACX,MAA3B;;EACA,YAAIY,MAAM,CAACpa,OAAP,IAAkB,EAAtB,EAA0B;EACtBoa,UAAAA,MAAM,CAACf,EAAP,GAAY,CAACe,MAAM,CAAC5Z,CAAP,GAAW4Z,MAAM,CAACZ,MAAnB,IAA6BW,IAAI,CAACZ,KAA9C;EACAa,UAAAA,MAAM,CAACd,EAAP,GAAY,CAACc,MAAM,CAACxZ,CAAP,GAAWwZ,MAAM,CAACb,KAAnB,IAA4BY,IAAI,CAACX,MAA7C;EACH,SAHD,MAIK;EACDY,UAAAA,MAAM,CAACf,EAAP,GAAY,CAACe,MAAM,CAAC5Z,CAAP,GAAW4Z,MAAM,CAACb,KAAnB,IAA4BY,IAAI,CAACZ,KAA7C;EACAa,UAAAA,MAAM,CAACd,EAAP,GAAY,CAACc,MAAM,CAACxZ,CAAP,GAAWwZ,MAAM,CAACZ,MAAnB,IAA6BW,IAAI,CAACX,MAA9C;EACH;;EACD,aAAKQ,OAAL,CAAajV,IAAb,CAAkBqV,MAAlB;EACH;EACJ;EACJ;;EACDmB,EAAAA,UAAU,CAACnX,IAAD,EAAO;EACb,SAAK,IAAInG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK+b,OAAL,CAAa7b,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;EAC1C,UAAI,KAAK+b,OAAL,CAAa/b,CAAb,EAAgBmG,IAAhB,IAAwBA,IAA5B,EAAkC;EAC9B,eAAO,KAAK4V,OAAL,CAAa/b,CAAb,CAAP;EACH;EACJ;;EACD,WAAO,IAAP;EACH;;EACDud,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAI,GAAG,EAAtB,EAA0B;EACjC,SAAK,IAAIvB,IAAT,IAAiB,KAAKJ,KAAtB,EACII,IAAI,CAACwB,UAAL,CAAgBF,YAAY,CAACG,GAAb,CAAiBF,IAAjB,CAAhB;EACP;;EACDzE,EAAAA,OAAO,GAAG;EACN,SAAK,IAAIhZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK8b,KAAL,CAAW5b,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,WAAK8b,KAAL,CAAW9b,CAAX,EAAc4d,OAAd,CAAsB5E,OAAtB;EACH;EACJ;;EArKqB;;EAuK1B,MAAMiD,kBAAN,CAAyB;EACrB1c,EAAAA,WAAW,CAACse,IAAD,EAAO;EACd,SAAK5H,KAAL,GAAa,CAAb;EACA,SAAK6H,KAAL,GAAaD,IAAI,CAACE,KAAL,CAAW,YAAX,CAAb;EACH;;EACDlB,EAAAA,QAAQ,GAAG;EACP,QAAI,KAAK5G,KAAL,IAAc,KAAK6H,KAAL,CAAW5d,MAA7B,EACI,OAAO,IAAP;EACJ,WAAO,KAAK4d,KAAL,CAAW,KAAK7H,KAAL,EAAX,CAAP;EACH;;EACD8G,EAAAA,SAAS,CAAC3F,KAAD,EAAQwF,IAAR,EAAc;EACnB,QAAI,CAACA,IAAL,EACI,OAAO,CAAP;EACJA,IAAAA,IAAI,GAAGA,IAAI,CAACE,IAAL,EAAP;EACA,QAAIF,IAAI,CAAC1c,MAAL,IAAe,CAAnB,EACI,OAAO,CAAP;EACJ,QAAI8d,KAAK,GAAGpB,IAAI,CAACnD,OAAL,CAAa,GAAb,CAAZ;EACA,QAAIuE,KAAK,IAAI,CAAC,CAAd,EACI,OAAO,CAAP;EACJ5G,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWwF,IAAI,CAAC5b,MAAL,CAAY,CAAZ,EAAegd,KAAf,EAAsBlB,IAAtB,EAAX;;EACA,SAAK,IAAI9c,CAAC,GAAG,CAAR,EAAWie,SAAS,GAAGD,KAAK,GAAG,CAApC,GAAwChe,CAAC,EAAzC,EAA6C;EACzC,UAAIke,KAAK,GAAGtB,IAAI,CAACnD,OAAL,CAAa,GAAb,EAAkBwE,SAAlB,CAAZ;;EACA,UAAIC,KAAK,IAAI,CAAC,CAAd,EAAiB;EACb9G,QAAAA,KAAK,CAACpX,CAAD,CAAL,GAAW4c,IAAI,CAAC5b,MAAL,CAAYid,SAAZ,EAAuBnB,IAAvB,EAAX;EACA,eAAO9c,CAAP;EACH;;EACDoX,MAAAA,KAAK,CAACpX,CAAD,CAAL,GAAW4c,IAAI,CAAC5b,MAAL,CAAYid,SAAZ,EAAuBC,KAAK,GAAGD,SAA/B,EAA0CnB,IAA1C,EAAX;EACAmB,MAAAA,SAAS,GAAGC,KAAK,GAAG,CAApB;EACA,UAAIle,CAAC,IAAI,CAAT,EACI,OAAO,CAAP;EACP;EACJ;;EA/BoB;;EAiClB,MAAMid,gBAAN,CAAuB;EAC1B1d,EAAAA,WAAW,GAAG;EACV,SAAK8c,SAAL,GAAiBrB,aAAa,CAACmD,OAA/B;EACA,SAAK7B,SAAL,GAAiBtB,aAAa,CAACmD,OAA/B;EACA,SAAK5B,KAAL,GAAatB,WAAW,CAACmD,WAAzB;EACA,SAAK3B,KAAL,GAAaxB,WAAW,CAACmD,WAAzB;EACH;;EACDV,EAAAA,UAAU,CAACE,OAAD,EAAU;EAChB,SAAKA,OAAL,GAAeA,OAAf;EACAA,IAAAA,OAAO,CAACS,UAAR,CAAmB,KAAKhC,SAAxB,EAAmC,KAAKC,SAAxC;EACAsB,IAAAA,OAAO,CAACU,QAAR,CAAiB,KAAK/B,KAAtB,EAA6B,KAAKE,KAAlC;EACH;;EAXyB;EAavB,MAAMU,kBAAN,SAAiCjC,aAAjC,CAA+C;;ECnPtD;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAO/E;;;EAG+F;;EACzF,MAAO,cAAP,SAA8B,gBAA9B,CAA8C;EAoCnD,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EApBD;;EACA,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAR;EAgBA,SAAA,SAAA,GAAY,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAZ;EAIC;EAED;EACa;;;EACb,EAAA,SAAS,GAAA;EACR,QAAI,SAAS,GAAG,KAAK,SAArB;EACA,QAAI,CAAC,KAAK,GAAN,IAAa,KAAK,GAAL,CAAS,MAAT,IAAmB,SAAS,CAAC,MAA9C,EAAsD,KAAK,GAAL,GAAW,KAAK,CAAC,aAAN,CAAoB,SAAS,CAAC,MAA9B,CAAX;EACtD,QAAI,GAAG,GAAG,KAAK,GAAf;EACA,QAAI,CAAC,GAAG,KAAK,GAAL,CAAS,MAAjB;EACA,QAAI,CAAC,GAAG,KAAK,MAAL,CAAY,CAApB;EAAA,QAAuB,CAAC,GAAG,KAAK,MAAL,CAAY,CAAvC;EAAA,QAA0C,KAAK,GAAG,CAAlD;EAAA,QAAqD,MAAM,GAAG,CAA9D;;EACA,QAAI,KAAK,MAAL,YAAuB,kBAA3B,EAA+C;EAC9C,UAAI,MAAM,GAAG,KAAK,MAAlB;EAAA,UAA0B,KAAK,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAoB,QAApB,EAAlC;EACA,UAAI,YAAY,GAAG,KAAK,CAAC,KAAzB;EAAA,UAAgC,aAAa,GAAG,KAAK,CAAC,MAAtD;;EACA,cAAQ,MAAM,CAAC,OAAf;EACC,aAAK,EAAL;EACC,UAAA,CAAC,IAAI,CAAC,MAAM,CAAC,cAAP,GAAwB,MAAM,CAAC,OAA/B,GAAyC,MAAM,CAAC,MAAjD,IAA2D,YAAhE;EACA,UAAA,CAAC,IAAI,CAAC,MAAM,CAAC,aAAP,GAAuB,MAAM,CAAC,OAA9B,GAAwC,MAAM,CAAC,KAAhD,IAAyD,aAA9D;EACA,UAAA,KAAK,GAAG,MAAM,CAAC,cAAP,GAAwB,YAAhC;EACA,UAAA,MAAM,GAAG,MAAM,CAAC,aAAP,GAAuB,aAAhC;;EACA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;EAC9B,YAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAmB,KAAhC;EACA,YAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,CAAD,CAAd,IAAqB,MAAtC;EACA;;EACD;;EACD,aAAK,GAAL;EACC,UAAA,CAAC,IAAI,CAAC,MAAM,CAAC,aAAP,GAAuB,MAAM,CAAC,OAA9B,GAAwC,MAAM,CAAC,KAAhD,IAAyD,YAA9D;EACA,UAAA,CAAC,IAAI,MAAM,CAAC,OAAP,GAAiB,aAAtB;EACA,UAAA,KAAK,GAAG,MAAM,CAAC,aAAP,GAAuB,YAA/B;EACA,UAAA,MAAM,GAAG,MAAM,CAAC,cAAP,GAAwB,aAAjC;;EACA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;EAC9B,YAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,CAAD,CAAd,IAAqB,KAAlC;EACA,YAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAL,CAAd,IAAyB,MAA1C;EACA;;EACD;;EACD,aAAK,GAAL;EACC,UAAA,CAAC,IAAI,MAAM,CAAC,OAAP,GAAiB,YAAtB;EACA,UAAA,CAAC,IAAI,MAAM,CAAC,OAAP,GAAiB,aAAtB;EACA,UAAA,KAAK,GAAG,MAAM,CAAC,cAAP,GAAwB,YAAhC;EACA,UAAA,MAAM,GAAG,MAAM,CAAC,aAAP,GAAuB,aAAhC;;EACA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;EAC9B,YAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAL,CAAd,IAAyB,KAAtC;EACA,YAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,GAAG,SAAS,CAAC,CAAD,CAAT,GAAe,MAAhC;EACA;;EACD;EA9BF;;EAgCA,MAAA,CAAC,IAAI,MAAM,CAAC,OAAP,GAAiB,YAAtB;EACA,MAAA,CAAC,IAAI,CAAC,MAAM,CAAC,cAAP,GAAwB,MAAM,CAAC,OAA/B,GAAyC,MAAM,CAAC,MAAjD,IAA2D,aAAhE;EACA,MAAA,KAAK,GAAG,MAAM,CAAC,aAAP,GAAuB,YAA/B;EACA,MAAA,MAAM,GAAG,MAAM,CAAC,cAAP,GAAwB,aAAjC;EACA,KAvCD,MAuCO,IAAI,CAAC,KAAK,MAAV,EAAkB;EACxB,MAAA,CAAC,GAAG,CAAC,GAAG,CAAR;EACA,MAAA,KAAK,GAAG,MAAM,GAAG,CAAjB;EACA,KAHM,MAGA;EACN,MAAA,KAAK,GAAG,KAAK,MAAL,CAAY,EAAZ,GAAiB,CAAzB;EACA,MAAA,MAAM,GAAG,KAAK,MAAL,CAAY,EAAZ,GAAiB,CAA1B;EACA;;EAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,IAAI,CAA5B,EAA+B;EAC9B,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,GAAG,SAAS,CAAC,CAAD,CAAT,GAAe,KAA5B;EACA,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAmB,MAApC;EACA;EACD;EAED;;EAE+G;;;EAC/G,EAAA,aAAa,GAAA;EACZ,WAAO,KAAK,UAAZ;EACA;EAED;;;EACA,EAAA,aAAa,CAAE,UAAF,EAA4B;EACxC,SAAK,UAAL,GAAkB,UAAlB;;EACA,QAAI,UAAJ,EAAgB;EACf,WAAK,KAAL,GAAa,UAAU,CAAC,KAAxB;EACA,WAAK,QAAL,GAAgB,UAAU,CAAC,QAA3B;EACA,WAAK,mBAAL,GAA2B,UAAU,CAAC,mBAAtC;EACA,WAAK,SAAL,GAAiB,UAAU,CAAC,SAA5B;EACA,WAAK,SAAL,GAAiB,UAAU,CAAC,SAA5B;EACA,WAAK,UAAL,GAAkB,UAAU,CAAC,UAA7B;EACA,WAAK,mBAAL,GAA2B,UAAU,CAAC,mBAAtC;EACA;EACD;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,KAAK,UAAT,EAAqB,OAAO,KAAK,aAAL,EAAP;EAErB,QAAI,IAAI,GAAG,IAAI,cAAJ,CAAmB,KAAK,IAAxB,CAAX;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,IAAI,CAAC,IAAL,GAAY,KAAK,IAAjB;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EAEA,SAAK,MAAL,CAAY,IAAZ;EACA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,KAAJ,CAAkB,KAAK,SAAL,CAAe,MAAjC,CAAjB;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,SAArB,EAAgC,CAAhC,EAAmC,IAAI,CAAC,SAAxC,EAAmD,CAAnD,EAAsD,KAAK,SAAL,CAAe,MAArE;EACA,IAAA,IAAI,CAAC,GAAL,GAAW,IAAI,KAAJ,CAAkB,KAAK,GAAL,CAAS,MAA3B,CAAX;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,GAArB,EAA0B,CAA1B,EAA6B,IAAI,CAAC,GAAlC,EAAuC,CAAvC,EAA0C,KAAK,GAAL,CAAS,MAAnD;EACA,IAAA,IAAI,CAAC,SAAL,GAAiB,IAAI,KAAJ,CAAkB,KAAK,SAAL,CAAe,MAAjC,CAAjB;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,SAArB,EAAgC,CAAhC,EAAmC,IAAI,CAAC,SAAxC,EAAmD,CAAnD,EAAsD,KAAK,SAAL,CAAe,MAArE;EACA,IAAA,IAAI,CAAC,UAAL,GAAkB,KAAK,UAAvB,CAfG;;EAkBH,QAAI,KAAK,KAAT,EAAgB;EACf,MAAA,IAAI,CAAC,KAAL,GAAa,IAAI,KAAJ,CAAkB,KAAK,KAAL,CAAW,MAA7B,CAAb;EACA,MAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,KAArB,EAA4B,CAA5B,EAA+B,IAAI,CAAC,KAApC,EAA2C,CAA3C,EAA8C,KAAK,KAAL,CAAW,MAAzD;EACA;;EACD,IAAA,IAAI,CAAC,KAAL,GAAa,KAAK,KAAlB;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EAEA,WAAO,IAAP;EACA;EAED;;;EACA,EAAA,aAAa,GAAA;EACZ,QAAI,IAAI,GAAG,IAAI,cAAJ,CAAmB,KAAK,IAAxB,CAAX;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,IAAI,CAAC,IAAL,GAAY,KAAK,IAAjB;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,IAAA,IAAI,CAAC,gBAAL,GAAwB,KAAK,gBAA7B;EACA,IAAA,IAAI,CAAC,aAAL,CAAmB,KAAK,UAAL,GAAkB,KAAK,UAAvB,GAAoC,IAAvD;EACA,IAAA,IAAI,CAAC,SAAL;EACA,WAAO,IAAP;EACA;;EAhKkD;;ECtCpD;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAK/E;;EAE8G;;EACxG,MAAO,cAAP,SAA8B,gBAA9B,CAA8C;EAgBnD,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EAZD;;EACA,SAAA,MAAA,GAAS,KAAT;EAEA;EAC2F;;EAC3F,SAAA,aAAA,GAAgB,KAAhB;EAEA;EAC0B;;EAC1B,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAR;EAIC;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,IAAI,GAAG,IAAI,cAAJ,CAAmB,KAAK,IAAxB,CAAX;EACA,SAAK,MAAL,CAAY,IAAZ;EACA,IAAA,IAAI,CAAC,OAAL,GAAe,IAAI,KAAJ,CAAkB,KAAK,OAAL,CAAa,MAA/B,CAAf;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,OAArB,EAA8B,CAA9B,EAAiC,IAAI,CAAC,OAAtC,EAA+C,CAA/C,EAAkD,KAAK,OAAL,CAAa,MAA/D;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,MAAd;EACA,IAAA,IAAI,CAAC,aAAL,GAAqB,KAAK,aAA1B;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,WAAO,IAAP;EACA;;EA7BkD;;ECnCpD;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAM/E;;;;EAI2G;;EACrG,MAAO,eAAP,SAA+B,gBAA/B,CAA+C;EAOpD,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EALD;EAC0C;;EAC1C,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EAAgB,IAAhB,EAAsB,CAAtB,EAAyB,CAAzB,CAAR;EAIC;;EAED,EAAA,oBAAoB,CAAE,IAAF,EAAc,KAAd,EAA4B;EAC/C,IAAA,KAAK,CAAC,CAAN,GAAU,KAAK,CAAL,GAAS,IAAI,CAAC,CAAd,GAAkB,KAAK,CAAL,GAAS,IAAI,CAAC,CAAhC,GAAoC,IAAI,CAAC,MAAnD;EACA,IAAA,KAAK,CAAC,CAAN,GAAU,KAAK,CAAL,GAAS,IAAI,CAAC,CAAd,GAAkB,KAAK,CAAL,GAAS,IAAI,CAAC,CAAhC,GAAoC,IAAI,CAAC,MAAnD;EACA,WAAO,KAAP;EACA;;EAED,EAAA,oBAAoB,CAAE,IAAF,EAAY;EAC/B,QAAI,GAAG,GAAG,SAAS,CAAC,MAAV,CAAiB,KAAK,QAAtB,CAAV;EAAA,QAA2C,GAAG,GAAG,SAAS,CAAC,MAAV,CAAiB,KAAK,QAAtB,CAAjD;EACA,QAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAX,GAAe,GAAG,GAAG,IAAI,CAAC,CAAlC;EACA,QAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAX,GAAe,GAAG,GAAG,IAAI,CAAC,CAAlC;EACA,WAAO,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,SAAS,CAAC,MAApC;EACA;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,IAAI,GAAG,IAAI,eAAJ,CAAoB,KAAK,IAAzB,CAAX;EACA,IAAA,IAAI,CAAC,CAAL,GAAS,KAAK,CAAd;EACA,IAAA,IAAI,CAAC,CAAL,GAAS,KAAK,CAAd;EACA,IAAA,IAAI,CAAC,QAAL,GAAgB,KAAK,QAArB;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,WAAO,IAAP;EACA;;EA/BmD;;ECtCrD;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAO/E;;EAEkG;;EAC5F,MAAO,gBAAP,SAAgC,UAAhC,CAA0C;EAwC/C,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN;EAxCD;;EACA,SAAA,CAAA,GAAI,CAAJ;EAEA;;EACA,SAAA,CAAA,GAAI,CAAJ;EAEA;;EACA,SAAA,MAAA,GAAS,CAAT;EAEA;;EACA,SAAA,MAAA,GAAS,CAAT;EAEA;;EACA,SAAA,QAAA,GAAW,CAAX;EAEA;;EACA,SAAA,KAAA,GAAQ,CAAR;EAEA;;EACA,SAAA,MAAA,GAAS,CAAT;EAEA;;EACA,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAR;EAQA;;EAEkC;;EAClC,SAAA,MAAA,GAAS,KAAK,CAAC,aAAN,CAAoB,CAApB,CAAT;EAEA,SAAA,GAAA,GAAM,KAAK,CAAC,aAAN,CAAoB,CAApB,CAAN;EAEA,SAAA,SAAA,GAAY,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAZ;EAIC;EAED;;;EACA,EAAA,YAAY,GAAA;EACX,IAAa,KAAK;EAClB,QAAI,YAAY,GAAG,KAAK,KAAL,GAAa,KAAK,MAAL,CAAY,aAAzB,GAAyC,KAAK,MAAjE;EACA,QAAI,YAAY,GAAG,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,cAA1B,GAA2C,KAAK,MAAnE;EACA,QAAI,MAAM,GAAG,CAAC,KAAK,KAAN,GAAc,CAAd,GAAkB,KAAK,MAAvB,GAAgC,KAAK,MAAL,CAAY,OAAZ,GAAsB,YAAnE;EACA,QAAI,MAAM,GAAG,CAAC,KAAK,MAAN,GAAe,CAAf,GAAmB,KAAK,MAAxB,GAAiC,KAAK,MAAL,CAAY,OAAZ,GAAsB,YAApE;EACA,QAAI,OAAO,GAAG,MAAM,GAAG,KAAK,MAAL,CAAY,KAAZ,GAAoB,YAA3C;EACA,QAAI,OAAO,GAAG,MAAM,GAAG,KAAK,MAAL,CAAY,MAAZ,GAAqB,YAA5C;EACA,QAAI,OAAO,GAAG,KAAK,QAAL,GAAgB,IAAI,CAAC,EAArB,GAA0B,GAAxC;EACA,QAAI,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,CAAV;EACA,QAAI,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,OAAT,CAAV;EACA,QAAI,CAAC,GAAG,KAAK,CAAb;EAAA,QAAgB,CAAC,GAAG,KAAK,CAAzB;EACA,QAAI,SAAS,GAAG,MAAM,GAAG,GAAT,GAAe,CAA/B;EACA,QAAI,SAAS,GAAG,MAAM,GAAG,GAAzB;EACA,QAAI,SAAS,GAAG,MAAM,GAAG,GAAT,GAAe,CAA/B;EACA,QAAI,SAAS,GAAG,MAAM,GAAG,GAAzB;EACA,QAAI,UAAU,GAAG,OAAO,GAAG,GAAV,GAAgB,CAAjC;EACA,QAAI,UAAU,GAAG,OAAO,GAAG,GAA3B;EACA,QAAI,UAAU,GAAG,OAAO,GAAG,GAAV,GAAgB,CAAjC;EACA,QAAI,UAAU,GAAG,OAAO,GAAG,GAA3B;EACA,QAAI,MAAM,GAAG,KAAK,MAAlB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,SAAxB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,SAAxB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,UAAxB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,SAAzB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,UAAzB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,UAAzB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,UAAU,GAAG,SAAzB;EACA,IAAA,MAAM,CAAC,CAAD,CAAN,GAAY,SAAS,GAAG,UAAxB;EACA;;EAED,EAAA,SAAS,CAAE,MAAF,EAAuB;EAC/B,SAAK,MAAL,GAAc,MAAd;EACA,QAAI,GAAG,GAAG,KAAK,GAAf;;EACA,QAAI,MAAM,CAAC,OAAP,IAAkB,EAAtB,EAA0B;EACzB,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,KATD,MASO;EACN,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,EAAhB;EACA;EACD;EAED;;;;;;EAM0F;;;EAC1F,EAAA,oBAAoB,CAAE,IAAF,EAAc,aAAd,EAA8C,MAA9C,EAA8D,MAA9D,EAA4E;EAC/F,QAAI,YAAY,GAAG,KAAK,MAAxB;EACA,QAAI,CAAC,GAAG,IAAI,CAAC,MAAb;EAAA,QAAqB,CAAC,GAAG,IAAI,CAAC,MAA9B;EACA,QAAI,CAAC,GAAG,IAAI,CAAC,CAAb;EAAA,QAAgB,CAAC,GAAG,IAAI,CAAC,CAAzB;EAAA,QAA4B,CAAC,GAAG,IAAI,CAAC,CAArC;EAAA,QAAwC,CAAC,GAAG,IAAI,CAAC,CAAjD;EACA,QAAI,OAAO,GAAG,CAAd;EAAA,QAAiB,OAAO,GAAG,CAA3B;EAEA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAApD,CAR+F;;EAS/F,IAAA,aAAa,CAAC,MAAM,GAAG,CAAV,CAAb,GAA4B,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAAxD;EACA,IAAA,MAAM,IAAI,MAAV;EAEA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAApD,CAd+F;;EAe/F,IAAA,aAAa,CAAC,MAAM,GAAG,CAAV,CAAb,GAA4B,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAAxD;EACA,IAAA,MAAM,IAAI,MAAV;EAEA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAApD,CApB+F;;EAqB/F,IAAA,aAAa,CAAC,MAAM,GAAG,CAAV,CAAb,GAA4B,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAAxD;EACA,IAAA,MAAM,IAAI,MAAV;EAEA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,OAAO,GAAG,YAAY,CAAC,CAAD,CAAtB;EACA,IAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAApD,CA1B+F;;EA2B/F,IAAA,aAAa,CAAC,MAAM,GAAG,CAAV,CAAb,GAA4B,OAAO,GAAG,CAAV,GAAc,OAAO,GAAG,CAAxB,GAA4B,CAAxD;EACA;;EAED,EAAA,IAAI,GAAA;EACH,QAAI,IAAI,GAAG,IAAI,gBAAJ,CAAqB,KAAK,IAA1B,CAAX;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,IAAI,CAAC,cAAL,GAAsB,KAAK,cAA3B;EACA,IAAA,IAAI,CAAC,IAAL,GAAY,KAAK,IAAjB;EACA,IAAA,IAAI,CAAC,CAAL,GAAS,KAAK,CAAd;EACA,IAAA,IAAI,CAAC,CAAL,GAAS,KAAK,CAAd;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,IAAI,CAAC,QAAL,GAAgB,KAAK,QAArB;EACA,IAAA,IAAI,CAAC,KAAL,GAAa,KAAK,KAAlB;EACA,IAAA,IAAI,CAAC,MAAL,GAAc,KAAK,MAAnB;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,GAArB,EAA0B,CAA1B,EAA6B,IAAI,CAAC,GAAlC,EAAuC,CAAvC,EAA0C,CAA1C;EACA,IAAA,KAAK,CAAC,SAAN,CAAgB,KAAK,MAArB,EAA6B,CAA7B,EAAgC,IAAI,CAAC,MAArC,EAA6C,CAA7C,EAAgD,CAAhD;EACA,IAAA,IAAI,CAAC,KAAL,CAAW,YAAX,CAAwB,KAAK,KAA7B;EACA,WAAO,IAAP;EACA;;EAzJ8C;EA2JxC,gBAAA,CAAA,EAAA,GAAK,CAAL;EACA,gBAAA,CAAA,EAAA,GAAK,CAAL;EACA,gBAAA,CAAA,GAAA,GAAM,CAAN;EACA,gBAAA,CAAA,GAAA,GAAM,CAAN;EACA,gBAAA,CAAA,GAAA,GAAM,CAAN;EACA,gBAAA,CAAA,GAAA,GAAM,CAAN;EACA,gBAAA,CAAA,EAAA,GAAK,CAAL;EACA,gBAAA,CAAA,EAAA,GAAK,CAAL;EAEA,gBAAA,CAAA,EAAA,GAAK,CAAL;EACA,gBAAA,CAAA,EAAA,GAAK,CAAL;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EAEA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EAEA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,GAAA,GAAM,EAAN;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;EACA,gBAAA,CAAA,EAAA,GAAK,EAAL;;EClOR;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAOA;EACA;EACA;EACA;;EACO,MAAMqD,qBAAN,CAA4B;EAC/Bhf,EAAAA,WAAW,CAACif,KAAD,EAAQ;EACf,SAAKA,KAAL,GAAaA,KAAb;EACH;;EACDC,EAAAA,mBAAmB,CAACC,IAAD,EAAOvY,IAAP,EAAasX,IAAb,EAAmB;EAClC,QAAItB,MAAM,GAAG,KAAKqC,KAAL,CAAWlB,UAAX,CAAsBG,IAAtB,CAAb;EACA,QAAI,CAACtB,MAAL,EACI,MAAM,IAAI7U,KAAJ,CAAU,gCAAgCmW,IAAhC,GAAuC,uBAAvC,GAAiEtX,IAAjE,GAAwE,GAAlF,CAAN;EACJgW,IAAAA,MAAM,CAACwC,YAAP,GAAsBxC,MAAtB;EACA,QAAIvT,UAAU,GAAG,IAAIgW,gBAAJ,CAAqBzY,IAArB,CAAjB;EACAyC,IAAAA,UAAU,CAACiW,SAAX,CAAqB1C,MAArB;EACA,WAAOvT,UAAP;EACH;;EACDkW,EAAAA,iBAAiB,CAACJ,IAAD,EAAOvY,IAAP,EAAasX,IAAb,EAAmB;EAChC,QAAItB,MAAM,GAAG,KAAKqC,KAAL,CAAWlB,UAAX,CAAsBG,IAAtB,CAAb;EACA,QAAI,CAACtB,MAAL,EACI,MAAM,IAAI7U,KAAJ,CAAU,gCAAgCmW,IAAhC,GAAuC,qBAAvC,GAA+DtX,IAA/D,GAAsE,GAAhF,CAAN;EACJgW,IAAAA,MAAM,CAACwC,YAAP,GAAsBxC,MAAtB;EACA,QAAIvT,UAAU,GAAG,IAAImW,cAAJ,CAAmB5Y,IAAnB,CAAjB;EACAyC,IAAAA,UAAU,CAACuT,MAAX,GAAoBA,MAApB;EACA,WAAOvT,UAAP;EACH;;EACDoW,EAAAA,wBAAwB,CAACN,IAAD,EAAOvY,IAAP,EAAa;EACjC,WAAO,IAAI8Y,qBAAJ,CAA0B9Y,IAA1B,CAAP;EACH;;EACD+Y,EAAAA,iBAAiB,CAACR,IAAD,EAAOvY,IAAP,EAAa;EAC1B,WAAO,IAAIgZ,cAAJ,CAAmBhZ,IAAnB,CAAP;EACH;;EACDiZ,EAAAA,kBAAkB,CAACV,IAAD,EAAOvY,IAAP,EAAa;EAC3B,WAAO,IAAIkZ,eAAJ,CAAoBlZ,IAApB,CAAP;EACH;;EACDmZ,EAAAA,qBAAqB,CAACZ,IAAD,EAAOvY,IAAP,EAAa;EAC9B,WAAO,IAAIoZ,kBAAJ,CAAuBpZ,IAAvB,CAAP;EACH;;EAjC8B;;ECtCnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACO,MAAMqZ,QAAN,CAAe;EAClBjgB,EAAAA,WAAW,CAAC0W,KAAD,EAAQ9P,IAAR,EAAcsZ,MAAd,EAAsB;EAC7B;EACA,SAAKld,CAAL,GAAS,CAAT;EACA;;EACA,SAAKI,CAAL,GAAS,CAAT;EACA;;EACA,SAAKiK,QAAL,GAAgB,CAAhB;EACA;;EACA,SAAKtE,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKiX,aAAL,GAAqBC,aAAa,CAACC,MAAnC;EACA;EACR;EACA;;EACQ,SAAKC,YAAL,GAAoB,KAApB;EACA;EACR;;EACQ,SAAK1e,KAAL,GAAa,IAAIf,KAAJ,EAAb;EACA,QAAI6V,KAAK,GAAG,CAAZ,EACI,MAAM,IAAI3O,KAAJ,CAAU,qBAAV,CAAN;EACJ,QAAI,CAACnB,IAAL,EACI,MAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAK2O,KAAL,GAAaA,KAAb;EACA,SAAK9P,IAAL,GAAYA,IAAZ;EACA,SAAKsZ,MAAL,GAAcA,MAAd;EACH;;EAhCiB;EAkCtB;;EACO,IAAIE,aAAJ;;EACP,CAAC,UAAUA,aAAV,EAAyB;EACtBA,EAAAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,CAA3B,CAAb,GAA6C,QAA7C;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,iBAAD,CAAb,GAAmC,CAApC,CAAb,GAAsD,iBAAtD;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,wBAAD,CAAb,GAA0C,CAA3C,CAAb,GAA6D,wBAA7D;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,CAA5B,CAAb,GAA8C,SAA9C;EACAA,EAAAA,aAAa,CAACA,aAAa,CAAC,qBAAD,CAAb,GAAuC,CAAxC,CAAb,GAA0D,qBAA1D;EACH,CAND,EAMGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CANhB;;EClEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;;EACO,MAAMG,IAAN,CAAW;EACd;EACAvgB,EAAAA,WAAW,CAACsN,IAAD,EAAOjF,QAAP,EAAiB6X,MAAjB,EAAyB;EAChC;EACA,SAAKM,QAAL,GAAgB,IAAI5a,KAAJ,EAAhB;EACA;;EACA,SAAK5C,CAAL,GAAS,CAAT;EACA;;EACA,SAAKI,CAAL,GAAS,CAAT;EACA;;EACA,SAAKiK,QAAL,GAAgB,CAAhB;EACA;;EACA,SAAKtE,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKuX,EAAL,GAAU,CAAV;EACA;;EACA,SAAKC,EAAL,GAAU,CAAV;EACA;;EACA,SAAKC,SAAL,GAAiB,CAAjB;EACA;;EACA,SAAKC,OAAL,GAAe,CAAf;EACA;;EACA,SAAKC,OAAL,GAAe,CAAf;EACA;;EACA,SAAKC,OAAL,GAAe,CAAf;EACA;;EACA,SAAKC,OAAL,GAAe,CAAf;EACA;;EACA,SAAK9f,CAAL,GAAS,CAAT;EACA;;EACA,SAAKD,CAAL,GAAS,CAAT;EACA;;EACA,SAAKK,CAAL,GAAS,CAAT;EACA;;EACA,SAAKuC,CAAL,GAAS,CAAT;EACA;;EACA,SAAKod,MAAL,GAAc,CAAd;EACA;;EACA,SAAKC,MAAL,GAAc,CAAd;EACA,SAAKC,MAAL,GAAc,KAAd;EACA,SAAK/T,MAAL,GAAc,KAAd;EACA,QAAI,CAACG,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACM,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAKjF,QAAL,GAAgBA,QAAhB;EACA,SAAK6X,MAAL,GAAcA,MAAd;EACA,SAAKiB,cAAL;EACH;EACD;EACJ;;;EACIC,EAAAA,QAAQ,GAAG;EACP,WAAO,KAAKjU,MAAZ;EACH;EACD;;;EACAsG,EAAAA,MAAM,GAAG;EACL,SAAK4N,wBAAL,CAA8B,KAAKZ,EAAnC,EAAuC,KAAKC,EAA5C,EAAgD,KAAKC,SAArD,EAAgE,KAAKC,OAArE,EAA8E,KAAKC,OAAnF,EAA4F,KAAKC,OAAjG,EAA0G,KAAKC,OAA/G;EACH;EACD;EACJ;EACA;;;EACIO,EAAAA,oBAAoB,GAAG;EACnB,SAAKD,wBAAL,CAA8B,KAAKre,CAAnC,EAAsC,KAAKI,CAA3C,EAA8C,KAAKiK,QAAnD,EAA6D,KAAKtE,MAAlE,EAA0E,KAAKC,MAA/E,EAAuF,KAAKC,MAA5F,EAAoG,KAAKC,MAAzG;EACH;EACD;EACJ;EACA;EACA;EACA;;;EACImY,EAAAA,wBAAwB,CAACre,CAAD,EAAII,CAAJ,EAAOiK,QAAP,EAAiBtE,MAAjB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiD;EACrE,SAAKuX,EAAL,GAAUzd,CAAV;EACA,SAAK0d,EAAL,GAAUtd,CAAV;EACA,SAAKud,SAAL,GAAiBtT,QAAjB;EACA,SAAKuT,OAAL,GAAe7X,MAAf;EACA,SAAK8X,OAAL,GAAe7X,MAAf;EACA,SAAK8X,OAAL,GAAe7X,MAAf;EACA,SAAK8X,OAAL,GAAe7X,MAAf;EACA,QAAIgX,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI,CAACA,MAAL,EAAa;EAAE;EACX,UAAI7X,QAAQ,GAAG,KAAKA,QAApB;EACA,UAAIkZ,SAAS,GAAGlU,QAAQ,GAAG,EAAX,GAAgBnE,MAAhC;EACA,UAAIsY,EAAE,GAAGnZ,QAAQ,CAACU,MAAlB;EACA,UAAI0Y,EAAE,GAAGpZ,QAAQ,CAACW,MAAlB;EACA,WAAK/H,CAAL,GAASmB,SAAS,CAACG,MAAV,CAAiB8K,QAAQ,GAAGpE,MAA5B,IAAsCF,MAAtC,GAA+CyY,EAAxD;EACA,WAAKxgB,CAAL,GAASoB,SAAS,CAACG,MAAV,CAAiBgf,SAAjB,IAA8BvY,MAA9B,GAAuCwY,EAAhD;EACA,WAAKngB,CAAL,GAASe,SAAS,CAACQ,MAAV,CAAiByK,QAAQ,GAAGpE,MAA5B,IAAsCF,MAAtC,GAA+C0Y,EAAxD;EACA,WAAK7d,CAAL,GAASxB,SAAS,CAACQ,MAAV,CAAiB2e,SAAjB,IAA8BvY,MAA9B,GAAuCyY,EAAhD;EACA,WAAKR,MAAL,GAAcje,CAAC,GAAGwe,EAAJ,GAASnZ,QAAQ,CAACrF,CAAhC;EACA,WAAKge,MAAL,GAAc5d,CAAC,GAAGqe,EAAJ,GAASpZ,QAAQ,CAACjF,CAAhC;EACA;EACH;;EACD,QAAIse,EAAE,GAAGxB,MAAM,CAACjf,CAAhB;EAAA,QAAmB0gB,EAAE,GAAGzB,MAAM,CAAClf,CAA/B;EAAA,QAAkC4gB,EAAE,GAAG1B,MAAM,CAAC7e,CAA9C;EAAA,QAAiDwgB,EAAE,GAAG3B,MAAM,CAACtc,CAA7D;EACA,SAAKqd,MAAL,GAAcS,EAAE,GAAG1e,CAAL,GAAS2e,EAAE,GAAGve,CAAd,GAAkB8c,MAAM,CAACe,MAAvC;EACA,SAAKD,MAAL,GAAcY,EAAE,GAAG5e,CAAL,GAAS6e,EAAE,GAAGze,CAAd,GAAkB8c,MAAM,CAACc,MAAvC;;EACA,YAAQ,KAAK1T,IAAL,CAAU6S,aAAlB;EACI,WAAKC,aAAa,CAACC,MAAnB;EAA2B;EACvB,cAAIkB,SAAS,GAAGlU,QAAQ,GAAG,EAAX,GAAgBnE,MAAhC;EACA,cAAI4Y,EAAE,GAAG1f,SAAS,CAACG,MAAV,CAAiB8K,QAAQ,GAAGpE,MAA5B,IAAsCF,MAA/C;EACA,cAAIgZ,EAAE,GAAG3f,SAAS,CAACG,MAAV,CAAiBgf,SAAjB,IAA8BvY,MAAvC;EACA,cAAIgZ,EAAE,GAAG5f,SAAS,CAACQ,MAAV,CAAiByK,QAAQ,GAAGpE,MAA5B,IAAsCF,MAA/C;EACA,cAAIkZ,EAAE,GAAG7f,SAAS,CAACQ,MAAV,CAAiB2e,SAAjB,IAA8BvY,MAAvC;EACA,eAAK/H,CAAL,GAASygB,EAAE,GAAGI,EAAL,GAAUH,EAAE,GAAGK,EAAxB;EACA,eAAKhhB,CAAL,GAAS0gB,EAAE,GAAGK,EAAL,GAAUJ,EAAE,GAAGM,EAAxB;EACA,eAAK5gB,CAAL,GAASugB,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGG,EAAxB;EACA,eAAKpe,CAAL,GAASge,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGI,EAAxB;EACA;EACH;;EACD,WAAK7B,aAAa,CAAC8B,eAAnB;EAAoC;EAChC,cAAIX,SAAS,GAAGlU,QAAQ,GAAG,EAAX,GAAgBnE,MAAhC;EACA,eAAKjI,CAAL,GAASmB,SAAS,CAACG,MAAV,CAAiB8K,QAAQ,GAAGpE,MAA5B,IAAsCF,MAA/C;EACA,eAAK/H,CAAL,GAASoB,SAAS,CAACG,MAAV,CAAiBgf,SAAjB,IAA8BvY,MAAvC;EACA,eAAK3H,CAAL,GAASe,SAAS,CAACQ,MAAV,CAAiByK,QAAQ,GAAGpE,MAA5B,IAAsCF,MAA/C;EACA,eAAKnF,CAAL,GAASxB,SAAS,CAACQ,MAAV,CAAiB2e,SAAjB,IAA8BvY,MAAvC;EACA;EACH;;EACD,WAAKoX,aAAa,CAAC+B,sBAAnB;EAA2C;EACvC,cAAIC,CAAC,GAAGV,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAvB;EACA,cAAIS,GAAG,GAAG,CAAV;;EACA,cAAID,CAAC,GAAG,MAAR,EAAgB;EACZA,YAAAA,CAAC,GAAG3f,IAAI,CAACa,GAAL,CAASoe,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAxB,IAA8BQ,CAAlC;EACAV,YAAAA,EAAE,IAAI,KAAKrZ,QAAL,CAAcU,MAApB;EACA6Y,YAAAA,EAAE,IAAI,KAAKvZ,QAAL,CAAcW,MAApB;EACA2Y,YAAAA,EAAE,GAAGC,EAAE,GAAGQ,CAAV;EACAP,YAAAA,EAAE,GAAGH,EAAE,GAAGU,CAAV;EACAC,YAAAA,GAAG,GAAG5f,IAAI,CAAC6f,KAAL,CAAWV,EAAX,EAAeF,EAAf,IAAqBtf,SAAS,CAAC8B,MAArC;EACH,WAPD,MAQK;EACDwd,YAAAA,EAAE,GAAG,CAAL;EACAE,YAAAA,EAAE,GAAG,CAAL;EACAS,YAAAA,GAAG,GAAG,KAAK5f,IAAI,CAAC6f,KAAL,CAAWT,EAAX,EAAeF,EAAf,IAAqBvf,SAAS,CAAC8B,MAA1C;EACH;;EACD,cAAIqe,EAAE,GAAGlV,QAAQ,GAAGpE,MAAX,GAAoBoZ,GAA7B;EACA,cAAIG,EAAE,GAAGnV,QAAQ,GAAGnE,MAAX,GAAoBmZ,GAApB,GAA0B,EAAnC;EACA,cAAIP,EAAE,GAAG1f,SAAS,CAACG,MAAV,CAAiBggB,EAAjB,IAAuBxZ,MAAhC;EACA,cAAIgZ,EAAE,GAAG3f,SAAS,CAACG,MAAV,CAAiBigB,EAAjB,IAAuBxZ,MAAhC;EACA,cAAIgZ,EAAE,GAAG5f,SAAS,CAACQ,MAAV,CAAiB2f,EAAjB,IAAuBxZ,MAAhC;EACA,cAAIkZ,EAAE,GAAG7f,SAAS,CAACQ,MAAV,CAAiB4f,EAAjB,IAAuBxZ,MAAhC;EACA,eAAK/H,CAAL,GAASygB,EAAE,GAAGI,EAAL,GAAUH,EAAE,GAAGK,EAAxB;EACA,eAAKhhB,CAAL,GAAS0gB,EAAE,GAAGK,EAAL,GAAUJ,EAAE,GAAGM,EAAxB;EACA,eAAK5gB,CAAL,GAASugB,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGG,EAAxB;EACA,eAAKpe,CAAL,GAASge,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGI,EAAxB;EACA;EACH;;EACD,WAAK7B,aAAa,CAACqC,OAAnB;EACA,WAAKrC,aAAa,CAACsC,mBAAnB;EAAwC;EACpC,cAAIhgB,GAAG,GAAGN,SAAS,CAACG,MAAV,CAAiB8K,QAAjB,CAAV;EACA,cAAIxK,GAAG,GAAGT,SAAS,CAACQ,MAAV,CAAiByK,QAAjB,CAAV;EACA,cAAIsV,EAAE,GAAG,CAACjB,EAAE,GAAGhf,GAAL,GAAWif,EAAE,GAAG9e,GAAjB,IAAwB,KAAKwF,QAAL,CAAcU,MAA/C;EACA,cAAI6Z,EAAE,GAAG,CAAChB,EAAE,GAAGlf,GAAL,GAAWmf,EAAE,GAAGhf,GAAjB,IAAwB,KAAKwF,QAAL,CAAcW,MAA/C;EACA,cAAIoZ,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAU8e,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAR;EACA,cAAIR,CAAC,GAAG,OAAR,EACIA,CAAC,GAAG,IAAIA,CAAR;EACJO,UAAAA,EAAE,IAAIP,CAAN;EACAQ,UAAAA,EAAE,IAAIR,CAAN;EACAA,UAAAA,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAU8e,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAJ;EACA,cAAI,KAAKtV,IAAL,CAAU6S,aAAV,IAA2BC,aAAa,CAACqC,OAAzC,IACIf,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAf,GAAoB,CAArB,KAA4B,KAAKvZ,QAAL,CAAcU,MAAd,GAAuB,CAAvB,IAA4B,KAAKV,QAAL,CAAcW,MAAd,GAAuB,CAA/E,CADP,EAEIoZ,CAAC,GAAG,CAACA,CAAL;EACJ,cAAIthB,CAAC,GAAG2B,IAAI,CAACsB,EAAL,GAAU,CAAV,GAActB,IAAI,CAAC6f,KAAL,CAAWM,EAAX,EAAeD,EAAf,CAAtB;EACA,cAAIE,EAAE,GAAGpgB,IAAI,CAACC,GAAL,CAAS5B,CAAT,IAAcshB,CAAvB;EACA,cAAIU,EAAE,GAAGrgB,IAAI,CAACI,GAAL,CAAS/B,CAAT,IAAcshB,CAAvB;EACA,cAAIN,EAAE,GAAG1f,SAAS,CAACG,MAAV,CAAiB0G,MAAjB,IAA2BF,MAApC;EACA,cAAIgZ,EAAE,GAAG3f,SAAS,CAACG,MAAV,CAAiB,KAAK2G,MAAtB,IAAgCF,MAAzC;EACA,cAAIgZ,EAAE,GAAG5f,SAAS,CAACQ,MAAV,CAAiBqG,MAAjB,IAA2BF,MAApC;EACA,cAAIkZ,EAAE,GAAG7f,SAAS,CAACQ,MAAV,CAAiB,KAAKsG,MAAtB,IAAgCF,MAAzC;EACA,eAAK/H,CAAL,GAAS0hB,EAAE,GAAGb,EAAL,GAAUe,EAAE,GAAGb,EAAxB;EACA,eAAKhhB,CAAL,GAAS2hB,EAAE,GAAGZ,EAAL,GAAUc,EAAE,GAAGZ,EAAxB;EACA,eAAK5gB,CAAL,GAASuhB,EAAE,GAAGd,EAAL,GAAUgB,EAAE,GAAGd,EAAxB;EACA,eAAKpe,CAAL,GAASgf,EAAE,GAAGb,EAAL,GAAUe,EAAE,GAAGb,EAAxB;EACA;EACH;EA5EL;;EA8EA,SAAKhhB,CAAL,IAAU,KAAKoH,QAAL,CAAcU,MAAxB;EACA,SAAK/H,CAAL,IAAU,KAAKqH,QAAL,CAAcU,MAAxB;EACA,SAAK1H,CAAL,IAAU,KAAKgH,QAAL,CAAcW,MAAxB;EACA,SAAKpF,CAAL,IAAU,KAAKyE,QAAL,CAAcW,MAAxB;EACH;EACD;;;EACAmY,EAAAA,cAAc,GAAG;EACb,QAAI7T,IAAI,GAAG,KAAKA,IAAhB;EACA,SAAKtK,CAAL,GAASsK,IAAI,CAACtK,CAAd;EACA,SAAKI,CAAL,GAASkK,IAAI,CAAClK,CAAd;EACA,SAAKiK,QAAL,GAAgBC,IAAI,CAACD,QAArB;EACA,SAAKtE,MAAL,GAAcuE,IAAI,CAACvE,MAAnB;EACA,SAAKC,MAAL,GAAcsE,IAAI,CAACtE,MAAnB;EACA,SAAKC,MAAL,GAAcqE,IAAI,CAACrE,MAAnB;EACA,SAAKC,MAAL,GAAcoE,IAAI,CAACpE,MAAnB;EACH;EACD;;;EACA6Z,EAAAA,iBAAiB,GAAG;EAChB,WAAOtgB,IAAI,CAAC6f,KAAL,CAAW,KAAKjhB,CAAhB,EAAmB,KAAKJ,CAAxB,IAA6BmB,SAAS,CAAC8B,MAA9C;EACH;EACD;;;EACA8e,EAAAA,iBAAiB,GAAG;EAChB,WAAOvgB,IAAI,CAAC6f,KAAL,CAAW,KAAK1e,CAAhB,EAAmB,KAAK5C,CAAxB,IAA6BoB,SAAS,CAAC8B,MAA9C;EACH;EACD;;;EACA+e,EAAAA,cAAc,GAAG;EACb,WAAOxgB,IAAI,CAACoB,IAAL,CAAU,KAAK5C,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAKI,CAAL,GAAS,KAAKA,CAA1C,CAAP;EACH;EACD;;;EACA6hB,EAAAA,cAAc,GAAG;EACb,WAAOzgB,IAAI,CAACoB,IAAL,CAAU,KAAK7C,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAK4C,CAAL,GAAS,KAAKA,CAA1C,CAAP;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIuf,EAAAA,sBAAsB,GAAG;EACrB,QAAIjD,MAAM,GAAG,KAAKA,MAAlB;;EACA,QAAI,CAACA,MAAL,EAAa;EACT,WAAKO,EAAL,GAAU,KAAKQ,MAAL,GAAc,KAAK5Y,QAAL,CAAcrF,CAAtC;EACA,WAAK0d,EAAL,GAAU,KAAKM,MAAL,GAAc,KAAK3Y,QAAL,CAAcjF,CAAtC;EACA,WAAKud,SAAL,GAAiBle,IAAI,CAAC6f,KAAL,CAAW,KAAKjhB,CAAhB,EAAmB,KAAKJ,CAAxB,IAA6BmB,SAAS,CAAC8B,MAAxD;EACA,WAAK0c,OAAL,GAAene,IAAI,CAACoB,IAAL,CAAU,KAAK5C,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAKI,CAAL,GAAS,KAAKA,CAA1C,CAAf;EACA,WAAKwf,OAAL,GAAepe,IAAI,CAACoB,IAAL,CAAU,KAAK7C,CAAL,GAAS,KAAKA,CAAd,GAAkB,KAAK4C,CAAL,GAAS,KAAKA,CAA1C,CAAf;EACA,WAAKkd,OAAL,GAAe,CAAf;EACA,WAAKC,OAAL,GAAete,IAAI,CAAC6f,KAAL,CAAW,KAAKrhB,CAAL,GAAS,KAAKD,CAAd,GAAkB,KAAKK,CAAL,GAAS,KAAKuC,CAA3C,EAA8C,KAAK3C,CAAL,GAAS,KAAK2C,CAAd,GAAkB,KAAK5C,CAAL,GAAS,KAAKK,CAA9E,IAAmFe,SAAS,CAAC8B,MAA5G;EACA;EACH;;EACD,QAAIwd,EAAE,GAAGxB,MAAM,CAACjf,CAAhB;EAAA,QAAmB0gB,EAAE,GAAGzB,MAAM,CAAClf,CAA/B;EAAA,QAAkC4gB,EAAE,GAAG1B,MAAM,CAAC7e,CAA9C;EAAA,QAAiDwgB,EAAE,GAAG3B,MAAM,CAACtc,CAA7D;EACA,QAAIwf,GAAG,GAAG,KAAK1B,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAApB,CAAV;EACA,QAAI5V,EAAE,GAAG,KAAKiV,MAAL,GAAcf,MAAM,CAACe,MAA9B;EAAA,QAAsChV,EAAE,GAAG,KAAK+U,MAAL,GAAcd,MAAM,CAACc,MAAhE;EACA,SAAKP,EAAL,GAAWzU,EAAE,GAAG6V,EAAL,GAAUuB,GAAV,GAAgBnX,EAAE,GAAG0V,EAAL,GAAUyB,GAArC;EACA,SAAK1C,EAAL,GAAWzU,EAAE,GAAGyV,EAAL,GAAU0B,GAAV,GAAgBpX,EAAE,GAAG4V,EAAL,GAAUwB,GAArC;EACA,QAAIC,EAAE,GAAGD,GAAG,GAAGvB,EAAf;EACA,QAAIjS,EAAE,GAAGwT,GAAG,GAAG1B,EAAf;EACA,QAAI4B,EAAE,GAAGF,GAAG,GAAGzB,EAAf;EACA,QAAI4B,EAAE,GAAGH,GAAG,GAAGxB,EAAf;EACA,QAAI4B,EAAE,GAAGH,EAAE,GAAG,KAAKpiB,CAAV,GAAcqiB,EAAE,GAAG,KAAKjiB,CAAjC;EACA,QAAIoiB,EAAE,GAAGJ,EAAE,GAAG,KAAKriB,CAAV,GAAcsiB,EAAE,GAAG,KAAK1f,CAAjC;EACA,QAAI8f,EAAE,GAAG9T,EAAE,GAAG,KAAKvO,CAAV,GAAckiB,EAAE,GAAG,KAAKtiB,CAAjC;EACA,QAAI0iB,EAAE,GAAG/T,EAAE,GAAG,KAAKhM,CAAV,GAAc2f,EAAE,GAAG,KAAKviB,CAAjC;EACA,SAAK8f,OAAL,GAAe,CAAf;EACA,SAAKF,OAAL,GAAene,IAAI,CAACoB,IAAL,CAAU2f,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAzB,CAAf;;EACA,QAAI,KAAK9C,OAAL,GAAe,MAAnB,EAA2B;EACvB,UAAIgD,GAAG,GAAGJ,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAzB;EACA,WAAK7C,OAAL,GAAe+C,GAAG,GAAG,KAAKhD,OAA1B;EACA,WAAKG,OAAL,GAAete,IAAI,CAAC6f,KAAL,CAAWkB,EAAE,GAAGC,EAAL,GAAUC,EAAE,GAAGC,EAA1B,EAA8BC,GAA9B,IAAqCxhB,SAAS,CAAC8B,MAA9D;EACA,WAAKyc,SAAL,GAAiBle,IAAI,CAAC6f,KAAL,CAAWoB,EAAX,EAAeF,EAAf,IAAqBphB,SAAS,CAAC8B,MAAhD;EACH,KALD,MAMK;EACD,WAAK0c,OAAL,GAAe,CAAf;EACA,WAAKC,OAAL,GAAepe,IAAI,CAACoB,IAAL,CAAU4f,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAzB,CAAf;EACA,WAAK5C,OAAL,GAAe,CAAf;EACA,WAAKJ,SAAL,GAAiB,KAAKle,IAAI,CAAC6f,KAAL,CAAWqB,EAAX,EAAeF,EAAf,IAAqBrhB,SAAS,CAAC8B,MAArD;EACH;EACJ;EACD;;;EACA2f,EAAAA,YAAY,CAACC,KAAD,EAAQ;EAChB,QAAIC,MAAM,GAAG,KAAK,KAAK9iB,CAAL,GAAS,KAAK2C,CAAd,GAAkB,KAAK5C,CAAL,GAAS,KAAKK,CAArC,CAAb;EACA,QAAI2B,CAAC,GAAG8gB,KAAK,CAAC9gB,CAAN,GAAU,KAAKie,MAAvB;EAAA,QAA+B7d,CAAC,GAAG0gB,KAAK,CAAC1gB,CAAN,GAAU,KAAK4d,MAAlD;EACA8C,IAAAA,KAAK,CAAC9gB,CAAN,GAAUA,CAAC,GAAG,KAAKY,CAAT,GAAamgB,MAAb,GAAsB3gB,CAAC,GAAG,KAAKpC,CAAT,GAAa+iB,MAA7C;EACAD,IAAAA,KAAK,CAAC1gB,CAAN,GAAUA,CAAC,GAAG,KAAKnC,CAAT,GAAa8iB,MAAb,GAAsB/gB,CAAC,GAAG,KAAK3B,CAAT,GAAa0iB,MAA7C;EACA,WAAOD,KAAP;EACH;EACD;;;EACAE,EAAAA,YAAY,CAACC,KAAD,EAAQ;EAChB,QAAIjhB,CAAC,GAAGihB,KAAK,CAACjhB,CAAd;EAAA,QAAiBI,CAAC,GAAG6gB,KAAK,CAAC7gB,CAA3B;EACA6gB,IAAAA,KAAK,CAACjhB,CAAN,GAAUA,CAAC,GAAG,KAAK/B,CAAT,GAAamC,CAAC,GAAG,KAAKpC,CAAtB,GAA0B,KAAKigB,MAAzC;EACAgD,IAAAA,KAAK,CAAC7gB,CAAN,GAAUJ,CAAC,GAAG,KAAK3B,CAAT,GAAa+B,CAAC,GAAG,KAAKQ,CAAtB,GAA0B,KAAKod,MAAzC;EACA,WAAOiD,KAAP;EACH;EACD;;;EACAC,EAAAA,oBAAoB,CAACC,aAAD,EAAgB;EAChC,QAAIthB,GAAG,GAAGT,SAAS,CAACQ,MAAV,CAAiBuhB,aAAjB,CAAV;EAAA,QAA2CzhB,GAAG,GAAGN,SAAS,CAACG,MAAV,CAAiB4hB,aAAjB,CAAjD;EACA,WAAO1hB,IAAI,CAAC6f,KAAL,CAAW,KAAKrhB,CAAL,GAAS4B,GAAT,GAAe,KAAKxB,CAAL,GAASqB,GAAnC,EAAwC,KAAKkB,CAAL,GAASlB,GAAT,GAAe,KAAK1B,CAAL,GAAS6B,GAAhE,IAAuET,SAAS,CAAC8B,MAAjF,GAA0F,KAAKmJ,QAA/F,GAA0G,KAAKpE,MAAtH;EACH;EACD;;;EACAmb,EAAAA,oBAAoB,CAACC,aAAD,EAAgB;EAChCA,IAAAA,aAAa,IAAI,KAAKhX,QAAL,GAAgB,KAAKpE,MAAtC;EACA,QAAIpG,GAAG,GAAGT,SAAS,CAACQ,MAAV,CAAiByhB,aAAjB,CAAV;EAAA,QAA2C3hB,GAAG,GAAGN,SAAS,CAACG,MAAV,CAAiB8hB,aAAjB,CAAjD;EACA,WAAO5hB,IAAI,CAAC6f,KAAL,CAAW5f,GAAG,GAAG,KAAKrB,CAAX,GAAewB,GAAG,GAAG,KAAKe,CAArC,EAAwClB,GAAG,GAAG,KAAKzB,CAAX,GAAe4B,GAAG,GAAG,KAAK7B,CAAlE,IAAuEoB,SAAS,CAAC8B,MAAxF;EACH;EACD;EACJ;EACA;EACA;;;EACIogB,EAAAA,WAAW,CAAC9hB,OAAD,EAAU;EACjB,QAAIvB,CAAC,GAAG,KAAKA,CAAb;EAAA,QAAgBD,CAAC,GAAG,KAAKA,CAAzB;EAAA,QAA4BK,CAAC,GAAG,KAAKA,CAArC;EAAA,QAAwCuC,CAAC,GAAG,KAAKA,CAAjD;EACA,QAAIlB,GAAG,GAAGN,SAAS,CAACG,MAAV,CAAiBC,OAAjB,CAAV;EAAA,QAAqCK,GAAG,GAAGT,SAAS,CAACQ,MAAV,CAAiBJ,OAAjB,CAA3C;EACA,SAAKvB,CAAL,GAASyB,GAAG,GAAGzB,CAAN,GAAU4B,GAAG,GAAGxB,CAAzB;EACA,SAAKL,CAAL,GAAS0B,GAAG,GAAG1B,CAAN,GAAU6B,GAAG,GAAGe,CAAzB;EACA,SAAKvC,CAAL,GAASwB,GAAG,GAAG5B,CAAN,GAAUyB,GAAG,GAAGrB,CAAzB;EACA,SAAKuC,CAAL,GAASf,GAAG,GAAG7B,CAAN,GAAU0B,GAAG,GAAGkB,CAAzB;EACH;;EAxSa;;ECnClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;EACO,MAAM2gB,cAAN,CAAqB;EACxBvkB,EAAAA,WAAW,CAAC4G,IAAD,EAAO4d,KAAP,EAAclE,YAAd,EAA4B;EACnC,SAAK1Z,IAAL,GAAYA,IAAZ;EACA,SAAK4d,KAAL,GAAaA,KAAb;EACA,SAAKlE,YAAL,GAAoBA,YAApB;EACH;;EALuB;;EC7B5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEO,MAAMmE,gBAAN,CAAuB;EAC1BzkB,EAAAA,WAAW,CAAC0kB,MAAD,EAASC,aAAT,EAAwBC,UAAU,GAAG,EAArC,EAAyCC,UAAU,GAAG,IAAtD,EAA4D;EACnE,SAAKC,MAAL,GAAc,EAAd;EACA,SAAKC,MAAL,GAAc,EAAd;EACA,SAAKC,MAAL,GAAc,CAAd;EACA,SAAKC,MAAL,GAAc,CAAd;EACA,SAAKP,MAAL,GAAcA,MAAd;EACA,SAAKC,aAAL,GAAqBA,aAArB;EACA,SAAKC,UAAL,GAAkBA,UAAlB;EACA,SAAKC,UAAL,GAAkBA,UAAU,IAAI,IAAIK,UAAJ,EAAhC;EACH;;EACD5gB,EAAAA,KAAK,CAAC4Z,IAAD,EAAO;EACR,SAAK8G,MAAL;EACA,WAAO,KAAKJ,UAAL,GAAkB1G,IAAzB;EACH;;EACDiH,EAAAA,OAAO,CAACC,QAAD,EAAWlH,IAAX,EAAiBmH,KAAjB,EAAwB;EAC3B,SAAKL,MAAL;EACA,SAAKC,MAAL;EACA,SAAKH,MAAL,CAAY5G,IAAZ,IAAoBmH,KAApB;EACA,QAAID,QAAJ,EACIA,QAAQ,CAAClH,IAAD,EAAOmH,KAAP,CAAR;;EACJ,QAAI,KAAKL,MAAL,GAAc,CAAlB,EAAqB;EACjB,WAAKN,MAAL;EACH;EACJ;;EACDY,EAAAA,KAAK,CAACF,QAAD,EAAWlH,IAAX,EAAiBqH,OAAjB,EAA0B;EAC3B,SAAKP,MAAL;EACA,SAAKC,MAAL;EACA,SAAKF,MAAL,CAAY7G,IAAZ,IAAoBqH,OAApB;EACA,QAAIH,QAAJ,EACIA,QAAQ,CAAClH,IAAD,EAAOqH,OAAP,CAAR;EACP;;EACDC,EAAAA,aAAa,CAACtH,IAAD,EAAO5Q,IAAP,EAAa;EACtB,SAAKuX,UAAL,CAAgBY,WAAhB,CAA4B,KAAKb,UAAL,GAAkB1G,IAA9C,IAAsD5Q,IAAtD;EACH;;EACDoY,EAAAA,UAAU,CAACxH,IAAD,EAAOiH,OAAO,GAAG,IAAjB,EAAuBG,KAAK,GAAG,IAA/B,EAAqC;EAC3CpH,IAAAA,IAAI,GAAG,KAAK5Z,KAAL,CAAW4Z,IAAX,CAAP;EACA,SAAK2G,UAAL,CAAgBc,cAAhB,CAA+BzH,IAA/B,EAAsC5Q,IAAD,IAAU;EAC3C,WAAK6X,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4B5Q,IAA5B;EACH,KAFD,EAEG,CAACsY,MAAD,EAASC,YAAT,KAA0B;EACzB,WAAKP,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,wBAAuBA,IAAK,YAAW0H,MAAO,KAAIC,YAAa,EAAxF;EACH,KAJD;EAKH;;EACDC,EAAAA,QAAQ,CAAC5H,IAAD,EAAOiH,OAAO,GAAG,IAAjB,EAAuBG,KAAK,GAAG,IAA/B,EAAqC;EACzCpH,IAAAA,IAAI,GAAG,KAAK5Z,KAAL,CAAW4Z,IAAX,CAAP;EACA,SAAK2G,UAAL,CAAgBkB,YAAhB,CAA6B7H,IAA7B,EAAoC5Q,IAAD,IAAU;EACzC,WAAK6X,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4B5Q,IAA5B;EACH,KAFD,EAEG,CAACsY,MAAD,EAASC,YAAT,KAA0B;EACzB,WAAKP,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,sBAAqBA,IAAK,YAAW0H,MAAO,KAAIC,YAAa,EAAtF;EACH,KAJD;EAKH;;EACDG,EAAAA,QAAQ,CAAC9H,IAAD,EAAOiH,OAAO,GAAG,IAAjB,EAAuBG,KAAK,GAAG,IAA/B,EAAqC;EACzCpH,IAAAA,IAAI,GAAG,KAAK5Z,KAAL,CAAW4Z,IAAX,CAAP;EACA,SAAK2G,UAAL,CAAgBoB,YAAhB,CAA6B/H,IAA7B,EAAoC5Q,IAAD,IAAU;EACzC,WAAK6X,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4B5Q,IAA5B;EACH,KAFD,EAEG,CAACsY,MAAD,EAASC,YAAT,KAA0B;EACzB,WAAKP,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,sBAAqBA,IAAK,YAAW0H,MAAO,KAAIC,YAAa,EAAtF;EACH,KAJD;EAKH;;EACDK,EAAAA,WAAW,CAAChI,IAAD,EAAOiH,OAAO,GAAG,IAAjB,EAAuBG,KAAK,GAAG,IAA/B,EAAqC;EAC5CpH,IAAAA,IAAI,GAAG,KAAK5Z,KAAL,CAAW4Z,IAAX,CAAP;EACA,QAAIiI,SAAS,GAAG,CAAC,EAAE,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,SAAP,KAAqB,WAAtD,IAAqED,MAAM,CAACE,QAA9E,CAAjB;EACA,QAAIC,WAAW,GAAG,CAACJ,SAAnB,CAH4C;;EAI5C,QAAII,WAAJ,EAAiB;EACbC,MAAAA,KAAK,CAACtI,IAAD,EAAO;EAAEza,QAAAA,IAAI,EAAE;EAAR,OAAP,CAAL,CAA8BgjB,IAA9B,CAAoCC,QAAD,IAAc;EAC7C,YAAIA,QAAQ,CAACC,EAAb,EACI,OAAOD,QAAQ,CAACE,IAAT,EAAP;EACJ,aAAKtB,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,wBAAuBA,IAAK,EAArD;EACA,eAAO,IAAP;EACH,OALD,EAKGuI,IALH,CAKSG,IAAD,IAAU;EACd,eAAOA,IAAI,GAAGC,iBAAiB,CAACD,IAAD,EAAO;EAAEE,UAAAA,gBAAgB,EAAE,MAApB;EAA4BC,UAAAA,oBAAoB,EAAE;EAAlD,SAAP,CAApB,GAAyF,IAApG;EACH,OAPD,EAOGN,IAPH,CAOSO,MAAD,IAAY;EAChB,YAAIA,MAAJ,EACI,KAAK7B,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4B,KAAKyG,aAAL,CAAmBqC,MAAnB,CAA5B;EACP,OAVD;EAWH,KAZD,MAaK;EACD,UAAI1L,KAAK,GAAG,IAAI2L,KAAJ,EAAZ;EACA3L,MAAAA,KAAK,CAAC4L,WAAN,GAAoB,WAApB;;EACA5L,MAAAA,KAAK,CAAC6L,MAAN,GAAe,MAAM;EACjB,aAAKhC,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4B,KAAKyG,aAAL,CAAmBrJ,KAAnB,CAA5B;EACH,OAFD;;EAGAA,MAAAA,KAAK,CAAC8L,OAAN,GAAgB,MAAM;EAClB,aAAK9B,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,wBAAuBA,IAAK,EAArD;EACH,OAFD;;EAGA,UAAI,KAAK2G,UAAL,CAAgBY,WAAhB,CAA4BvH,IAA5B,CAAJ,EACIA,IAAI,GAAG,KAAK2G,UAAL,CAAgBY,WAAhB,CAA4BvH,IAA5B,CAAP;EACJ5C,MAAAA,KAAK,CAAC+L,GAAN,GAAYnJ,IAAZ;EACH;EACJ;;EACDoJ,EAAAA,gBAAgB,CAACpJ,IAAD,EAAOiH,OAAO,GAAG,IAAjB,EAAuBG,KAAK,GAAG,IAA/B,EAAqC;EACjD,QAAI5O,KAAK,GAAGwH,IAAI,CAACqJ,WAAL,CAAiB,GAAjB,CAAZ;EACA,QAAIrH,MAAM,GAAGxJ,KAAK,IAAI,CAAT,GAAawH,IAAI,CAACsJ,SAAL,CAAe,CAAf,EAAkB9Q,KAAK,GAAG,CAA1B,CAAb,GAA4C,EAAzD;EACAwH,IAAAA,IAAI,GAAG,KAAK5Z,KAAL,CAAW4Z,IAAX,CAAP;EACA,SAAK2G,UAAL,CAAgBkB,YAAhB,CAA6B7H,IAA7B,EAAoC5B,SAAD,IAAe;EAC9C,UAAI;EACA,YAAI2C,KAAK,GAAG,IAAI5C,YAAJ,CAAiBC,SAAjB,CAAZ;EACA,YAAI0I,MAAM,GAAG/F,KAAK,CAAC1C,KAAN,CAAY5b,MAAzB;EAAA,YAAiC8mB,KAAK,GAAG,KAAzC;;EACA,aAAK,IAAI9K,IAAT,IAAiBsC,KAAK,CAAC1C,KAAvB,EAA8B;EAC1B,eAAK2J,WAAL,CAAiBhG,MAAM,GAAGvD,IAAI,CAAC/V,IAA/B,EAAqC,CAAC8gB,SAAD,EAAYrJ,OAAZ,KAAwB;EACzD,gBAAI,CAACoJ,KAAL,EAAY;EACR9K,cAAAA,IAAI,CAACwB,UAAL,CAAgBE,OAAhB;EACA,kBAAI,EAAE2G,MAAF,IAAY,CAAhB,EACI,KAAKG,OAAL,CAAaA,OAAb,EAAsBjH,IAAtB,EAA4Be,KAA5B;EACP;EACJ,WAND,EAMG,CAACyI,SAAD,EAAYnC,OAAZ,KAAwB;EACvB,gBAAI,CAACkC,KAAL,EACI,KAAKnC,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,+BAA8BA,IAAK,gBAAewJ,SAAU,EAArF;EACJD,YAAAA,KAAK,GAAG,IAAR;EACH,WAVD;EAWH;EACJ,OAhBD,CAiBA,OAAOE,CAAP,EAAU;EACN,aAAKrC,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,gCAA+BA,IAAK,KAAIyJ,CAAC,CAACpC,OAAQ,EAA3E;EACH;EACJ,KArBD,EAqBG,CAACK,MAAD,EAASC,YAAT,KAA0B;EACzB,WAAKP,KAAL,CAAWA,KAAX,EAAkBpH,IAAlB,EAAyB,+BAA8BA,IAAK,YAAW0H,MAAO,KAAIC,YAAa,EAA/F;EACH,KAvBD;EAwBH;;EACDzH,EAAAA,GAAG,CAACF,IAAD,EAAO;EACN,WAAO,KAAK4G,MAAL,CAAY,KAAKF,UAAL,GAAkB1G,IAA9B,CAAP;EACH;;EACD0J,EAAAA,OAAO,CAAC1J,IAAD,EAAO;EACVA,IAAAA,IAAI,GAAG,KAAK0G,UAAL,GAAkB1G,IAAzB;EACA,QAAImH,KAAK,GAAG,KAAKP,MAAL,CAAY5G,IAAZ,CAAZ;EACA,QAAImH,KAAJ,EACI,OAAOA,KAAP;EACJ,QAAIC,KAAK,GAAG,KAAKP,MAAL,CAAY7G,IAAZ,CAAZ;EACA,UAAMnW,KAAK,CAAC,sBAAsBmW,IAAtB,IAA8BoH,KAAK,GAAG,OAAOA,KAAV,GAAkB,EAArD,CAAD,CAAX;EACH;;EACDuC,EAAAA,MAAM,CAAC3J,IAAD,EAAO;EACTA,IAAAA,IAAI,GAAG,KAAK0G,UAAL,GAAkB1G,IAAzB;EACA,QAAImH,KAAK,GAAG,KAAKP,MAAL,CAAY5G,IAAZ,CAAZ;EACA,QAAImH,KAAK,CAAC5L,OAAV,EACI4L,KAAK,CAAC5L,OAAN;EACJ,WAAO,KAAKqL,MAAL,CAAY5G,IAAZ,CAAP;EACA,WAAOmH,KAAP;EACH;;EACDyC,EAAAA,SAAS,GAAG;EACR,SAAK,IAAI3M,GAAT,IAAgB,KAAK2J,MAArB,EAA6B;EACzB,UAAIO,KAAK,GAAG,KAAKP,MAAL,CAAY3J,GAAZ,CAAZ;EACA,UAAIkK,KAAK,CAAC5L,OAAV,EACI4L,KAAK,CAAC5L,OAAN;EACP;;EACD,SAAKqL,MAAL,GAAc,EAAd;EACH;;EACDiD,EAAAA,iBAAiB,GAAG;EAChB,WAAO,KAAK/C,MAAL,IAAe,CAAtB;EACH;;EACDgD,EAAAA,SAAS,GAAG;EACR,WAAO,KAAKhD,MAAZ;EACH;;EACDiD,EAAAA,SAAS,GAAG;EACR,WAAO,KAAKhD,MAAZ;EACH;;EACDxL,EAAAA,OAAO,GAAG;EACN,SAAKqO,SAAL;EACH;;EACDI,EAAAA,SAAS,GAAG;EACR,WAAOC,MAAM,CAACC,IAAP,CAAY,KAAKrD,MAAjB,EAAyBpkB,MAAzB,GAAkC,CAAzC;EACH;;EACD0nB,EAAAA,SAAS,GAAG;EACR,WAAO,KAAKtD,MAAZ;EACH;;EAnKyB;EAqKvB,MAAMG,UAAN,CAAiB;EACpBllB,EAAAA,WAAW,GAAG;EACV,SAAKsoB,SAAL,GAAiB,EAAjB;EACA,SAAK7C,WAAL,GAAmB,EAAnB;EACH;;EACD8C,EAAAA,eAAe,CAACC,OAAD,EAAU;EACrB,QAAI,CAACA,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAL,EAAkC;EAC9B,YAAM,IAAI1gB,KAAJ,CAAU,iBAAV,CAAN;EACH;;EACD,QAAI2gB,SAAS,GAAGF,OAAO,CAACtO,OAAR,CAAgB,SAAhB,CAAhB;;EACA,QAAIwO,SAAS,IAAI,CAAC,CAAlB,EAAqB;EACjBA,MAAAA,SAAS,IAAI,UAAU/nB,MAAvB;EACA,aAAOgoB,IAAI,CAACH,OAAO,CAAC/mB,MAAR,CAAeinB,SAAf,CAAD,CAAX;EACH,KAHD,MAIK;EACD,aAAOF,OAAO,CAAC/mB,MAAR,CAAe+mB,OAAO,CAACtO,OAAR,CAAgB,GAAhB,IAAuB,CAAtC,CAAP;EACH;EACJ;;EACD0O,EAAAA,kBAAkB,CAACC,MAAD,EAAS;EACvB,QAAIC,aAAa,GAAG1C,MAAM,CAACuC,IAAP,CAAYE,MAAZ,CAApB;EACA,QAAIlhB,GAAG,GAAGmhB,aAAa,CAACnoB,MAAxB;EACA,QAAIooB,KAAK,GAAG,IAAIC,UAAJ,CAAerhB,GAAf,CAAZ;;EACA,SAAK,IAAIlH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkH,GAApB,EAAyBlH,CAAC,EAA1B,EAA8B;EAC1BsoB,MAAAA,KAAK,CAACtoB,CAAD,CAAL,GAAWqoB,aAAa,CAACG,UAAd,CAAyBxoB,CAAzB,CAAX;EACH;;EACD,WAAOsoB,KAAP;EACH;;EACDG,EAAAA,mBAAmB,CAACV,OAAD,EAAU;EACzB,QAAI,CAACA,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAL,EAAkC;EAC9B,YAAM,IAAI1gB,KAAJ,CAAU,iBAAV,CAAN;EACH;;EACD,QAAI2gB,SAAS,GAAGF,OAAO,CAACtO,OAAR,CAAgB,SAAhB,CAAhB;EACA,QAAIwO,SAAS,IAAI,CAAC,CAAlB,EACI,MAAM,IAAI3gB,KAAJ,CAAU,wBAAV,CAAN;EACJ2gB,IAAAA,SAAS,IAAI,UAAU/nB,MAAvB;EACA,WAAO,KAAKioB,kBAAL,CAAwBJ,OAAO,CAAC/mB,MAAR,CAAeinB,SAAf,CAAxB,CAAP;EACH;;EACD3C,EAAAA,YAAY,CAACoD,GAAD,EAAMhE,OAAN,EAAeG,KAAf,EAAsB;EAC9B,QAAI,KAAKhhB,KAAL,CAAW6kB,GAAX,EAAgBhE,OAAhB,EAAyBG,KAAzB,CAAJ,EACI;;EACJ,QAAI,KAAKG,WAAL,CAAiB0D,GAAjB,CAAJ,EAA2B;EACvB,UAAI;EACA,YAAIX,OAAO,GAAG,KAAK/C,WAAL,CAAiB0D,GAAjB,CAAd;EACA,aAAKC,MAAL,CAAYD,GAAZ,EAAiB,GAAjB,EAAsB,KAAKZ,eAAL,CAAqBC,OAArB,CAAtB;EACH,OAHD,CAIA,OAAOb,CAAP,EAAU;EACN,aAAKyB,MAAL,CAAYD,GAAZ,EAAiB,GAAjB,EAAsBE,IAAI,CAACC,SAAL,CAAe3B,CAAf,CAAtB;EACH;;EACD;EACH;;EACD,QAAI4B,OAAO,GAAG,IAAIC,cAAJ,EAAd;EACAD,IAAAA,OAAO,CAACE,gBAAR,CAAyB,WAAzB;EACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoBP,GAApB,EAAyB,IAAzB;;EACA,QAAIQ,IAAI,GAAG,MAAM;EACb,WAAKP,MAAL,CAAYD,GAAZ,EAAiBI,OAAO,CAAC3D,MAAzB,EAAiC2D,OAAO,CAAC1D,YAAzC;EACH,KAFD;;EAGA0D,IAAAA,OAAO,CAACpC,MAAR,GAAiBwC,IAAjB;EACAJ,IAAAA,OAAO,CAACnC,OAAR,GAAkBuC,IAAlB;EACAJ,IAAAA,OAAO,CAACK,IAAR;EACH;;EACD3D,EAAAA,YAAY,CAACkD,GAAD,EAAMhE,OAAN,EAAeG,KAAf,EAAsB;EAC9B,SAAKS,YAAL,CAAkBoD,GAAlB,EAAwB7b,IAAD,IAAU;EAC7B6X,MAAAA,OAAO,CAACkE,IAAI,CAACQ,KAAL,CAAWvc,IAAX,CAAD,CAAP;EACH,KAFD,EAEGgY,KAFH;EAGH;;EACDK,EAAAA,cAAc,CAACwD,GAAD,EAAMhE,OAAN,EAAeG,KAAf,EAAsB;EAChC,QAAI,KAAKhhB,KAAL,CAAW6kB,GAAX,EAAgBhE,OAAhB,EAAyBG,KAAzB,CAAJ,EACI;;EACJ,QAAI,KAAKG,WAAL,CAAiB0D,GAAjB,CAAJ,EAA2B;EACvB,UAAI;EACA,YAAIX,OAAO,GAAG,KAAK/C,WAAL,CAAiB0D,GAAjB,CAAd;EACA,aAAKC,MAAL,CAAYD,GAAZ,EAAiB,GAAjB,EAAsB,KAAKD,mBAAL,CAAyBV,OAAzB,CAAtB;EACH,OAHD,CAIA,OAAOb,CAAP,EAAU;EACN,aAAKyB,MAAL,CAAYD,GAAZ,EAAiB,GAAjB,EAAsBE,IAAI,CAACC,SAAL,CAAe3B,CAAf,CAAtB;EACH;;EACD;EACH;;EACD,QAAI4B,OAAO,GAAG,IAAIC,cAAJ,EAAd;EACAD,IAAAA,OAAO,CAACG,IAAR,CAAa,KAAb,EAAoBP,GAApB,EAAyB,IAAzB;EACAI,IAAAA,OAAO,CAACO,YAAR,GAAuB,aAAvB;;EACA,QAAI1C,OAAO,GAAG,MAAM;EAChB,WAAKgC,MAAL,CAAYD,GAAZ,EAAiBI,OAAO,CAAC3D,MAAzB,EAAiC2D,OAAO,CAAC7C,QAAzC;EACH,KAFD;;EAGA6C,IAAAA,OAAO,CAACpC,MAAR,GAAiB,MAAM;EACnB,UAAIoC,OAAO,CAAC3D,MAAR,IAAkB,GAAtB,EACI,KAAKwD,MAAL,CAAYD,GAAZ,EAAiB,GAAjB,EAAsB,IAAIH,UAAJ,CAAeO,OAAO,CAAC7C,QAAvB,CAAtB,EADJ,KAGIU,OAAO;EACd,KALD;;EAMAmC,IAAAA,OAAO,CAACnC,OAAR,GAAkBA,OAAlB;EACAmC,IAAAA,OAAO,CAACK,IAAR;EACH;;EACDtlB,EAAAA,KAAK,CAAC6kB,GAAD,EAAMhE,OAAN,EAAeG,KAAf,EAAsB;EACvB,QAAIgD,SAAS,GAAG,KAAKA,SAAL,CAAea,GAAf,CAAhB;;EACA,QAAI;EACA,UAAIb,SAAJ,EACI,OAAO,IAAP;EACJ,WAAKA,SAAL,CAAea,GAAf,IAAsBb,SAAS,GAAG,EAAlC;EACH,KAJD,SAKQ;EACJA,MAAAA,SAAS,CAAC/gB,IAAV,CAAe4d,OAAf,EAAwBG,KAAxB;EACH;EACJ;;EACD8D,EAAAA,MAAM,CAACD,GAAD,EAAMvD,MAAN,EAActY,IAAd,EAAoB;EACtB,QAAIgb,SAAS,GAAG,KAAKA,SAAL,CAAea,GAAf,CAAhB;EACA,WAAO,KAAKb,SAAL,CAAea,GAAf,CAAP;EACA,QAAIY,IAAI,GAAGnE,MAAM,IAAI,GAAV,GAAgB,CAACtY,IAAD,CAAhB,GAAyB,CAACsY,MAAD,EAAStY,IAAT,CAApC;;EACA,SAAK,IAAI7M,CAAC,GAAGspB,IAAI,CAACppB,MAAL,GAAc,CAAtB,EAAyBD,CAAC,GAAG4nB,SAAS,CAAC3nB,MAA5C,EAAoDF,CAAC,GAAGC,CAAxD,EAA2DD,CAAC,IAAI,CAAhE,EACI6nB,SAAS,CAAC7nB,CAAD,CAAT,CAAa4D,KAAb,CAAmB,IAAnB,EAAyB0lB,IAAzB;EACP;;EA9GmB;;EClMxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;EACA;EACA;EACA;EACA;EACO,MAAMC,KAAN,CAAY;EACfhqB,EAAAA,WAAW,CAACuI,IAAD,EAAO+E,IAAP,EAAa;EACpB,QAAI,CAACA,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAKQ,IAAL,GAAYA,IAAZ;EACA,SAAK+E,IAAL,GAAYA,IAAZ;EACH;;EANc;;ECjCnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;EACA;EACA;EACO,MAAM2c,SAAN,CAAgB;EACnBjqB,EAAAA,WAAW,CAAC4G,IAAD,EAAO;EACd,SAAKA,IAAL,GAAYA,IAAZ;EACH;;EAHkB;;EC/BvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;;EACO,MAAMsjB,YAAN,CAAmB;EACtBlqB,EAAAA,WAAW,CAACsN,IAAD,EAAOjF,QAAP,EAAiB;EACxB;EACA,SAAKiJ,aAAL,GAAqB,CAArB;EACA;;EACA,SAAKC,QAAL,GAAgB,KAAhB;EACA;EACR;;EACQ,SAAKC,OAAL,GAAe,KAAf;EACA;;EACA,SAAKJ,GAAL,GAAW,CAAX;EACA;;EACA,SAAKC,QAAL,GAAgB,CAAhB;EACA,SAAKlE,MAAL,GAAc,KAAd;EACA,QAAI,CAACG,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACM,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAK8D,GAAL,GAAW9D,IAAI,CAAC8D,GAAhB;EACA,SAAKC,QAAL,GAAgB/D,IAAI,CAAC+D,QAArB;EACA,SAAKC,aAAL,GAAqBhE,IAAI,CAACgE,aAA1B;EACA,SAAKC,QAAL,GAAgBjE,IAAI,CAACiE,QAArB;EACA,SAAKC,OAAL,GAAelE,IAAI,CAACkE,OAApB;EACA,SAAKtE,KAAL,GAAa,IAAItH,KAAJ,EAAb;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACJ,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EACI,KAAKyM,KAAL,CAAW3F,IAAX,CAAgBc,QAAQ,CAAC8hB,QAAT,CAAkB7c,IAAI,CAACJ,KAAL,CAAWzM,CAAX,EAAcmG,IAAhC,CAAhB;;EACJ,SAAKwjB,MAAL,GAAc/hB,QAAQ,CAAC8hB,QAAT,CAAkB7c,IAAI,CAAC8c,MAAL,CAAYxjB,IAA9B,CAAd;EACH;;EACDwa,EAAAA,QAAQ,GAAG;EACP,WAAO,KAAKjU,MAAZ;EACH;;EACDsG,EAAAA,MAAM,GAAG;EACL,QAAI,KAAKrC,GAAL,IAAY,CAAhB,EACI;EACJ,QAAIgZ,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIld,KAAK,GAAG,KAAKA,KAAjB;;EACA,YAAQA,KAAK,CAACvM,MAAd;EACI,WAAK,CAAL;EACI,aAAK0pB,MAAL,CAAYnd,KAAK,CAAC,CAAD,CAAjB,EAAsBkd,MAAM,CAACnJ,MAA7B,EAAqCmJ,MAAM,CAACpJ,MAA5C,EAAoD,KAAKzP,QAAzD,EAAmE,KAAKC,OAAxE,EAAiF,KAAKlE,IAAL,CAAUgd,OAA3F,EAAoG,KAAKlZ,GAAzG;EACA;;EACJ,WAAK,CAAL;EACI,aAAKmZ,MAAL,CAAYrd,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCkd,MAAM,CAACnJ,MAAvC,EAA+CmJ,MAAM,CAACpJ,MAAtD,EAA8D,KAAK1P,aAAnE,EAAkF,KAAKE,OAAvF,EAAgG,KAAKlE,IAAL,CAAUgd,OAA1G,EAAmH,KAAKjZ,QAAxH,EAAkI,KAAKD,GAAvI;EACA;EANR;EAQH;EACD;;;EACAiZ,EAAAA,MAAM,CAACpd,IAAD,EAAOud,OAAP,EAAgBC,OAAhB,EAAyBlZ,QAAzB,EAAmCC,OAAnC,EAA4C8Y,OAA5C,EAAqDhkB,KAArD,EAA4D;EAC9D,QAAIokB,CAAC,GAAGzd,IAAI,CAACiT,MAAb;EACA,QAAIwB,EAAE,GAAGgJ,CAAC,CAACzpB,CAAX;EAAA,QAAc0gB,EAAE,GAAG+I,CAAC,CAAC1pB,CAArB;EAAA,QAAwB4gB,EAAE,GAAG8I,CAAC,CAACrpB,CAA/B;EAAA,QAAkCwgB,EAAE,GAAG6I,CAAC,CAAC9mB,CAAzC;EACA,QAAI+mB,UAAU,GAAG,CAAC1d,IAAI,CAAC6T,OAAN,GAAgB7T,IAAI,CAAC0T,SAAtC;EAAA,QAAiDiK,EAAE,GAAG,CAAtD;EAAA,QAAyDC,EAAE,GAAG,CAA9D;;EACA,YAAQ5d,IAAI,CAACK,IAAL,CAAU6S,aAAlB;EACI,WAAKC,aAAa,CAAC8B,eAAnB;EACI0I,QAAAA,EAAE,GAAGJ,OAAO,GAAGvd,IAAI,CAACgU,MAApB;EACA4J,QAAAA,EAAE,GAAGJ,OAAO,GAAGxd,IAAI,CAAC+T,MAApB;EACA;;EACJ,WAAKZ,aAAa,CAAC+B,sBAAnB;EACI,YAAIC,CAAC,GAAG3f,IAAI,CAACa,GAAL,CAASoe,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAxB,KAA+BF,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAA9C,CAAR;EACA,YAAIkJ,EAAE,GAAGpJ,EAAE,GAAGzU,IAAI,CAAC5E,QAAL,CAAcU,MAA5B;EACA,YAAIgiB,EAAE,GAAGnJ,EAAE,GAAG3U,IAAI,CAAC5E,QAAL,CAAcW,MAA5B;EACA2Y,QAAAA,EAAE,GAAG,CAACoJ,EAAD,GAAM3I,CAAN,GAAUnV,IAAI,CAAC5E,QAAL,CAAcU,MAA7B;EACA8Y,QAAAA,EAAE,GAAGiJ,EAAE,GAAG1I,CAAL,GAASnV,IAAI,CAAC5E,QAAL,CAAcW,MAA5B;EACA2hB,QAAAA,UAAU,IAAIloB,IAAI,CAAC6f,KAAL,CAAWyI,EAAX,EAAeD,EAAf,IAAqB1oB,SAAS,CAAC8B,MAA7C;EACJ;;EACA;EACI,YAAIlB,CAAC,GAAGwnB,OAAO,GAAGE,CAAC,CAACzJ,MAApB;EAAA,YAA4B7d,CAAC,GAAGqnB,OAAO,GAAGC,CAAC,CAAC1J,MAA5C;EACA,YAAIpd,CAAC,GAAG8d,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAvB;EACAgJ,QAAAA,EAAE,GAAG,CAAC5nB,CAAC,GAAG6e,EAAJ,GAASze,CAAC,GAAGue,EAAd,IAAoB/d,CAApB,GAAwBqJ,IAAI,CAACwT,EAAlC;EACAoK,QAAAA,EAAE,GAAG,CAACznB,CAAC,GAAGse,EAAJ,GAAS1e,CAAC,GAAG4e,EAAd,IAAoBhe,CAApB,GAAwBqJ,IAAI,CAACyT,EAAlC;EAjBR;;EAmBAiK,IAAAA,UAAU,IAAIloB,IAAI,CAAC6f,KAAL,CAAWuI,EAAX,EAAeD,EAAf,IAAqBxoB,SAAS,CAAC8B,MAA7C;EACA,QAAI+I,IAAI,CAAC2T,OAAL,GAAe,CAAnB,EACI+J,UAAU,IAAI,GAAd;EACJ,QAAIA,UAAU,GAAG,GAAjB,EACIA,UAAU,IAAI,GAAd,CADJ,KAEK,IAAIA,UAAU,GAAG,CAAC,GAAlB,EACDA,UAAU,IAAI,GAAd;EACJ,QAAInJ,EAAE,GAAGvU,IAAI,CAAC2T,OAAd;EAAA,QAAuBa,EAAE,GAAGxU,IAAI,CAAC4T,OAAjC;;EACA,QAAItP,QAAQ,IAAIC,OAAhB,EAAyB;EACrB,cAAQvE,IAAI,CAACK,IAAL,CAAU6S,aAAlB;EACI,aAAKC,aAAa,CAACqC,OAAnB;EACA,aAAKrC,aAAa,CAACsC,mBAAnB;EACIkI,UAAAA,EAAE,GAAGJ,OAAO,GAAGvd,IAAI,CAACgU,MAApB;EACA4J,UAAAA,EAAE,GAAGJ,OAAO,GAAGxd,IAAI,CAAC+T,MAApB;EAJR;;EAMA,UAAIhgB,CAAC,GAAGiM,IAAI,CAACK,IAAL,CAAU3M,MAAV,GAAmB6gB,EAA3B;EAAA,UAA+BwJ,EAAE,GAAGvoB,IAAI,CAACoB,IAAL,CAAU+mB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAApC;;EACA,UAAKtZ,QAAQ,IAAIyZ,EAAE,GAAGhqB,CAAlB,IAAyBwQ,OAAO,IAAIwZ,EAAE,GAAGhqB,CAAjB,IAAuBA,CAAC,GAAG,MAAvD,EAA+D;EAC3D,YAAIohB,CAAC,GAAG,CAAC4I,EAAE,GAAGhqB,CAAL,GAAS,CAAV,IAAesF,KAAf,GAAuB,CAA/B;EACAkb,QAAAA,EAAE,IAAIY,CAAN;EACA,YAAIkI,OAAJ,EACI7I,EAAE,IAAIW,CAAN;EACP;EACJ;;EACDnV,IAAAA,IAAI,CAACoU,wBAAL,CAA8BpU,IAAI,CAACwT,EAAnC,EAAuCxT,IAAI,CAACyT,EAA5C,EAAgDzT,IAAI,CAAC0T,SAAL,GAAiBgK,UAAU,GAAGrkB,KAA9E,EAAqFkb,EAArF,EAAyFC,EAAzF,EAA6FxU,IAAI,CAAC6T,OAAlG,EAA2G7T,IAAI,CAAC8T,OAAhH;EACH;EACD;EACJ;;;EACIwJ,EAAAA,MAAM,CAACrK,MAAD,EAAS+K,KAAT,EAAgBT,OAAhB,EAAyBC,OAAzB,EAAkCS,OAAlC,EAA2C1Z,OAA3C,EAAoD8Y,OAApD,EAA6DjZ,QAA7D,EAAuE/K,KAAvE,EAA8E;EAChF,QAAI6kB,EAAE,GAAGjL,MAAM,CAACO,EAAhB;EAAA,QAAoB2K,EAAE,GAAGlL,MAAM,CAACQ,EAAhC;EAAA,QAAoC2K,GAAG,GAAGnL,MAAM,CAACU,OAAjD;EAAA,QAA0D0K,GAAG,GAAGpL,MAAM,CAACW,OAAvE;EAAA,QAAgFW,EAAE,GAAG6J,GAArF;EAAA,QAA0F5J,EAAE,GAAG6J,GAA/F;EAAA,QAAoGC,GAAG,GAAGN,KAAK,CAACrK,OAAhH;EACA,QAAI4K,GAAG,GAAG,CAAV;EAAA,QAAaC,GAAG,GAAG,CAAnB;EAAA,QAAsBC,EAAE,GAAG,CAA3B;;EACA,QAAIL,GAAG,GAAG,CAAV,EAAa;EACTA,MAAAA,GAAG,GAAG,CAACA,GAAP;EACAG,MAAAA,GAAG,GAAG,GAAN;EACAE,MAAAA,EAAE,GAAG,CAAC,CAAN;EACH,KAJD,MAKK;EACDF,MAAAA,GAAG,GAAG,CAAN;EACAE,MAAAA,EAAE,GAAG,CAAL;EACH;;EACD,QAAIJ,GAAG,GAAG,CAAV,EAAa;EACTA,MAAAA,GAAG,GAAG,CAACA,GAAP;EACAI,MAAAA,EAAE,GAAG,CAACA,EAAN;EACH;;EACD,QAAIH,GAAG,GAAG,CAAV,EAAa;EACTA,MAAAA,GAAG,GAAG,CAACA,GAAP;EACAE,MAAAA,GAAG,GAAG,GAAN;EACH,KAHD,MAKIA,GAAG,GAAG,CAAN;;EACJ,QAAIE,EAAE,GAAGV,KAAK,CAACxK,EAAf;EAAA,QAAmBmL,EAAE,GAAG,CAAxB;EAAA,QAA2BC,GAAG,GAAG,CAAjC;EAAA,QAAoCC,GAAG,GAAG,CAA1C;EAAA,QAA6C7qB,CAAC,GAAGif,MAAM,CAACjf,CAAxD;EAAA,QAA2DD,CAAC,GAAGkf,MAAM,CAAClf,CAAtE;EAAA,QAAyEK,CAAC,GAAG6e,MAAM,CAAC7e,CAApF;EAAA,QAAuFuC,CAAC,GAAGsc,MAAM,CAACtc,CAAlG;EACA,QAAIF,CAAC,GAAGjB,IAAI,CAACa,GAAL,CAAS+nB,GAAG,GAAGC,GAAf,KAAuB,MAA/B;;EACA,QAAI,CAAC5nB,CAAD,IAAM8N,OAAV,EAAmB;EACfoa,MAAAA,EAAE,GAAG,CAAL;EACAC,MAAAA,GAAG,GAAG5qB,CAAC,GAAG0qB,EAAJ,GAASzL,MAAM,CAACe,MAAtB;EACA6K,MAAAA,GAAG,GAAGzqB,CAAC,GAAGsqB,EAAJ,GAASzL,MAAM,CAACc,MAAtB;EACH,KAJD,MAKK;EACD4K,MAAAA,EAAE,GAAGX,KAAK,CAACvK,EAAX;EACAmL,MAAAA,GAAG,GAAG5qB,CAAC,GAAG0qB,EAAJ,GAAS3qB,CAAC,GAAG4qB,EAAb,GAAkB1L,MAAM,CAACe,MAA/B;EACA6K,MAAAA,GAAG,GAAGzqB,CAAC,GAAGsqB,EAAJ,GAAS/nB,CAAC,GAAGgoB,EAAb,GAAkB1L,MAAM,CAACc,MAA/B;EACH;;EACD,QAAI+K,EAAE,GAAG7L,MAAM,CAACA,MAAhB;EACAjf,IAAAA,CAAC,GAAG8qB,EAAE,CAAC9qB,CAAP;EACAD,IAAAA,CAAC,GAAG+qB,EAAE,CAAC/qB,CAAP;EACAK,IAAAA,CAAC,GAAG0qB,EAAE,CAAC1qB,CAAP;EACAuC,IAAAA,CAAC,GAAGmoB,EAAE,CAACnoB,CAAP;EACA,QAAIgM,EAAE,GAAG,KAAK3O,CAAC,GAAG2C,CAAJ,GAAQ5C,CAAC,GAAGK,CAAjB,CAAT;EAAA,QAA8B2B,CAAC,GAAG6oB,GAAG,GAAGE,EAAE,CAAC9K,MAA3C;EAAA,QAAmD7d,CAAC,GAAG0oB,GAAG,GAAGC,EAAE,CAAC/K,MAAhE;EACA,QAAIhV,EAAE,GAAG,CAAChJ,CAAC,GAAGY,CAAJ,GAAQR,CAAC,GAAGpC,CAAb,IAAkB4O,EAAlB,GAAuBub,EAAhC;EAAA,QAAoClf,EAAE,GAAG,CAAC7I,CAAC,GAAGnC,CAAJ,GAAQ+B,CAAC,GAAG3B,CAAb,IAAkBuO,EAAlB,GAAuBwb,EAAhE;EACA,QAAIY,EAAE,GAAGvpB,IAAI,CAACoB,IAAL,CAAUmI,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAT;EAAA,QAAuCggB,EAAE,GAAGhB,KAAK,CAAC3d,IAAN,CAAW3M,MAAX,GAAoB4qB,GAAhE;EAAA,QAAqEW,EAArE;EAAA,QAAyEC,EAAzE;;EACA,QAAIH,EAAE,GAAG,MAAT,EAAiB;EACb,WAAK3B,MAAL,CAAYnK,MAAZ,EAAoBsK,OAApB,EAA6BC,OAA7B,EAAsC,KAAtC,EAA6CjZ,OAA7C,EAAsD,KAAtD,EAA6DlL,KAA7D;EACA2kB,MAAAA,KAAK,CAAC5J,wBAAN,CAA+BsK,EAA/B,EAAmCC,EAAnC,EAAuC,CAAvC,EAA0CX,KAAK,CAACrK,OAAhD,EAAyDqK,KAAK,CAACpK,OAA/D,EAAwEoK,KAAK,CAACnK,OAA9E,EAAuFmK,KAAK,CAAClK,OAA7F;EACA;EACH;;EACD/d,IAAAA,CAAC,GAAGwnB,OAAO,GAAGuB,EAAE,CAAC9K,MAAjB;EACA7d,IAAAA,CAAC,GAAGqnB,OAAO,GAAGsB,EAAE,CAAC/K,MAAjB;EACA,QAAI4J,EAAE,GAAG,CAAC5nB,CAAC,GAAGY,CAAJ,GAAQR,CAAC,GAAGpC,CAAb,IAAkB4O,EAAlB,GAAuBub,EAAhC;EAAA,QAAoCN,EAAE,GAAG,CAACznB,CAAC,GAAGnC,CAAJ,GAAQ+B,CAAC,GAAG3B,CAAb,IAAkBuO,EAAlB,GAAuBwb,EAAhE;EACA,QAAIJ,EAAE,GAAGJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAxB;;EACA,QAAIxZ,QAAQ,IAAI,CAAhB,EAAmB;EACfA,MAAAA,QAAQ,IAAIga,GAAG,IAAIE,GAAG,GAAG,CAAV,CAAH,GAAkB,GAA9B;EACA,UAAIa,EAAE,GAAG3pB,IAAI,CAACoB,IAAL,CAAUmnB,EAAV,CAAT;EAAA,UAAwBqB,EAAE,GAAGD,EAAE,GAAGJ,EAAL,GAAUC,EAAE,GAAGZ,GAAf,GAAqBha,QAAlD;;EACA,UAAIgb,EAAE,GAAG,CAAT,EAAY;EACR,YAAI3B,CAAC,GAAGjoB,IAAI,CAACJ,GAAL,CAAS,CAAT,EAAYgqB,EAAE,IAAIhb,QAAQ,GAAG,CAAf,CAAd,IAAmC,CAA3C;EACAqZ,QAAAA,CAAC,GAAG,CAAC2B,EAAE,GAAGhb,QAAQ,IAAI,IAAIqZ,CAAC,GAAGA,CAAZ,CAAd,IAAgC0B,EAApC;EACAxB,QAAAA,EAAE,IAAIF,CAAC,GAAGE,EAAV;EACAC,QAAAA,EAAE,IAAIH,CAAC,GAAGG,EAAV;EACAG,QAAAA,EAAE,GAAGJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAApB;EACH;EACJ;;EACDjR,IAAAA,KAAK,EAAE,IAAIlW,CAAJ,EAAO;EACVuoB,MAAAA,EAAE,IAAIZ,GAAN;EACA,UAAI3oB,GAAG,GAAG,CAACsoB,EAAE,GAAGgB,EAAE,GAAGA,EAAV,GAAeC,EAAE,GAAGA,EAArB,KAA4B,IAAID,EAAJ,GAASC,EAArC,CAAV;;EACA,UAAIvpB,GAAG,GAAG,CAAC,CAAX,EAAc;EACVA,QAAAA,GAAG,GAAG,CAAC,CAAP;EACAypB,QAAAA,EAAE,GAAG1pB,IAAI,CAACsB,EAAL,GAAUmnB,OAAf;EACH,OAHD,MAIK,IAAIxoB,GAAG,GAAG,CAAV,EAAa;EACdA,QAAAA,GAAG,GAAG,CAAN;EACAypB,QAAAA,EAAE,GAAG,CAAL;;EACA,YAAI3a,OAAJ,EAAa;EACTvQ,UAAAA,CAAC,GAAG,CAACwB,IAAI,CAACoB,IAAL,CAAUmnB,EAAV,KAAiBgB,EAAE,GAAGC,EAAtB,IAA4B,CAA7B,IAAkC3lB,KAAlC,GAA0C,CAA9C;EACAkb,UAAAA,EAAE,IAAIvgB,CAAN;EACA,cAAIqpB,OAAJ,EACI7I,EAAE,IAAIxgB,CAAN;EACP;EACJ,OATI,MAWDkrB,EAAE,GAAG1pB,IAAI,CAAC6pB,IAAL,CAAU5pB,GAAV,IAAiBwoB,OAAtB;;EACJjqB,MAAAA,CAAC,GAAG+qB,EAAE,GAAGC,EAAE,GAAGvpB,GAAd;EACA1B,MAAAA,CAAC,GAAGirB,EAAE,GAAGxpB,IAAI,CAACI,GAAL,CAASspB,EAAT,CAAT;EACAD,MAAAA,EAAE,GAAGzpB,IAAI,CAAC6f,KAAL,CAAWuI,EAAE,GAAG5pB,CAAL,GAAS2pB,EAAE,GAAG5pB,CAAzB,EAA4B4pB,EAAE,GAAG3pB,CAAL,GAAS4pB,EAAE,GAAG7pB,CAA1C,CAAL;EACH,KAtBM,MAuBF;EACDC,MAAAA,CAAC,GAAGoqB,GAAG,GAAGY,EAAV;EACAjrB,MAAAA,CAAC,GAAGsqB,GAAG,GAAGW,EAAV;EACA,UAAIM,EAAE,GAAGtrB,CAAC,GAAGA,CAAb;EAAA,UAAgBurB,EAAE,GAAGxrB,CAAC,GAAGA,CAAzB;EAAA,UAA4ByrB,EAAE,GAAGhqB,IAAI,CAAC6f,KAAL,CAAWuI,EAAX,EAAeD,EAAf,CAAjC;EACAvpB,MAAAA,CAAC,GAAGmrB,EAAE,GAAGR,EAAL,GAAUA,EAAV,GAAeO,EAAE,GAAGvB,EAApB,GAAyBuB,EAAE,GAAGC,EAAlC;EACA,UAAIE,EAAE,GAAG,CAAC,CAAD,GAAKF,EAAL,GAAUR,EAAnB;EAAA,UAAuBW,EAAE,GAAGH,EAAE,GAAGD,EAAjC;EACA3oB,MAAAA,CAAC,GAAG8oB,EAAE,GAAGA,EAAL,GAAU,IAAIC,EAAJ,GAAStrB,CAAvB;;EACA,UAAIuC,CAAC,IAAI,CAAT,EAAY;EACR,YAAIgpB,CAAC,GAAGnqB,IAAI,CAACoB,IAAL,CAAUD,CAAV,CAAR;EACA,YAAI8oB,EAAE,GAAG,CAAT,EACIE,CAAC,GAAG,CAACA,CAAL;EACJA,QAAAA,CAAC,GAAG,EAAEF,EAAE,GAAGE,CAAP,IAAY,GAAhB;EACA,YAAIC,EAAE,GAAGD,CAAC,GAAGD,EAAb;EAAA,YAAiBpV,EAAE,GAAGlW,CAAC,GAAGurB,CAA1B;EACA,YAAI9rB,CAAC,GAAG2B,IAAI,CAACa,GAAL,CAASupB,EAAT,IAAepqB,IAAI,CAACa,GAAL,CAASiU,EAAT,CAAf,GAA8BsV,EAA9B,GAAmCtV,EAA3C;;EACA,YAAIzW,CAAC,GAAGA,CAAJ,IAASkqB,EAAb,EAAiB;EACb5nB,UAAAA,CAAC,GAAGX,IAAI,CAACoB,IAAL,CAAUmnB,EAAE,GAAGlqB,CAAC,GAAGA,CAAnB,IAAwBoqB,OAA5B;EACAgB,UAAAA,EAAE,GAAGO,EAAE,GAAGhqB,IAAI,CAAC6f,KAAL,CAAWlf,CAAX,EAActC,CAAd,CAAV;EACAqrB,UAAAA,EAAE,GAAG1pB,IAAI,CAAC6f,KAAL,CAAWlf,CAAC,GAAGkoB,GAAf,EAAoB,CAACxqB,CAAC,GAAGkrB,EAAL,IAAWX,GAA/B,CAAL;EACA,gBAAMzR,KAAN;EACH;EACJ;;EACD,UAAIkT,QAAQ,GAAG1qB,SAAS,CAAC2B,EAAzB;EAAA,UAA6BgpB,IAAI,GAAGf,EAAE,GAAG/qB,CAAzC;EAAA,UAA4C+rB,OAAO,GAAGD,IAAI,GAAGA,IAA7D;EAAA,UAAmEE,IAAI,GAAG,CAA1E;EACA,UAAIC,QAAQ,GAAG,CAAf;EAAA,UAAkBC,IAAI,GAAGnB,EAAE,GAAG/qB,CAA9B;EAAA,UAAiCmsB,OAAO,GAAGD,IAAI,GAAGA,IAAlD;EAAA,UAAwDE,IAAI,GAAG,CAA/D;EACAhsB,MAAAA,CAAC,GAAG,CAACJ,CAAD,GAAK+qB,EAAL,IAAWO,EAAE,GAAGC,EAAhB,CAAJ;;EACA,UAAInrB,CAAC,IAAI,CAAC,CAAN,IAAWA,CAAC,IAAI,CAApB,EAAuB;EACnBA,QAAAA,CAAC,GAAGoB,IAAI,CAAC6pB,IAAL,CAAUjrB,CAAV,CAAJ;EACA2B,QAAAA,CAAC,GAAG/B,CAAC,GAAGwB,IAAI,CAACC,GAAL,CAASrB,CAAT,CAAJ,GAAkB2qB,EAAtB;EACA5oB,QAAAA,CAAC,GAAGpC,CAAC,GAAGyB,IAAI,CAACI,GAAL,CAASxB,CAAT,CAAR;EACAuC,QAAAA,CAAC,GAAGZ,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAhB;;EACA,YAAIQ,CAAC,GAAGopB,OAAR,EAAiB;EACbF,UAAAA,QAAQ,GAAGzrB,CAAX;EACA2rB,UAAAA,OAAO,GAAGppB,CAAV;EACAmpB,UAAAA,IAAI,GAAG/pB,CAAP;EACAiqB,UAAAA,IAAI,GAAG7pB,CAAP;EACH;;EACD,YAAIQ,CAAC,GAAGwpB,OAAR,EAAiB;EACbF,UAAAA,QAAQ,GAAG7rB,CAAX;EACA+rB,UAAAA,OAAO,GAAGxpB,CAAV;EACAupB,UAAAA,IAAI,GAAGnqB,CAAP;EACAqqB,UAAAA,IAAI,GAAGjqB,CAAP;EACH;EACJ;;EACD,UAAI4nB,EAAE,IAAI,CAACgC,OAAO,GAAGI,OAAX,IAAsB,GAAhC,EAAqC;EACjClB,QAAAA,EAAE,GAAGO,EAAE,GAAGhqB,IAAI,CAAC6f,KAAL,CAAW2K,IAAI,GAAG/B,OAAlB,EAA2B6B,IAA3B,CAAV;EACAZ,QAAAA,EAAE,GAAGW,QAAQ,GAAG5B,OAAhB;EACH,OAHD,MAIK;EACDgB,QAAAA,EAAE,GAAGO,EAAE,GAAGhqB,IAAI,CAAC6f,KAAL,CAAW+K,IAAI,GAAGnC,OAAlB,EAA2BiC,IAA3B,CAAV;EACAhB,QAAAA,EAAE,GAAGe,QAAQ,GAAGhC,OAAhB;EACH;EACJ;;EACD,QAAIoC,EAAE,GAAG7qB,IAAI,CAAC6f,KAAL,CAAWsJ,EAAX,EAAeD,EAAf,IAAqBD,EAA9B;EACA,QAAIre,QAAQ,GAAG6S,MAAM,CAACS,SAAtB;EACAuL,IAAAA,EAAE,GAAG,CAACA,EAAE,GAAGoB,EAAN,IAAYlrB,SAAS,CAAC8B,MAAtB,GAA+BsnB,GAA/B,GAAqCne,QAA1C;EACA,QAAI6e,EAAE,GAAG,GAAT,EACIA,EAAE,IAAI,GAAN,CADJ,KAEK,IAAIA,EAAE,GAAG,CAAC,GAAV;EACDA,MAAAA,EAAE,IAAI,GAAN;EACJhM,IAAAA,MAAM,CAACmB,wBAAP,CAAgC8J,EAAhC,EAAoCC,EAApC,EAAwC/d,QAAQ,GAAG6e,EAAE,GAAG5lB,KAAxD,EAA+Dkb,EAA/D,EAAmEC,EAAnE,EAAuE,CAAvE,EAA0E,CAA1E;EACApU,IAAAA,QAAQ,GAAG4d,KAAK,CAACtK,SAAjB;EACAwL,IAAAA,EAAE,GAAG,CAAC,CAACA,EAAE,GAAGmB,EAAN,IAAYlrB,SAAS,CAAC8B,MAAtB,GAA+B+mB,KAAK,CAACnK,OAAtC,IAAiD4K,EAAjD,GAAsDD,GAAtD,GAA4Dpe,QAAjE;EACA,QAAI8e,EAAE,GAAG,GAAT,EACIA,EAAE,IAAI,GAAN,CADJ,KAEK,IAAIA,EAAE,GAAG,CAAC,GAAV;EACDA,MAAAA,EAAE,IAAI,GAAN;EACJlB,IAAAA,KAAK,CAAC5J,wBAAN,CAA+BsK,EAA/B,EAAmCC,EAAnC,EAAuCve,QAAQ,GAAG8e,EAAE,GAAG7lB,KAAvD,EAA8D2kB,KAAK,CAACrK,OAApE,EAA6EqK,KAAK,CAACpK,OAAnF,EAA4FoK,KAAK,CAACnK,OAAlG,EAA2GmK,KAAK,CAAClK,OAAjH;EACH;;EAxPqB;;EClC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EACO,MAAMwM,gBAAN,SAA+BhJ,cAA/B,CAA8C;EACjDvkB,EAAAA,WAAW,CAAC4G,IAAD,EAAO;EACd,UAAMA,IAAN,EAAY,CAAZ,EAAe,KAAf;EACA;;EACA,SAAKsG,KAAL,GAAa,IAAItH,KAAJ,EAAb;EACA;;EACA,SAAK0L,aAAL,GAAqB,CAArB;EACA;;EACA,SAAKC,QAAL,GAAgB,KAAhB;EACA;EACR;;EACQ,SAAKC,OAAL,GAAe,KAAf;EACA;EACR;;EACQ,SAAK8Y,OAAL,GAAe,KAAf;EACA;;EACA,SAAKlZ,GAAL,GAAW,CAAX;EACA;;EACA,SAAKC,QAAL,GAAgB,CAAhB;EACH;;EAnBgD;;EChCrD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EACO,MAAMmc,kBAAN,SAAiCjJ,cAAjC,CAAgD;EACnDvkB,EAAAA,WAAW,CAAC4G,IAAD,EAAO;EACd,UAAMA,IAAN,EAAY,CAAZ,EAAe,KAAf;EACA;;EACA,SAAKsG,KAAL,GAAa,IAAItH,KAAJ,EAAb;EACA,SAAKkM,SAAL,GAAiB,CAAjB;EACA,SAAKC,IAAL,GAAY,CAAZ;EACA,SAAKC,IAAL,GAAY,CAAZ;EACH;;EARkD;EAUvD;EACA;EACA;;EACO,IAAIyb,YAAJ;;EACP,CAAC,UAAUA,YAAV,EAAwB;EACrBA,EAAAA,YAAY,CAACA,YAAY,CAAC,OAAD,CAAZ,GAAwB,CAAzB,CAAZ,GAA0C,OAA1C;EACAA,EAAAA,YAAY,CAACA,YAAY,CAAC,SAAD,CAAZ,GAA0B,CAA3B,CAAZ,GAA4C,SAA5C;EACH,CAHD,EAGGA,YAAY,KAAKA,YAAY,GAAG,EAApB,CAHf;EAIA;EACA;EACA;;;EACO,IAAIC,WAAJ;;EACP,CAAC,UAAUA,WAAV,EAAuB;EACpBA,EAAAA,WAAW,CAACA,WAAW,CAAC,QAAD,CAAX,GAAwB,CAAzB,CAAX,GAAyC,QAAzC;EACAA,EAAAA,WAAW,CAACA,WAAW,CAAC,OAAD,CAAX,GAAuB,CAAxB,CAAX,GAAwC,OAAxC;EACAA,EAAAA,WAAW,CAACA,WAAW,CAAC,SAAD,CAAX,GAAyB,CAA1B,CAAX,GAA0C,SAA1C;EACAA,EAAAA,WAAW,CAACA,WAAW,CAAC,cAAD,CAAX,GAA8B,CAA/B,CAAX,GAA+C,cAA/C;EACH,CALD,EAKGA,WAAW,KAAKA,WAAW,GAAG,EAAnB,CALd;EAMA;EACA;EACA;;;EACO,IAAIC,UAAJ;;EACP,CAAC,UAAUA,UAAV,EAAsB;EACnBA,EAAAA,UAAU,CAACA,UAAU,CAAC,SAAD,CAAV,GAAwB,CAAzB,CAAV,GAAwC,SAAxC;EACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,OAAD,CAAV,GAAsB,CAAvB,CAAV,GAAsC,OAAtC;EACAA,EAAAA,UAAU,CAACA,UAAU,CAAC,YAAD,CAAV,GAA2B,CAA5B,CAAV,GAA2C,YAA3C;EACH,CAJD,EAIGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAJb;;EChEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EACA;EACA;EACA;;EACO,MAAMC,cAAN,CAAqB;EACxB5tB,EAAAA,WAAW,CAACsN,IAAD,EAAOjF,QAAP,EAAiB;EACxB;EACA,SAAKmK,QAAL,GAAgB,CAAhB;EACA;;EACA,SAAKE,OAAL,GAAe,CAAf;EACA,SAAKZ,SAAL,GAAiB,CAAjB;EACA,SAAKC,IAAL,GAAY,CAAZ;EACA,SAAKC,IAAL,GAAY,CAAZ;EACA,SAAK6b,MAAL,GAAc,IAAIjoB,KAAJ,EAAd;EACA,SAAKkoB,SAAL,GAAiB,IAAIloB,KAAJ,EAAjB;EACA,SAAKke,KAAL,GAAa,IAAIle,KAAJ,EAAb;EACA,SAAK8E,MAAL,GAAc,IAAI9E,KAAJ,EAAd;EACA,SAAKmoB,OAAL,GAAe,IAAInoB,KAAJ,EAAf;EACA,SAAKooB,QAAL,GAAgB,IAAIpoB,KAAJ,EAAhB;EACA,SAAKuH,MAAL,GAAc,KAAd;EACA,QAAI,CAACG,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACM,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAKJ,KAAL,GAAa,IAAItH,KAAJ,EAAb;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG4M,IAAI,CAACJ,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,GAAGC,CAA3C,EAA8CD,CAAC,EAA/C,EACI,KAAKyM,KAAL,CAAW3F,IAAX,CAAgBc,QAAQ,CAAC8hB,QAAT,CAAkB7c,IAAI,CAACJ,KAAL,CAAWzM,CAAX,EAAcmG,IAAhC,CAAhB;;EACJ,SAAKwjB,MAAL,GAAc/hB,QAAQ,CAAC4lB,QAAT,CAAkB3gB,IAAI,CAAC8c,MAAL,CAAYxjB,IAA9B,CAAd;EACA,SAAK4L,QAAL,GAAgBlF,IAAI,CAACkF,QAArB;EACA,SAAKE,OAAL,GAAepF,IAAI,CAACoF,OAApB;EACA,SAAKZ,SAAL,GAAiBxE,IAAI,CAACwE,SAAtB;EACA,SAAKC,IAAL,GAAYzE,IAAI,CAACyE,IAAjB;EACA,SAAKC,IAAL,GAAY1E,IAAI,CAAC0E,IAAjB;EACH;;EACDoP,EAAAA,QAAQ,GAAG;EACP,WAAO,KAAKjU,MAAZ;EACH;;EACDsG,EAAAA,MAAM,GAAG;EACL,QAAIpK,UAAU,GAAG,KAAK+gB,MAAL,CAAY1a,aAAZ,EAAjB;EACA,QAAI,EAAErG,UAAU,YAAYuW,cAAxB,CAAJ,EACI;EACJ,QAAI9N,SAAS,GAAG,KAAKA,SAArB;EAAA,QAAgCC,IAAI,GAAG,KAAKA,IAA5C;EAAA,QAAkDC,IAAI,GAAG,KAAKA,IAA9D;EACA,QAAIF,SAAS,IAAI,CAAb,IAAkBC,IAAI,IAAI,CAA1B,IAA+BC,IAAI,IAAI,CAA3C,EACI;EACJ,QAAI1E,IAAI,GAAG,KAAKA,IAAhB;EACA,QAAI4gB,QAAQ,GAAG5gB,IAAI,CAAC6gB,UAAL,IAAmBR,UAAU,CAACS,OAA7C;EAAA,QAAsDC,KAAK,GAAG/gB,IAAI,CAAC6gB,UAAL,IAAmBR,UAAU,CAACW,UAA5F;EACA,QAAIphB,KAAK,GAAG,KAAKA,KAAjB;EACA,QAAIqhB,SAAS,GAAGrhB,KAAK,CAACvM,MAAtB;EAAA,QAA8B6tB,WAAW,GAAGN,QAAQ,GAAGK,SAAH,GAAeA,SAAS,GAAG,CAA/E;EACA,QAAIV,MAAM,GAAGjpB,KAAK,CAACY,YAAN,CAAmB,KAAKqoB,MAAxB,EAAgCW,WAAhC,CAAb;EAAA,QAA2DT,OAAO,GAAGM,KAAK,GAAG,KAAKN,OAAL,GAAenpB,KAAK,CAACY,YAAN,CAAmB,KAAKuoB,OAAxB,EAAiCQ,SAAjC,CAAlB,GAAgE,IAA1I;EACA,QAAI7b,OAAO,GAAG,KAAKA,OAAnB;;EACA,YAAQpF,IAAI,CAACmhB,WAAb;EACI,WAAKf,WAAW,CAACgB,OAAjB;EACI,YAAIL,KAAJ,EAAW;EACP,eAAK,IAAI5tB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG8tB,WAAW,GAAG,CAAlC,EAAqC/tB,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;EAC7C,gBAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,gBAAIkuB,WAAW,GAAG1hB,IAAI,CAACK,IAAL,CAAU3M,MAA5B;EACA,gBAAIguB,WAAW,GAAGf,cAAc,CAACgB,OAAjC,EACIb,OAAO,CAACttB,CAAD,CAAP,GAAa,CAAb,CADJ,KAEK;EACD,kBAAIuC,CAAC,GAAG2rB,WAAW,GAAG1hB,IAAI,CAAChM,CAA3B;EAAA,kBAA8BmC,CAAC,GAAGurB,WAAW,GAAG1hB,IAAI,CAAC5L,CAArD;EACA0sB,cAAAA,OAAO,CAACttB,CAAD,CAAP,GAAagC,IAAI,CAACoB,IAAL,CAAUb,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAtB,CAAb;EACH;EACJ;EACJ;;EACDwB,QAAAA,KAAK,CAACQ,SAAN,CAAgByoB,MAAhB,EAAwB,CAAxB,EAA2BW,WAA3B,EAAwC9b,OAAxC;EACA;;EACJ,WAAKgb,WAAW,CAACmB,YAAjB;EACI,YAAIC,GAAG,GAAG,CAAV;;EACA,aAAK,IAAIruB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG8tB,WAAW,GAAG,CAAlC,EAAqC/tB,CAAC,GAAGC,CAAzC,GAA6C;EACzC,cAAIuM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,cAAIkuB,WAAW,GAAG1hB,IAAI,CAACK,IAAL,CAAU3M,MAA5B;;EACA,cAAIguB,WAAW,GAAGf,cAAc,CAACgB,OAAjC,EAA0C;EACtC,gBAAIP,KAAJ,EACIN,OAAO,CAACttB,CAAD,CAAP,GAAa,CAAb;EACJotB,YAAAA,MAAM,CAAC,EAAEptB,CAAH,CAAN,GAAciS,OAAd;EACH,WAJD,MAKK;EACD,gBAAI1P,CAAC,GAAG2rB,WAAW,GAAG1hB,IAAI,CAAChM,CAA3B;EAAA,gBAA8BmC,CAAC,GAAGurB,WAAW,GAAG1hB,IAAI,CAAC5L,CAArD;EACA,gBAAIV,MAAM,GAAG8B,IAAI,CAACoB,IAAL,CAAUb,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAtB,CAAb;EACA,gBAAIirB,KAAJ,EACIN,OAAO,CAACttB,CAAD,CAAP,GAAaE,MAAb;EACJktB,YAAAA,MAAM,CAAC,EAAEptB,CAAH,CAAN,GAAcE,MAAd;EACAmuB,YAAAA,GAAG,IAAInuB,MAAP;EACH;EACJ;;EACD,YAAImuB,GAAG,GAAG,CAAV,EAAa;EACTA,UAAAA,GAAG,GAAGN,WAAW,GAAGM,GAAd,GAAoBpc,OAA1B;;EACA,eAAK,IAAIjS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+tB,WAApB,EAAiC/tB,CAAC,EAAlC,EACIotB,MAAM,CAACptB,CAAD,CAAN,IAAaquB,GAAb;EACP;;EACD;;EACJ;EACI,YAAIC,aAAa,GAAGzhB,IAAI,CAACmhB,WAAL,IAAoBf,WAAW,CAACsB,MAApD;;EACA,aAAK,IAAIvuB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG8tB,WAAW,GAAG,CAAlC,EAAqC/tB,CAAC,GAAGC,CAAzC,GAA6C;EACzC,cAAIuM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,cAAIkuB,WAAW,GAAG1hB,IAAI,CAACK,IAAL,CAAU3M,MAA5B;;EACA,cAAIguB,WAAW,GAAGf,cAAc,CAACgB,OAAjC,EAA0C;EACtC,gBAAIP,KAAJ,EACIN,OAAO,CAACttB,CAAD,CAAP,GAAa,CAAb;EACJotB,YAAAA,MAAM,CAAC,EAAEptB,CAAH,CAAN,GAAciS,OAAd;EACH,WAJD,MAKK;EACD,gBAAI1P,CAAC,GAAG2rB,WAAW,GAAG1hB,IAAI,CAAChM,CAA3B;EAAA,gBAA8BmC,CAAC,GAAGurB,WAAW,GAAG1hB,IAAI,CAAC5L,CAArD;EACA,gBAAIV,MAAM,GAAG8B,IAAI,CAACoB,IAAL,CAAUb,CAAC,GAAGA,CAAJ,GAAQI,CAAC,GAAGA,CAAtB,CAAb;EACA,gBAAIirB,KAAJ,EACIN,OAAO,CAACttB,CAAD,CAAP,GAAaE,MAAb;EACJktB,YAAAA,MAAM,CAAC,EAAEptB,CAAH,CAAN,GAAc,CAACsuB,aAAa,GAAGJ,WAAW,GAAGjc,OAAjB,GAA2BA,OAAzC,IAAoD/R,MAApD,GAA6DguB,WAA3E;EACH;EACJ;;EA1DT;;EA4DA,QAAIb,SAAS,GAAG,KAAKmB,qBAAL,CAA2B5lB,UAA3B,EAAuCmlB,WAAvC,EAAoDN,QAApD,CAAhB;EACA,QAAIgB,KAAK,GAAGpB,SAAS,CAAC,CAAD,CAArB;EAAA,QAA0BqB,KAAK,GAAGrB,SAAS,CAAC,CAAD,CAA3C;EAAA,QAAgDsB,cAAc,GAAG9hB,IAAI,CAAC8hB,cAAtE;EACA,QAAIC,GAAG,GAAG,KAAV;EACA,QAAID,cAAc,IAAI,CAAtB,EACIC,GAAG,GAAG/hB,IAAI,CAAC6gB,UAAL,IAAmBR,UAAU,CAAC2B,KAApC,CADJ,KAEK;EACDD,MAAAA,GAAG,GAAG,KAAN;EACA,UAAI3E,CAAC,GAAG,KAAKN,MAAL,CAAYnd,IAApB;EACAmiB,MAAAA,cAAc,IAAI1E,CAAC,CAACzpB,CAAF,GAAMypB,CAAC,CAAC9mB,CAAR,GAAY8mB,CAAC,CAAC1pB,CAAF,GAAM0pB,CAAC,CAACrpB,CAApB,GAAwB,CAAxB,GAA4Be,SAAS,CAACO,MAAtC,GAA+C,CAACP,SAAS,CAACO,MAA5E;EACH;;EACD,SAAK,IAAIlC,CAAC,GAAG,CAAR,EAAWiqB,CAAC,GAAG,CAApB,EAAuBjqB,CAAC,GAAG8tB,SAA3B,EAAsC9tB,CAAC,IAAIiqB,CAAC,IAAI,CAAhD,EAAmD;EAC/C,UAAIzd,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACAwM,MAAAA,IAAI,CAACgU,MAAL,IAAe,CAACiO,KAAK,GAAGjiB,IAAI,CAACgU,MAAd,IAAwBlP,IAAvC;EACA9E,MAAAA,IAAI,CAAC+T,MAAL,IAAe,CAACmO,KAAK,GAAGliB,IAAI,CAAC+T,MAAd,IAAwBhP,IAAvC;EACA,UAAIhP,CAAC,GAAG8qB,SAAS,CAACpD,CAAD,CAAjB;EAAA,UAAsBtnB,CAAC,GAAG0qB,SAAS,CAACpD,CAAC,GAAG,CAAL,CAAnC;EAAA,UAA4C1e,EAAE,GAAGhJ,CAAC,GAAGksB,KAArD;EAAA,UAA4DjjB,EAAE,GAAG7I,CAAC,GAAG+rB,KAArE;;EACA,UAAId,KAAJ,EAAW;EACP,YAAI1tB,MAAM,GAAGotB,OAAO,CAACttB,CAAD,CAApB;;EACA,YAAIE,MAAM,IAAI,CAAd,EAAiB;EACb,cAAIyhB,CAAC,GAAG,CAAC3f,IAAI,CAACoB,IAAL,CAAUmI,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,IAA+BtL,MAA/B,GAAwC,CAAzC,IAA8CmR,SAA9C,GAA0D,CAAlE;EACA7E,UAAAA,IAAI,CAAChM,CAAL,IAAUmhB,CAAV;EACAnV,UAAAA,IAAI,CAAC5L,CAAL,IAAU+gB,CAAV;EACH;EACJ;;EACD8M,MAAAA,KAAK,GAAGlsB,CAAR;EACAmsB,MAAAA,KAAK,GAAG/rB,CAAR;;EACA,UAAI0O,SAAS,GAAG,CAAhB,EAAmB;EACf,YAAI7Q,CAAC,GAAGgM,IAAI,CAAChM,CAAb;EAAA,YAAgBD,CAAC,GAAGiM,IAAI,CAACjM,CAAzB;EAAA,YAA4BK,CAAC,GAAG4L,IAAI,CAAC5L,CAArC;EAAA,YAAwCuC,CAAC,GAAGqJ,IAAI,CAACrJ,CAAjD;EAAA,YAAoD9C,CAAC,GAAG,CAAxD;EAAA,YAA2D4B,GAAG,GAAG,CAAjE;EAAA,YAAoEG,GAAG,GAAG,CAA1E;EACA,YAAIqrB,QAAJ,EACIptB,CAAC,GAAGgtB,SAAS,CAACpD,CAAC,GAAG,CAAL,CAAb,CADJ,KAEK,IAAImD,MAAM,CAACptB,CAAC,GAAG,CAAL,CAAN,IAAiB,CAArB,EACDK,CAAC,GAAGgtB,SAAS,CAACpD,CAAC,GAAG,CAAL,CAAb,CADC,KAGD5pB,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAWrW,EAAX,EAAeD,EAAf,CAAJ;EACJlL,QAAAA,CAAC,IAAI2B,IAAI,CAAC6f,KAAL,CAAWjhB,CAAX,EAAcJ,CAAd,CAAL;;EACA,YAAIouB,GAAJ,EAAS;EACL3sB,UAAAA,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAN;EACA+B,UAAAA,GAAG,GAAGJ,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAAN;EACA,cAAIH,MAAM,GAAGsM,IAAI,CAACK,IAAL,CAAU3M,MAAvB;EACAuuB,UAAAA,KAAK,IAAI,CAACvuB,MAAM,IAAI+B,GAAG,GAAGzB,CAAN,GAAU4B,GAAG,GAAGxB,CAApB,CAAN,GAA+B2K,EAAhC,IAAsC8F,SAA/C;EACAqd,UAAAA,KAAK,IAAI,CAACxuB,MAAM,IAAIkC,GAAG,GAAG5B,CAAN,GAAUyB,GAAG,GAAGrB,CAApB,CAAN,GAA+B4K,EAAhC,IAAsC6F,SAA/C;EACH,SAND,MAOK;EACDhR,UAAAA,CAAC,IAAIsuB,cAAL;EACH;;EACD,YAAItuB,CAAC,GAAGsB,SAAS,CAAC2B,EAAlB,EACIjD,CAAC,IAAIsB,SAAS,CAAC4B,GAAf,CADJ,KAEK,IAAIlD,CAAC,GAAG,CAACsB,SAAS,CAAC2B,EAAnB;EACDjD,UAAAA,CAAC,IAAIsB,SAAS,CAAC4B,GAAf;EACJlD,QAAAA,CAAC,IAAIgR,SAAL;EACApP,QAAAA,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAN;EACA+B,QAAAA,GAAG,GAAGJ,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAAN;EACAmM,QAAAA,IAAI,CAAChM,CAAL,GAASyB,GAAG,GAAGzB,CAAN,GAAU4B,GAAG,GAAGxB,CAAzB;EACA4L,QAAAA,IAAI,CAACjM,CAAL,GAAS0B,GAAG,GAAG1B,CAAN,GAAU6B,GAAG,GAAGe,CAAzB;EACAqJ,QAAAA,IAAI,CAAC5L,CAAL,GAASwB,GAAG,GAAG5B,CAAN,GAAUyB,GAAG,GAAGrB,CAAzB;EACA4L,QAAAA,IAAI,CAACrJ,CAAL,GAASf,GAAG,GAAG7B,CAAN,GAAU0B,GAAG,GAAGkB,CAAzB;EACH;;EACDqJ,MAAAA,IAAI,CAACkW,sBAAL;EACH;EACJ;;EACD8L,EAAAA,qBAAqB,CAAC/Q,IAAD,EAAOsQ,WAAP,EAAoBN,QAApB,EAA8B;EAC/C,QAAI9D,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAI5X,QAAQ,GAAG,KAAKA,QAApB;EACA,QAAIqb,MAAM,GAAG,KAAKA,MAAlB;EAAA,QAA0B0B,GAAG,GAAG3qB,KAAK,CAACY,YAAN,CAAmB,KAAKsoB,SAAxB,EAAmCU,WAAW,GAAG,CAAd,GAAkB,CAArD,CAAhC;EAAA,QAAyF1K,KAAK,GAAG,IAAjG;EACA,QAAI0L,MAAM,GAAGtR,IAAI,CAACsR,MAAlB;EACA,QAAIC,cAAc,GAAGvR,IAAI,CAACwR,mBAA1B;EAAA,QAA+CC,UAAU,GAAGF,cAAc,GAAG,CAA7E;EAAA,QAAgFG,SAAS,GAAGhC,cAAc,CAACiC,IAA3G;;EACA,QAAI,CAAC3R,IAAI,CAAC4R,aAAV,EAAyB;EACrB,UAAI/B,OAAO,GAAG7P,IAAI,CAAC6P,OAAnB;EACA4B,MAAAA,UAAU,IAAIH,MAAM,GAAG,CAAH,GAAO,CAA3B;EACA,UAAIO,UAAU,GAAGhC,OAAO,CAAC4B,UAAD,CAAxB;EACA,UAAI,KAAKriB,IAAL,CAAU0iB,YAAV,IAA0BvC,YAAY,CAACiB,OAA3C,EACIlc,QAAQ,IAAIud,UAAZ;EACJ,UAAIE,UAAJ;;EACA,cAAQ,KAAK3iB,IAAL,CAAUmhB,WAAlB;EACI,aAAKf,WAAW,CAACgB,OAAjB;EACIuB,UAAAA,UAAU,GAAGF,UAAb;EACA;;EACJ,aAAKrC,WAAW,CAACmB,YAAjB;EACIoB,UAAAA,UAAU,GAAGF,UAAU,GAAGvB,WAA1B;EACA;;EACJ;EACIyB,UAAAA,UAAU,GAAG,CAAb;EARR;;EAUAnM,MAAAA,KAAK,GAAGlf,KAAK,CAACY,YAAN,CAAmB,KAAKse,KAAxB,EAA+B,CAA/B,CAAR;;EACA,WAAK,IAAIrjB,CAAC,GAAG,CAAR,EAAWyvB,CAAC,GAAG,CAAf,EAAkBC,KAAK,GAAG,CAA/B,EAAkC1vB,CAAC,GAAG+tB,WAAtC,EAAmD/tB,CAAC,IAAIyvB,CAAC,IAAI,CAA7D,EAAgE;EAC5D,YAAIE,KAAK,GAAGvC,MAAM,CAACptB,CAAD,CAAN,GAAYwvB,UAAxB;EACAzd,QAAAA,QAAQ,IAAI4d,KAAZ;EACA,YAAI1F,CAAC,GAAGlY,QAAR;;EACA,YAAIgd,MAAJ,EAAY;EACR9E,UAAAA,CAAC,IAAIqF,UAAL;EACA,cAAIrF,CAAC,GAAG,CAAR,EACIA,CAAC,IAAIqF,UAAL;EACJI,UAAAA,KAAK,GAAG,CAAR;EACH,SALD,MAMK,IAAIzF,CAAC,GAAG,CAAR,EAAW;EACZ,cAAIkF,SAAS,IAAIhC,cAAc,CAACyC,MAAhC,EAAwC;EACpCT,YAAAA,SAAS,GAAGhC,cAAc,CAACyC,MAA3B;EACAnS,YAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC,CAAlC,EAAqC,CAArC,EAAwCtG,KAAxC,EAA+C,CAA/C,EAAkD,CAAlD;EACH;;EACD,eAAKyM,iBAAL,CAAuB7F,CAAvB,EAA0B5G,KAA1B,EAAiC,CAAjC,EAAoCyL,GAApC,EAAyCW,CAAzC;EACA;EACH,SAPI,MAQA,IAAIxF,CAAC,GAAGqF,UAAR,EAAoB;EACrB,cAAIH,SAAS,IAAIhC,cAAc,CAAC4C,KAAhC,EAAuC;EACnCZ,YAAAA,SAAS,GAAGhC,cAAc,CAAC4C,KAA3B;EACAtS,YAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkCqF,cAAc,GAAG,CAAnD,EAAsD,CAAtD,EAAyD3L,KAAzD,EAAgE,CAAhE,EAAmE,CAAnE;EACH;;EACD,eAAK2M,gBAAL,CAAsB/F,CAAC,GAAGqF,UAA1B,EAAsCjM,KAAtC,EAA6C,CAA7C,EAAgDyL,GAAhD,EAAqDW,CAArD;EACA;EACH,SAzB2D;;;EA2B5D,gBAAQC,KAAK,EAAb,EAAiB;EACb,cAAIxvB,MAAM,GAAGotB,OAAO,CAACoC,KAAD,CAApB;EACA,cAAIzF,CAAC,GAAG/pB,MAAR,EACI;EACJ,cAAIwvB,KAAK,IAAI,CAAb,EACIzF,CAAC,IAAI/pB,MAAL,CADJ,KAEK;EACD,gBAAI+P,IAAI,GAAGqd,OAAO,CAACoC,KAAK,GAAG,CAAT,CAAlB;EACAzF,YAAAA,CAAC,GAAG,CAACA,CAAC,GAAGha,IAAL,KAAc/P,MAAM,GAAG+P,IAAvB,CAAJ;EACH;EACD;EACH;;EACD,YAAIyf,KAAK,IAAIP,SAAb,EAAwB;EACpBA,UAAAA,SAAS,GAAGO,KAAZ;;EACA,cAAIX,MAAM,IAAIW,KAAK,IAAIR,UAAvB,EAAmC;EAC/BzR,YAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkCqF,cAAc,GAAG,CAAnD,EAAsD,CAAtD,EAAyD3L,KAAzD,EAAgE,CAAhE,EAAmE,CAAnE;EACA5F,YAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC,CAAlC,EAAqC,CAArC,EAAwCtG,KAAxC,EAA+C,CAA/C,EAAkD,CAAlD;EACH,WAHD,MAKI5F,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC+F,KAAK,GAAG,CAAR,GAAY,CAA9C,EAAiD,CAAjD,EAAoDrM,KAApD,EAA2D,CAA3D,EAA8D,CAA9D;EACP;;EACD,aAAK4M,gBAAL,CAAsBhG,CAAtB,EAAyB5G,KAAK,CAAC,CAAD,CAA9B,EAAmCA,KAAK,CAAC,CAAD,CAAxC,EAA6CA,KAAK,CAAC,CAAD,CAAlD,EAAuDA,KAAK,CAAC,CAAD,CAA5D,EAAiEA,KAAK,CAAC,CAAD,CAAtE,EAA2EA,KAAK,CAAC,CAAD,CAAhF,EAAqFA,KAAK,CAAC,CAAD,CAA1F,EAA+FA,KAAK,CAAC,CAAD,CAApG,EAAyGyL,GAAzG,EAA8GW,CAA9G,EAAiHhC,QAAQ,IAAKztB,CAAC,GAAG,CAAJ,IAAS2vB,KAAK,IAAI,CAAhJ;EACH;;EACD,aAAOb,GAAP;EACH,KA3E8C;;;EA6E/C,QAAIC,MAAJ,EAAY;EACRC,MAAAA,cAAc,IAAI,CAAlB;EACA3L,MAAAA,KAAK,GAAGlf,KAAK,CAACY,YAAN,CAAmB,KAAKse,KAAxB,EAA+B2L,cAA/B,CAAR;EACAvR,MAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC,CAAlC,EAAqCqF,cAAc,GAAG,CAAtD,EAAyD3L,KAAzD,EAAgE,CAAhE,EAAmE,CAAnE;EACA5F,MAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC,CAAlC,EAAqC,CAArC,EAAwCtG,KAAxC,EAA+C2L,cAAc,GAAG,CAAhE,EAAmE,CAAnE;EACA3L,MAAAA,KAAK,CAAC2L,cAAc,GAAG,CAAlB,CAAL,GAA4B3L,KAAK,CAAC,CAAD,CAAjC;EACAA,MAAAA,KAAK,CAAC2L,cAAc,GAAG,CAAlB,CAAL,GAA4B3L,KAAK,CAAC,CAAD,CAAjC;EACH,KAPD,MAQK;EACD6L,MAAAA,UAAU;EACVF,MAAAA,cAAc,IAAI,CAAlB;EACA3L,MAAAA,KAAK,GAAGlf,KAAK,CAACY,YAAN,CAAmB,KAAKse,KAAxB,EAA+B2L,cAA/B,CAAR;EACAvR,MAAAA,IAAI,CAACoS,oBAAL,CAA0BlG,MAA1B,EAAkC,CAAlC,EAAqCqF,cAArC,EAAqD3L,KAArD,EAA4D,CAA5D,EAA+D,CAA/D;EACH,KA1F8C;;;EA4F/C,QAAIpZ,MAAM,GAAG9F,KAAK,CAACY,YAAN,CAAmB,KAAKkF,MAAxB,EAAgCilB,UAAhC,CAAb;EACA,QAAII,UAAU,GAAG,CAAjB;EACA,QAAIY,EAAE,GAAG7M,KAAK,CAAC,CAAD,CAAd;EAAA,QAAmB8M,EAAE,GAAG9M,KAAK,CAAC,CAAD,CAA7B;EAAA,QAAkC1Y,GAAG,GAAG,CAAxC;EAAA,QAA2CC,GAAG,GAAG,CAAjD;EAAA,QAAoDC,GAAG,GAAG,CAA1D;EAAA,QAA6DC,GAAG,GAAG,CAAnE;EAAA,QAAsEslB,EAAE,GAAG,CAA3E;EAAA,QAA8EC,EAAE,GAAG,CAAnF;EACA,QAAIplB,IAAI,GAAG,CAAX;EAAA,QAAcC,IAAI,GAAG,CAArB;EAAA,QAAwBolB,KAAK,GAAG,CAAhC;EAAA,QAAmCC,KAAK,GAAG,CAA3C;EAAA,QAA8CC,IAAI,GAAG,CAArD;EAAA,QAAwDC,IAAI,GAAG,CAA/D;EAAA,QAAkEC,GAAG,GAAG,CAAxE;EAAA,QAA2EC,GAAG,GAAG,CAAjF;;EACA,SAAK,IAAI3wB,CAAC,GAAG,CAAR,EAAW4wB,CAAC,GAAG,CAApB,EAAuB5wB,CAAC,GAAGkvB,UAA3B,EAAuClvB,CAAC,IAAI4wB,CAAC,IAAI,CAAjD,EAAoD;EAChDjmB,MAAAA,GAAG,GAAG0Y,KAAK,CAACuN,CAAD,CAAX;EACAhmB,MAAAA,GAAG,GAAGyY,KAAK,CAACuN,CAAC,GAAG,CAAL,CAAX;EACA/lB,MAAAA,GAAG,GAAGwY,KAAK,CAACuN,CAAC,GAAG,CAAL,CAAX;EACA9lB,MAAAA,GAAG,GAAGuY,KAAK,CAACuN,CAAC,GAAG,CAAL,CAAX;EACAR,MAAAA,EAAE,GAAG/M,KAAK,CAACuN,CAAC,GAAG,CAAL,CAAV;EACAP,MAAAA,EAAE,GAAGhN,KAAK,CAACuN,CAAC,GAAG,CAAL,CAAV;EACA3lB,MAAAA,IAAI,GAAG,CAACilB,EAAE,GAAGvlB,GAAG,GAAG,CAAX,GAAeE,GAAhB,IAAuB,MAA9B;EACAK,MAAAA,IAAI,GAAG,CAACilB,EAAE,GAAGvlB,GAAG,GAAG,CAAX,GAAeE,GAAhB,IAAuB,MAA9B;EACAwlB,MAAAA,KAAK,GAAG,CAAC,CAAC3lB,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBqlB,EAAlB,GAAuBE,EAAxB,IAA8B,OAAtC;EACAG,MAAAA,KAAK,GAAG,CAAC,CAAC3lB,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBqlB,EAAlB,GAAuBE,EAAxB,IAA8B,OAAtC;EACAG,MAAAA,IAAI,GAAGvlB,IAAI,GAAG,CAAP,GAAWqlB,KAAlB;EACAG,MAAAA,IAAI,GAAGvlB,IAAI,GAAG,CAAP,GAAWqlB,KAAlB;EACAG,MAAAA,GAAG,GAAG,CAAC/lB,GAAG,GAAGulB,EAAP,IAAa,IAAb,GAAoBjlB,IAApB,GAA2BqlB,KAAK,GAAG,UAAzC;EACAK,MAAAA,GAAG,GAAG,CAAC/lB,GAAG,GAAGulB,EAAP,IAAa,IAAb,GAAoBjlB,IAApB,GAA2BqlB,KAAK,GAAG,UAAzC;EACAjB,MAAAA,UAAU,IAAIttB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAd;EACAD,MAAAA,GAAG,IAAIF,IAAP;EACAG,MAAAA,GAAG,IAAIF,IAAP;EACAD,MAAAA,IAAI,IAAIF,KAAR;EACAG,MAAAA,IAAI,IAAIF,KAAR;EACAjB,MAAAA,UAAU,IAAIttB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAd;EACAD,MAAAA,GAAG,IAAIF,IAAP;EACAG,MAAAA,GAAG,IAAIF,IAAP;EACAnB,MAAAA,UAAU,IAAIttB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAd;EACAD,MAAAA,GAAG,IAAIF,IAAI,GAAGF,KAAd;EACAK,MAAAA,GAAG,IAAIF,IAAI,GAAGF,KAAd;EACAjB,MAAAA,UAAU,IAAIttB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAd;EACA1mB,MAAAA,MAAM,CAACjK,CAAD,CAAN,GAAYsvB,UAAZ;EACAY,MAAAA,EAAE,GAAGE,EAAL;EACAD,MAAAA,EAAE,GAAGE,EAAL;EACH;;EACD,QAAI,KAAKxjB,IAAL,CAAU0iB,YAAV,IAA0BvC,YAAY,CAACiB,OAA3C,EACIlc,QAAQ,IAAIud,UAAZ;EACJ,QAAIE,UAAJ;;EACA,YAAQ,KAAK3iB,IAAL,CAAUmhB,WAAlB;EACI,WAAKf,WAAW,CAACgB,OAAjB;EACIuB,QAAAA,UAAU,GAAGF,UAAb;EACA;;EACJ,WAAKrC,WAAW,CAACmB,YAAjB;EACIoB,QAAAA,UAAU,GAAGF,UAAU,GAAGvB,WAA1B;EACA;;EACJ;EACIyB,QAAAA,UAAU,GAAG,CAAb;EARR;;EAUA,QAAIjC,QAAQ,GAAG,KAAKA,QAApB;EACA,QAAIsD,WAAW,GAAG,CAAlB;;EACA,SAAK,IAAI7wB,CAAC,GAAG,CAAR,EAAWyvB,CAAC,GAAG,CAAf,EAAkBC,KAAK,GAAG,CAA1B,EAA6BoB,OAAO,GAAG,CAA5C,EAA+C9wB,CAAC,GAAG+tB,WAAnD,EAAgE/tB,CAAC,IAAIyvB,CAAC,IAAI,CAA1E,EAA6E;EACzE,UAAIE,KAAK,GAAGvC,MAAM,CAACptB,CAAD,CAAN,GAAYwvB,UAAxB;EACAzd,MAAAA,QAAQ,IAAI4d,KAAZ;EACA,UAAI1F,CAAC,GAAGlY,QAAR;;EACA,UAAIgd,MAAJ,EAAY;EACR9E,QAAAA,CAAC,IAAIqF,UAAL;EACA,YAAIrF,CAAC,GAAG,CAAR,EACIA,CAAC,IAAIqF,UAAL;EACJI,QAAAA,KAAK,GAAG,CAAR;EACH,OALD,MAMK,IAAIzF,CAAC,GAAG,CAAR,EAAW;EACZ,aAAK6F,iBAAL,CAAuB7F,CAAvB,EAA0B5G,KAA1B,EAAiC,CAAjC,EAAoCyL,GAApC,EAAyCW,CAAzC;EACA;EACH,OAHI,MAIA,IAAIxF,CAAC,GAAGqF,UAAR,EAAoB;EACrB,aAAKU,gBAAL,CAAsB/F,CAAC,GAAGqF,UAA1B,EAAsCjM,KAAtC,EAA6C2L,cAAc,GAAG,CAA9D,EAAiEF,GAAjE,EAAsEW,CAAtE;EACA;EACH,OAjBwE;;;EAmBzE,cAAQC,KAAK,EAAb,EAAiB;EACb,YAAIxvB,MAAM,GAAG+J,MAAM,CAACylB,KAAD,CAAnB;EACA,YAAIzF,CAAC,GAAG/pB,MAAR,EACI;EACJ,YAAIwvB,KAAK,IAAI,CAAb,EACIzF,CAAC,IAAI/pB,MAAL,CADJ,KAEK;EACD,cAAI+P,IAAI,GAAGhG,MAAM,CAACylB,KAAK,GAAG,CAAT,CAAjB;EACAzF,UAAAA,CAAC,GAAG,CAACA,CAAC,GAAGha,IAAL,KAAc/P,MAAM,GAAG+P,IAAvB,CAAJ;EACH;EACD;EACH,OA9BwE;;;EAgCzE,UAAIyf,KAAK,IAAIP,SAAb,EAAwB;EACpBA,QAAAA,SAAS,GAAGO,KAAZ;EACA,YAAI1jB,EAAE,GAAG0jB,KAAK,GAAG,CAAjB;EACAQ,QAAAA,EAAE,GAAG7M,KAAK,CAACrX,EAAD,CAAV;EACAmkB,QAAAA,EAAE,GAAG9M,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAV;EACArB,QAAAA,GAAG,GAAG0Y,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAX;EACApB,QAAAA,GAAG,GAAGyY,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAX;EACAnB,QAAAA,GAAG,GAAGwY,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAX;EACAlB,QAAAA,GAAG,GAAGuY,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAX;EACAokB,QAAAA,EAAE,GAAG/M,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAV;EACAqkB,QAAAA,EAAE,GAAGhN,KAAK,CAACrX,EAAE,GAAG,CAAN,CAAV;EACAf,QAAAA,IAAI,GAAG,CAACilB,EAAE,GAAGvlB,GAAG,GAAG,CAAX,GAAeE,GAAhB,IAAuB,IAA9B;EACAK,QAAAA,IAAI,GAAG,CAACilB,EAAE,GAAGvlB,GAAG,GAAG,CAAX,GAAeE,GAAhB,IAAuB,IAA9B;EACAwlB,QAAAA,KAAK,GAAG,CAAC,CAAC3lB,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBqlB,EAAlB,GAAuBE,EAAxB,IAA8B,KAAtC;EACAG,QAAAA,KAAK,GAAG,CAAC,CAAC3lB,GAAG,GAAGE,GAAP,IAAc,CAAd,GAAkBqlB,EAAlB,GAAuBE,EAAxB,IAA8B,KAAtC;EACAG,QAAAA,IAAI,GAAGvlB,IAAI,GAAG,CAAP,GAAWqlB,KAAlB;EACAG,QAAAA,IAAI,GAAGvlB,IAAI,GAAG,CAAP,GAAWqlB,KAAlB;EACAG,QAAAA,GAAG,GAAG,CAAC/lB,GAAG,GAAGulB,EAAP,IAAa,GAAb,GAAmBjlB,IAAnB,GAA0BqlB,KAAK,GAAG,UAAxC;EACAK,QAAAA,GAAG,GAAG,CAAC/lB,GAAG,GAAGulB,EAAP,IAAa,GAAb,GAAmBjlB,IAAnB,GAA0BqlB,KAAK,GAAG,UAAxC;EACAM,QAAAA,WAAW,GAAG7uB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAd;EACApD,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcsD,WAAd;;EACA,aAAK7kB,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG,CAAlB,EAAqBA,EAAE,EAAvB,EAA2B;EACvB0kB,UAAAA,GAAG,IAAIF,IAAP;EACAG,UAAAA,GAAG,IAAIF,IAAP;EACAD,UAAAA,IAAI,IAAIF,KAAR;EACAG,UAAAA,IAAI,IAAIF,KAAR;EACAM,UAAAA,WAAW,IAAI7uB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAf;EACApD,UAAAA,QAAQ,CAACvhB,EAAD,CAAR,GAAe6kB,WAAf;EACH;;EACDH,QAAAA,GAAG,IAAIF,IAAP;EACAG,QAAAA,GAAG,IAAIF,IAAP;EACAI,QAAAA,WAAW,IAAI7uB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAf;EACApD,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcsD,WAAd;EACAH,QAAAA,GAAG,IAAIF,IAAI,GAAGF,KAAd;EACAK,QAAAA,GAAG,IAAIF,IAAI,GAAGF,KAAd;EACAM,QAAAA,WAAW,IAAI7uB,IAAI,CAACoB,IAAL,CAAUstB,GAAG,GAAGA,GAAN,GAAYC,GAAG,GAAGA,GAA5B,CAAf;EACApD,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcsD,WAAd;EACAC,QAAAA,OAAO,GAAG,CAAV;EACH,OAtEwE;;;EAwEzE7G,MAAAA,CAAC,IAAI4G,WAAL;;EACA,cAAQC,OAAO,EAAf,EAAmB;EACf,YAAI5wB,MAAM,GAAGqtB,QAAQ,CAACuD,OAAD,CAArB;EACA,YAAI7G,CAAC,GAAG/pB,MAAR,EACI;EACJ,YAAI4wB,OAAO,IAAI,CAAf,EACI7G,CAAC,IAAI/pB,MAAL,CADJ,KAEK;EACD,cAAI+P,IAAI,GAAGsd,QAAQ,CAACuD,OAAO,GAAG,CAAX,CAAnB;EACA7G,UAAAA,CAAC,GAAG6G,OAAO,GAAG,CAAC7G,CAAC,GAAGha,IAAL,KAAc/P,MAAM,GAAG+P,IAAvB,CAAd;EACH;EACD;EACH;;EACD,WAAKggB,gBAAL,CAAsBhG,CAAC,GAAG,GAA1B,EAA+BiG,EAA/B,EAAmCC,EAAnC,EAAuCxlB,GAAvC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDC,GAAtD,EAA2DslB,EAA3D,EAA+DC,EAA/D,EAAmEvB,GAAnE,EAAwEW,CAAxE,EAA2EhC,QAAQ,IAAKztB,CAAC,GAAG,CAAJ,IAAS2vB,KAAK,IAAI,CAA1G;EACH;;EACD,WAAOb,GAAP;EACH;;EACDgB,EAAAA,iBAAiB,CAAC7F,CAAD,EAAI8G,IAAJ,EAAU/wB,CAAV,EAAa8uB,GAAb,EAAkBW,CAAlB,EAAqB;EAClC,QAAIS,EAAE,GAAGa,IAAI,CAAC/wB,CAAD,CAAb;EAAA,QAAkBmwB,EAAE,GAAGY,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAA3B;EAAA,QAAoCuL,EAAE,GAAGwlB,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAAJ,GAAckwB,EAAvD;EAAA,QAA2D1kB,EAAE,GAAGulB,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAAJ,GAAcmwB,EAA9E;EAAA,QAAkF9vB,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAWrW,EAAX,EAAeD,EAAf,CAAtF;EACAujB,IAAAA,GAAG,CAACW,CAAD,CAAH,GAASS,EAAE,GAAGjG,CAAC,GAAGjoB,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAlB;EACAyuB,IAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaU,EAAE,GAAGlG,CAAC,GAAGjoB,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAAtB;EACAyuB,IAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAapvB,CAAb;EACH;;EACD2vB,EAAAA,gBAAgB,CAAC/F,CAAD,EAAI8G,IAAJ,EAAU/wB,CAAV,EAAa8uB,GAAb,EAAkBW,CAAlB,EAAqB;EACjC,QAAIS,EAAE,GAAGa,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAAb;EAAA,QAAsBmwB,EAAE,GAAGY,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAA/B;EAAA,QAAwCuL,EAAE,GAAG2kB,EAAE,GAAGa,IAAI,CAAC/wB,CAAD,CAAtD;EAAA,QAA2DwL,EAAE,GAAG2kB,EAAE,GAAGY,IAAI,CAAC/wB,CAAC,GAAG,CAAL,CAAzE;EAAA,QAAkFK,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAWrW,EAAX,EAAeD,EAAf,CAAtF;EACAujB,IAAAA,GAAG,CAACW,CAAD,CAAH,GAASS,EAAE,GAAGjG,CAAC,GAAGjoB,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAlB;EACAyuB,IAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaU,EAAE,GAAGlG,CAAC,GAAGjoB,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAAtB;EACAyuB,IAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAapvB,CAAb;EACH;;EACD4vB,EAAAA,gBAAgB,CAAChG,CAAD,EAAIiG,EAAJ,EAAQC,EAAR,EAAYxlB,GAAZ,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgCslB,EAAhC,EAAoCC,EAApC,EAAwCvB,GAAxC,EAA6CW,CAA7C,EAAgDhC,QAAhD,EAA0D;EACtE,QAAIxD,CAAC,IAAI,CAAL,IAAU+G,KAAK,CAAC/G,CAAD,CAAnB,EAAwB;EACpB6E,MAAAA,GAAG,CAACW,CAAD,CAAH,GAASS,EAAT;EACApB,MAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaU,EAAb;EACArB,MAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaztB,IAAI,CAAC6f,KAAL,CAAWjX,GAAG,GAAGulB,EAAjB,EAAqBxlB,GAAG,GAAGulB,EAA3B,CAAb;EACA;EACH;;EACD,QAAIe,EAAE,GAAGhH,CAAC,GAAGA,CAAb;EAAA,QAAgBiH,GAAG,GAAGD,EAAE,GAAGhH,CAA3B;EAAA,QAA8BhnB,CAAC,GAAG,IAAIgnB,CAAtC;EAAA,QAAyCkH,EAAE,GAAGluB,CAAC,GAAGA,CAAlD;EAAA,QAAqDmuB,GAAG,GAAGD,EAAE,GAAGluB,CAAhE;EACA,QAAIouB,EAAE,GAAGpuB,CAAC,GAAGgnB,CAAb;EAAA,QAAgBqH,GAAG,GAAGD,EAAE,GAAG,CAA3B;EAAA,QAA8BE,IAAI,GAAGtuB,CAAC,GAAGquB,GAAzC;EAAA,QAA8CE,IAAI,GAAGF,GAAG,GAAGrH,CAA3D;EACA,QAAI1nB,CAAC,GAAG2tB,EAAE,GAAGkB,GAAL,GAAWzmB,GAAG,GAAG4mB,IAAjB,GAAwB1mB,GAAG,GAAG2mB,IAA9B,GAAqCpB,EAAE,GAAGc,GAAlD;EAAA,QAAuDvuB,CAAC,GAAGwtB,EAAE,GAAGiB,GAAL,GAAWxmB,GAAG,GAAG2mB,IAAjB,GAAwBzmB,GAAG,GAAG0mB,IAA9B,GAAqCnB,EAAE,GAAGa,GAArG;EACApC,IAAAA,GAAG,CAACW,CAAD,CAAH,GAASltB,CAAT;EACAusB,IAAAA,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAa9sB,CAAb;;EACA,QAAI8qB,QAAJ,EAAc;EACV,UAAIxD,CAAC,GAAG,KAAR,EACI6E,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaztB,IAAI,CAAC6f,KAAL,CAAWjX,GAAG,GAAGulB,EAAjB,EAAqBxlB,GAAG,GAAGulB,EAA3B,CAAb,CADJ,KAGIpB,GAAG,CAACW,CAAC,GAAG,CAAL,CAAH,GAAaztB,IAAI,CAAC6f,KAAL,CAAWlf,CAAC,IAAIwtB,EAAE,GAAGgB,EAAL,GAAUvmB,GAAG,GAAGymB,EAAN,GAAW,CAArB,GAAyBvmB,GAAG,GAAGmmB,EAAnC,CAAZ,EAAoD1uB,CAAC,IAAI2tB,EAAE,GAAGiB,EAAL,GAAUxmB,GAAG,GAAG0mB,EAAN,GAAW,CAArB,GAAyBxmB,GAAG,GAAGomB,EAAnC,CAArD,CAAb;EACP;EACJ;;EA3auB;EA6a5B9D,cAAc,CAACiC,IAAf,GAAsB,CAAC,CAAvB;EACAjC,cAAc,CAACyC,MAAf,GAAwB,CAAC,CAAzB;EACAzC,cAAc,CAAC4C,KAAf,GAAuB,CAAC,CAAxB;EACA5C,cAAc,CAACgB,OAAf,GAAyB,OAAzB;;ECndA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;;EACO,MAAMsD,IAAN,CAAW;EACdlyB,EAAAA,WAAW,CAACsN,IAAD,EAAOL,IAAP,EAAa;EACpB;EACR;EACA;EACA;EACQ,SAAK3D,MAAL,GAAc,IAAI1D,KAAJ,EAAd;EACA,QAAI,CAAC0H,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACkF,IAAL,EACI,MAAM,IAAIlF,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAKL,IAAL,GAAYA,IAAZ;EACA,SAAKrL,KAAL,GAAa,IAAIf,KAAJ,EAAb;EACA,SAAKqO,SAAL,GAAiB,CAAC5B,IAAI,CAAC4B,SAAN,GAAkB,IAAlB,GAAyB,IAAIrO,KAAJ,EAA1C;EACA,SAAKsgB,cAAL;EACH;EACD;;;EACAgR,EAAAA,WAAW,GAAG;EACV,WAAO,KAAKllB,IAAL,CAAU5E,QAAjB;EACH;EACD;;;EACAqH,EAAAA,aAAa,GAAG;EACZ,WAAO,KAAKrG,UAAZ;EACH;EACD;EACJ;EACA;EACA;;;EACIoG,EAAAA,aAAa,CAACpG,UAAD,EAAa;EACtB,QAAI,KAAKA,UAAL,IAAmBA,UAAvB,EACI;;EACJ,QAAI,EAAEA,UAAU,YAAY4G,gBAAxB,KAA6C,EAAE,KAAK5G,UAAL,YAA2B4G,gBAA7B,CAA7C,IACG5G,UAAU,CAAC6G,gBAAX,IAA+B,KAAK7G,UAAL,CAAgB6G,gBADtD,EACwE;EACpE,WAAK5G,MAAL,CAAY3I,MAAZ,GAAqB,CAArB;EACH;;EACD,SAAK0I,UAAL,GAAkBA,UAAlB;EACA,SAAK+oB,cAAL,GAAsB,KAAKnlB,IAAL,CAAU5E,QAAV,CAAmBE,IAAzC;EACH;;EACD8pB,EAAAA,iBAAiB,CAAC9pB,IAAD,EAAO;EACpB,SAAK6pB,cAAL,GAAsB,KAAKnlB,IAAL,CAAU5E,QAAV,CAAmBE,IAAnB,GAA0BA,IAAhD;EACH;EACD;EACJ;;;EACI+pB,EAAAA,iBAAiB,GAAG;EAChB,WAAO,KAAKrlB,IAAL,CAAU5E,QAAV,CAAmBE,IAAnB,GAA0B,KAAK6pB,cAAtC;EACH;EACD;;;EACAjR,EAAAA,cAAc,GAAG;EACb,SAAKvf,KAAL,CAAWR,YAAX,CAAwB,KAAKkM,IAAL,CAAU1L,KAAlC;EACA,QAAI,KAAKsN,SAAT,EACI,KAAKA,SAAL,CAAe9N,YAAf,CAA4B,KAAKkM,IAAL,CAAU4B,SAAtC;EACJ,QAAI,CAAC,KAAK5B,IAAL,CAAUkC,cAAf,EACI,KAAKnG,UAAL,GAAkB,IAAlB,CADJ,KAEK;EACD,WAAKA,UAAL,GAAkB,IAAlB;EACA,WAAKoG,aAAL,CAAmB,KAAKxC,IAAL,CAAU5E,QAAV,CAAmBqH,aAAnB,CAAiC,KAAKpC,IAAL,CAAUoJ,KAA3C,EAAkD,KAAKpJ,IAAL,CAAUkC,cAA5D,CAAnB;EACH;EACJ;;EA1Da;;ECjClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;EACO,MAAM+iB,mBAAN,CAA0B;EAC7BvyB,EAAAA,WAAW,CAACsN,IAAD,EAAOjF,QAAP,EAAiB;EACxB,SAAKyJ,SAAL,GAAiB,CAAjB;EACA,SAAKC,IAAL,GAAY,CAAZ;EACA,SAAKC,IAAL,GAAY,CAAZ;EACA,SAAKC,SAAL,GAAiB,CAAjB;EACA,SAAKC,SAAL,GAAiB,CAAjB;EACA,SAAKC,SAAL,GAAiB,CAAjB;EACA,SAAKqf,IAAL,GAAY,IAAI/pB,OAAJ,EAAZ;EACA,SAAK0F,MAAL,GAAc,KAAd;EACA,QAAI,CAACG,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACM,QAAL,EACI,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAKwE,SAAL,GAAiBxE,IAAI,CAACwE,SAAtB;EACA,SAAKC,IAAL,GAAYzE,IAAI,CAACyE,IAAjB;EACA,SAAKC,IAAL,GAAY1E,IAAI,CAAC0E,IAAjB;EACA,SAAKC,SAAL,GAAiB3E,IAAI,CAAC2E,SAAtB;EACA,SAAKC,SAAL,GAAiB5E,IAAI,CAAC4E,SAAtB;EACA,SAAKC,SAAL,GAAiB7E,IAAI,CAAC6E,SAAtB;EACA,SAAKjF,KAAL,GAAa,IAAItH,KAAJ,EAAb;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACJ,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EACI,KAAKyM,KAAL,CAAW3F,IAAX,CAAgBc,QAAQ,CAAC8hB,QAAT,CAAkB7c,IAAI,CAACJ,KAAL,CAAWzM,CAAX,EAAcmG,IAAhC,CAAhB;;EACJ,SAAKwjB,MAAL,GAAc/hB,QAAQ,CAAC8hB,QAAT,CAAkB7c,IAAI,CAAC8c,MAAL,CAAYxjB,IAA9B,CAAd;EACH;;EACDwa,EAAAA,QAAQ,GAAG;EACP,WAAO,KAAKjU,MAAZ;EACH;;EACDsG,EAAAA,MAAM,GAAG;EACL,QAAI,KAAK3B,SAAL,IAAkB,CAAlB,IAAuB,KAAKC,IAAL,IAAa,CAApC,IAAyC,KAAKC,IAAL,IAAa,CAAtD,IAA2D,KAAKC,SAAL,IAAkB,CAA7E,IAAkF,KAAKA,SAAL,IAAkB,CAApG,IAAyG,KAAKE,SAAL,IAAkB,CAA/H,EACI;;EACJ,QAAI,KAAK7E,IAAL,CAAU2W,KAAd,EAAqB;EACjB,UAAI,KAAK3W,IAAL,CAAUklB,QAAd,EACI,KAAKC,kBAAL,GADJ,KAGI,KAAKC,kBAAL;EACP,KALD,MAMK;EACD,UAAI,KAAKplB,IAAL,CAAUklB,QAAd,EACI,KAAKG,kBAAL,GADJ,KAGI,KAAKC,kBAAL;EACP;EACJ;;EACDA,EAAAA,kBAAkB,GAAG;EACjB,QAAI9gB,SAAS,GAAG,KAAKA,SAArB;EAAA,QAAgCC,IAAI,GAAG,KAAKA,IAA5C;EAAA,QAAkDC,IAAI,GAAG,KAAKA,IAA9D;EAAA,QAAoEC,SAAS,GAAG,KAAKA,SAArF;EAAA,QAAgGC,SAAS,GAAG,KAAKA,SAAjH;EAAA,QAA4HC,SAAS,GAAG,KAAKA,SAA7I;EACA,QAAI0gB,SAAS,GAAG9gB,IAAI,IAAI,CAAR,IAAaC,IAAI,IAAI,CAArC;EACA,QAAIoY,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIqC,EAAE,GAAGrC,MAAM,CAACnpB,CAAhB;EAAA,QAAmB6xB,EAAE,GAAG1I,MAAM,CAACppB,CAA/B;EAAA,QAAkC+xB,EAAE,GAAG3I,MAAM,CAAC/oB,CAA9C;EAAA,QAAiD+qB,EAAE,GAAGhC,MAAM,CAACxmB,CAA7D;EACA,QAAIovB,aAAa,GAAGvG,EAAE,GAAGL,EAAL,GAAU0G,EAAE,GAAGC,EAAf,GAAoB,CAApB,GAAwB3wB,SAAS,CAACO,MAAlC,GAA2C,CAACP,SAAS,CAACO,MAA1E;EACA,QAAIysB,cAAc,GAAG,KAAK9hB,IAAL,CAAU8hB,cAAV,GAA2B4D,aAAhD;EACA,QAAIC,YAAY,GAAG,KAAK3lB,IAAL,CAAU2lB,YAAV,GAAyBD,aAA5C;EACA,QAAI9lB,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;;EACA,UAAIqR,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAI7Q,CAAC,GAAGgM,IAAI,CAAChM,CAAb;EAAA,YAAgBD,CAAC,GAAGiM,IAAI,CAACjM,CAAzB;EAAA,YAA4BK,CAAC,GAAG4L,IAAI,CAAC5L,CAArC;EAAA,YAAwCuC,CAAC,GAAGqJ,IAAI,CAACrJ,CAAjD;EACA,YAAI9C,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAWyQ,EAAX,EAAetG,EAAf,IAAqBhqB,IAAI,CAAC6f,KAAL,CAAWjhB,CAAX,EAAcJ,CAAd,CAArB,GAAwCmuB,cAAhD;EACA,YAAItuB,CAAC,GAAGsB,SAAS,CAAC2B,EAAlB,EACIjD,CAAC,IAAIsB,SAAS,CAAC4B,GAAf,CADJ,KAEK,IAAIlD,CAAC,GAAG,CAACsB,SAAS,CAAC2B,EAAnB;EACDjD,UAAAA,CAAC,IAAIsB,SAAS,CAAC4B,GAAf;EACJlD,QAAAA,CAAC,IAAIgR,SAAL;EACA,YAAIpP,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAV;EAAA,YAAuB+B,GAAG,GAAGJ,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAA7B;EACAmM,QAAAA,IAAI,CAAChM,CAAL,GAASyB,GAAG,GAAGzB,CAAN,GAAU4B,GAAG,GAAGxB,CAAzB;EACA4L,QAAAA,IAAI,CAACjM,CAAL,GAAS0B,GAAG,GAAG1B,CAAN,GAAU6B,GAAG,GAAGe,CAAzB;EACAqJ,QAAAA,IAAI,CAAC5L,CAAL,GAASwB,GAAG,GAAG5B,CAAN,GAAUyB,GAAG,GAAGrB,CAAzB;EACA4L,QAAAA,IAAI,CAACrJ,CAAL,GAASf,GAAG,GAAG7B,CAAN,GAAU0B,GAAG,GAAGkB,CAAzB;EACH;;EACD,UAAIivB,SAAJ,EAAe;EACX,YAAIrB,IAAI,GAAG,KAAKA,IAAhB;EACApH,QAAAA,MAAM,CAACpG,YAAP,CAAoBwN,IAAI,CAACtwB,GAAL,CAAS,KAAKoM,IAAL,CAAU2O,OAAnB,EAA4B,KAAK3O,IAAL,CAAU4O,OAAtC,CAApB;EACAjP,QAAAA,IAAI,CAACgU,MAAL,IAAe,CAACuQ,IAAI,CAACxuB,CAAL,GAASiK,IAAI,CAACgU,MAAf,IAAyBlP,IAAxC;EACA9E,QAAAA,IAAI,CAAC+T,MAAL,IAAe,CAACwQ,IAAI,CAACpuB,CAAL,GAAS6J,IAAI,CAAC+T,MAAf,IAAyBhP,IAAxC;EACH;;EACD,UAAIC,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAImQ,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAUoJ,IAAI,CAAChM,CAAL,GAASgM,IAAI,CAAChM,CAAd,GAAkBgM,IAAI,CAAC5L,CAAL,GAAS4L,IAAI,CAAC5L,CAA1C,CAAR;EACA,YAAI+gB,CAAC,IAAI,CAAT,EACIA,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC3f,IAAI,CAACoB,IAAL,CAAU4oB,EAAE,GAAGA,EAAL,GAAUsG,EAAE,GAAGA,EAAzB,IAA+B3Q,CAA/B,GAAmC,KAAK9U,IAAL,CAAU4lB,YAA9C,IAA8DjhB,SAAnE,IAAgFmQ,CAApF;EACJnV,QAAAA,IAAI,CAAChM,CAAL,IAAUmhB,CAAV;EACAnV,QAAAA,IAAI,CAAC5L,CAAL,IAAU+gB,CAAV;EACH;;EACD,UAAIlQ,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAIkQ,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAUoJ,IAAI,CAACjM,CAAL,GAASiM,IAAI,CAACjM,CAAd,GAAkBiM,IAAI,CAACrJ,CAAL,GAASqJ,IAAI,CAACrJ,CAA1C,CAAR;EACA,YAAIwe,CAAC,IAAI,CAAT,EACIA,CAAC,GAAG,CAACA,CAAC,GAAG,CAAC3f,IAAI,CAACoB,IAAL,CAAUivB,EAAE,GAAGA,EAAL,GAAU1G,EAAE,GAAGA,EAAzB,IAA+BhK,CAA/B,GAAmC,KAAK9U,IAAL,CAAU6lB,YAA9C,IAA8DjhB,SAAnE,IAAgFkQ,CAApF;EACJnV,QAAAA,IAAI,CAACjM,CAAL,IAAUohB,CAAV;EACAnV,QAAAA,IAAI,CAACrJ,CAAL,IAAUwe,CAAV;EACH;;EACD,UAAIjQ,SAAS,GAAG,CAAhB,EAAmB;EACf,YAAInR,CAAC,GAAGiM,IAAI,CAACjM,CAAb;EAAA,YAAgB4C,CAAC,GAAGqJ,IAAI,CAACrJ,CAAzB;EACA,YAAImK,EAAE,GAAGtL,IAAI,CAAC6f,KAAL,CAAW1e,CAAX,EAAc5C,CAAd,CAAT;EACA,YAAIF,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAW8J,EAAX,EAAe0G,EAAf,IAAqBrwB,IAAI,CAAC6f,KAAL,CAAWyQ,EAAX,EAAetG,EAAf,CAArB,IAA2C1e,EAAE,GAAGtL,IAAI,CAAC6f,KAAL,CAAWrV,IAAI,CAAC5L,CAAhB,EAAmB4L,IAAI,CAAChM,CAAxB,CAAhD,CAAR;EACA,YAAIH,CAAC,GAAGsB,SAAS,CAAC2B,EAAlB,EACIjD,CAAC,IAAIsB,SAAS,CAAC4B,GAAf,CADJ,KAEK,IAAIlD,CAAC,GAAG,CAACsB,SAAS,CAAC2B,EAAnB;EACDjD,UAAAA,CAAC,IAAIsB,SAAS,CAAC4B,GAAf;EACJlD,QAAAA,CAAC,GAAGiN,EAAE,GAAG,CAACjN,CAAC,GAAGmyB,YAAL,IAAqB9gB,SAA9B;EACA,YAAIiQ,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAU7C,CAAC,GAAGA,CAAJ,GAAQ4C,CAAC,GAAGA,CAAtB,CAAR;EACAqJ,QAAAA,IAAI,CAACjM,CAAL,GAASyB,IAAI,CAACC,GAAL,CAAS5B,CAAT,IAAcshB,CAAvB;EACAnV,QAAAA,IAAI,CAACrJ,CAAL,GAASnB,IAAI,CAACI,GAAL,CAAS/B,CAAT,IAAcshB,CAAvB;EACH;;EACDnV,MAAAA,IAAI,CAACkW,sBAAL;EACH;EACJ;;EACDwP,EAAAA,kBAAkB,GAAG;EACjB,QAAI7gB,SAAS,GAAG,KAAKA,SAArB;EAAA,QAAgCC,IAAI,GAAG,KAAKA,IAA5C;EAAA,QAAkDC,IAAI,GAAG,KAAKA,IAA9D;EAAA,QAAoEC,SAAS,GAAG,KAAKA,SAArF;EAAA,QAAgGC,SAAS,GAAG,KAAKA,SAAjH;EAAA,QAA4HC,SAAS,GAAG,KAAKA,SAA7I;EACA,QAAI0gB,SAAS,GAAG9gB,IAAI,IAAI,CAAR,IAAaC,IAAI,IAAI,CAArC;EACA,QAAIoY,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIqC,EAAE,GAAGrC,MAAM,CAACnpB,CAAhB;EAAA,QAAmB6xB,EAAE,GAAG1I,MAAM,CAACppB,CAA/B;EAAA,QAAkC+xB,EAAE,GAAG3I,MAAM,CAAC/oB,CAA9C;EAAA,QAAiD+qB,EAAE,GAAGhC,MAAM,CAACxmB,CAA7D;EACA,QAAIovB,aAAa,GAAGvG,EAAE,GAAGL,EAAL,GAAU0G,EAAE,GAAGC,EAAf,GAAoB,CAApB,GAAwB3wB,SAAS,CAACO,MAAlC,GAA2C,CAACP,SAAS,CAACO,MAA1E;EACA,QAAIysB,cAAc,GAAG,KAAK9hB,IAAL,CAAU8hB,cAAV,GAA2B4D,aAAhD;EAAA,QAA+DC,YAAY,GAAG,KAAK3lB,IAAL,CAAU2lB,YAAV,GAAyBD,aAAvG;EACA,QAAI9lB,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;;EACA,UAAIqR,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAI7Q,CAAC,GAAGgM,IAAI,CAAChM,CAAb;EAAA,YAAgBD,CAAC,GAAGiM,IAAI,CAACjM,CAAzB;EAAA,YAA4BK,CAAC,GAAG4L,IAAI,CAAC5L,CAArC;EAAA,YAAwCuC,CAAC,GAAGqJ,IAAI,CAACrJ,CAAjD;EACA,YAAI9C,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAWyQ,EAAX,EAAetG,EAAf,IAAqB2C,cAA7B;EACA,YAAItuB,CAAC,GAAGsB,SAAS,CAAC2B,EAAlB,EACIjD,CAAC,IAAIsB,SAAS,CAAC4B,GAAf,CADJ,KAEK,IAAIlD,CAAC,GAAG,CAACsB,SAAS,CAAC2B,EAAnB;EACDjD,UAAAA,CAAC,IAAIsB,SAAS,CAAC4B,GAAf;EACJlD,QAAAA,CAAC,IAAIgR,SAAL;EACA,YAAIpP,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAS5B,CAAT,CAAV;EAAA,YAAuB+B,GAAG,GAAGJ,IAAI,CAACI,GAAL,CAAS/B,CAAT,CAA7B;EACAmM,QAAAA,IAAI,CAAChM,CAAL,GAASyB,GAAG,GAAGzB,CAAN,GAAU4B,GAAG,GAAGxB,CAAzB;EACA4L,QAAAA,IAAI,CAACjM,CAAL,GAAS0B,GAAG,GAAG1B,CAAN,GAAU6B,GAAG,GAAGe,CAAzB;EACAqJ,QAAAA,IAAI,CAAC5L,CAAL,GAASwB,GAAG,GAAG5B,CAAN,GAAUyB,GAAG,GAAGrB,CAAzB;EACA4L,QAAAA,IAAI,CAACrJ,CAAL,GAASf,GAAG,GAAG7B,CAAN,GAAU0B,GAAG,GAAGkB,CAAzB;EACH;;EACD,UAAIivB,SAAJ,EAAe;EACX,YAAIrB,IAAI,GAAG,KAAKA,IAAhB;EACApH,QAAAA,MAAM,CAACpG,YAAP,CAAoBwN,IAAI,CAACtwB,GAAL,CAAS,KAAKoM,IAAL,CAAU2O,OAAnB,EAA4B,KAAK3O,IAAL,CAAU4O,OAAtC,CAApB;EACAjP,QAAAA,IAAI,CAACgU,MAAL,IAAeuQ,IAAI,CAACxuB,CAAL,GAAS+O,IAAxB;EACA9E,QAAAA,IAAI,CAAC+T,MAAL,IAAewQ,IAAI,CAACpuB,CAAL,GAAS4O,IAAxB;EACH;;EACD,UAAIC,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAImQ,CAAC,GAAG,CAAC3f,IAAI,CAACoB,IAAL,CAAU4oB,EAAE,GAAGA,EAAL,GAAUsG,EAAE,GAAGA,EAAzB,IAA+B,CAA/B,GAAmC,KAAKzlB,IAAL,CAAU4lB,YAA9C,IAA8DjhB,SAA9D,GAA0E,CAAlF;EACAhF,QAAAA,IAAI,CAAChM,CAAL,IAAUmhB,CAAV;EACAnV,QAAAA,IAAI,CAAC5L,CAAL,IAAU+gB,CAAV;EACH;;EACD,UAAIlQ,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAIkQ,CAAC,GAAG,CAAC3f,IAAI,CAACoB,IAAL,CAAUivB,EAAE,GAAGA,EAAL,GAAU1G,EAAE,GAAGA,EAAzB,IAA+B,CAA/B,GAAmC,KAAK9e,IAAL,CAAU6lB,YAA9C,IAA8DjhB,SAA9D,GAA0E,CAAlF;EACAjF,QAAAA,IAAI,CAACjM,CAAL,IAAUohB,CAAV;EACAnV,QAAAA,IAAI,CAACrJ,CAAL,IAAUwe,CAAV;EACH;;EACD,UAAIjQ,SAAS,GAAG,CAAhB,EAAmB;EACf,YAAIrR,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAW8J,EAAX,EAAe0G,EAAf,IAAqBrwB,IAAI,CAAC6f,KAAL,CAAWyQ,EAAX,EAAetG,EAAf,CAA7B;EACA,YAAI3rB,CAAC,GAAGsB,SAAS,CAAC2B,EAAlB,EACIjD,CAAC,IAAIsB,SAAS,CAAC4B,GAAf,CADJ,KAEK,IAAIlD,CAAC,GAAG,CAACsB,SAAS,CAAC2B,EAAnB;EACDjD,UAAAA,CAAC,IAAIsB,SAAS,CAAC4B,GAAf;EACJ,YAAIhD,CAAC,GAAGiM,IAAI,CAACjM,CAAb;EAAA,YAAgB4C,CAAC,GAAGqJ,IAAI,CAACrJ,CAAzB;EACA9C,QAAAA,CAAC,GAAG2B,IAAI,CAAC6f,KAAL,CAAW1e,CAAX,EAAc5C,CAAd,IAAmB,CAACF,CAAC,GAAGsB,SAAS,CAAC2B,EAAV,GAAe,CAAnB,GAAuBkvB,YAAxB,IAAwC9gB,SAA/D;EACA,YAAIiQ,CAAC,GAAG3f,IAAI,CAACoB,IAAL,CAAU7C,CAAC,GAAGA,CAAJ,GAAQ4C,CAAC,GAAGA,CAAtB,CAAR;EACAqJ,QAAAA,IAAI,CAACjM,CAAL,GAASyB,IAAI,CAACC,GAAL,CAAS5B,CAAT,IAAcshB,CAAvB;EACAnV,QAAAA,IAAI,CAACrJ,CAAL,GAASnB,IAAI,CAACI,GAAL,CAAS/B,CAAT,IAAcshB,CAAvB;EACH;;EACDnV,MAAAA,IAAI,CAACkW,sBAAL;EACH;EACJ;;EACDuP,EAAAA,kBAAkB,GAAG;EACjB,QAAI5gB,SAAS,GAAG,KAAKA,SAArB;EAAA,QAAgCC,IAAI,GAAG,KAAKA,IAA5C;EAAA,QAAkDC,IAAI,GAAG,KAAKA,IAA9D;EAAA,QAAoEC,SAAS,GAAG,KAAKA,SAArF;EAAA,QAAgGC,SAAS,GAAG,KAAKA,SAAjH;EAAA,QAA4HC,SAAS,GAAG,KAAKA,SAA7I;EACA,QAAIiY,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIld,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,UAAI4M,QAAQ,GAAGJ,IAAI,CAAC0T,SAApB;;EACA,UAAI7O,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAIhR,CAAC,GAAGspB,MAAM,CAACzJ,SAAP,GAAmBtT,QAAnB,GAA8B,KAAKC,IAAL,CAAU8hB,cAAhD;EACAtuB,QAAAA,CAAC,IAAI,CAAC,SAAU,qBAAqBA,CAAC,GAAG,GAA1B,GAAiC,CAA1C,CAAD,IAAiD,GAAtD;EACAuM,QAAAA,QAAQ,IAAIvM,CAAC,GAAGgR,SAAhB;EACH;;EACD,UAAI9O,CAAC,GAAGiK,IAAI,CAACwT,EAAb;EAAA,UAAiBrd,CAAC,GAAG6J,IAAI,CAACyT,EAA1B;EACA1d,MAAAA,CAAC,IAAI,CAAConB,MAAM,CAAC3J,EAAP,GAAYzd,CAAZ,GAAgB,KAAKsK,IAAL,CAAU2O,OAA3B,IAAsClK,IAA3C;EACA3O,MAAAA,CAAC,IAAI,CAACgnB,MAAM,CAAC1J,EAAP,GAAYtd,CAAZ,GAAgB,KAAKkK,IAAL,CAAU4O,OAA3B,IAAsClK,IAA3C;EACA,UAAIjJ,MAAM,GAAGkE,IAAI,CAAC2T,OAAlB;EAAA,UAA2B5X,MAAM,GAAGiE,IAAI,CAAC4T,OAAzC;EACA,UAAI5O,SAAS,IAAI,CAAb,IAAkBlJ,MAAM,IAAI,CAAhC,EACIA,MAAM,GAAG,CAACA,MAAM,GAAG,CAACqhB,MAAM,CAACxJ,OAAP,GAAiB7X,MAAjB,GAA0B,KAAKuE,IAAL,CAAU4lB,YAArC,IAAqDjhB,SAA/D,IAA4ElJ,MAArF;EACJ,UAAImJ,SAAS,IAAI,CAAb,IAAkBlJ,MAAM,IAAI,CAAhC,EACIA,MAAM,GAAG,CAACA,MAAM,GAAG,CAACohB,MAAM,CAACvJ,OAAP,GAAiB7X,MAAjB,GAA0B,KAAKsE,IAAL,CAAU6lB,YAArC,IAAqDjhB,SAA/D,IAA4ElJ,MAArF;EACJ,UAAIE,MAAM,GAAG+D,IAAI,CAAC8T,OAAlB;;EACA,UAAI5O,SAAS,IAAI,CAAjB,EAAoB;EAChB,YAAIrR,CAAC,GAAGspB,MAAM,CAACrJ,OAAP,GAAiB7X,MAAjB,GAA0B,KAAKoE,IAAL,CAAU2lB,YAA5C;EACAnyB,QAAAA,CAAC,IAAI,CAAC,SAAU,qBAAqBA,CAAC,GAAG,GAA1B,GAAiC,CAA1C,CAAD,IAAiD,GAAtD;EACAoI,QAAAA,MAAM,IAAIpI,CAAC,GAAGqR,SAAd;EACH;;EACDlF,MAAAA,IAAI,CAACoU,wBAAL,CAA8Bre,CAA9B,EAAiCI,CAAjC,EAAoCiK,QAApC,EAA8CtE,MAA9C,EAAsDC,MAAtD,EAA8DiE,IAAI,CAAC6T,OAAnE,EAA4E5X,MAA5E;EACH;EACJ;;EACDupB,EAAAA,kBAAkB,GAAG;EACjB,QAAI3gB,SAAS,GAAG,KAAKA,SAArB;EAAA,QAAgCC,IAAI,GAAG,KAAKA,IAA5C;EAAA,QAAkDC,IAAI,GAAG,KAAKA,IAA9D;EAAA,QAAoEC,SAAS,GAAG,KAAKA,SAArF;EAAA,QAAgGC,SAAS,GAAG,KAAKA,SAAjH;EAAA,QAA4HC,SAAS,GAAG,KAAKA,SAA7I;EACA,QAAIiY,MAAM,GAAG,KAAKA,MAAlB;EACA,QAAIld,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,UAAI4M,QAAQ,GAAGJ,IAAI,CAAC0T,SAAL,GAAiB,CAACyJ,MAAM,CAACzJ,SAAP,GAAmB,KAAKrT,IAAL,CAAU8hB,cAA9B,IAAgDtd,SAAhF;EACA,UAAI9O,CAAC,GAAGiK,IAAI,CAACwT,EAAL,GAAU,CAAC2J,MAAM,CAAC3J,EAAP,GAAY,KAAKnT,IAAL,CAAU2O,OAAvB,IAAkClK,IAApD;EACA,UAAI3O,CAAC,GAAG6J,IAAI,CAACyT,EAAL,GAAU,CAAC0J,MAAM,CAAC1J,EAAP,GAAY,KAAKpT,IAAL,CAAU4O,OAAvB,IAAkClK,IAApD;EACA,UAAIjJ,MAAM,GAAGkE,IAAI,CAAC2T,OAAL,IAAiB,CAACwJ,MAAM,CAACxJ,OAAP,GAAiB,CAAjB,GAAqB,KAAKtT,IAAL,CAAU4lB,YAAhC,IAAgDjhB,SAAjD,GAA8D,CAA9E,CAAb;EACA,UAAIjJ,MAAM,GAAGiE,IAAI,CAAC4T,OAAL,IAAiB,CAACuJ,MAAM,CAACvJ,OAAP,GAAiB,CAAjB,GAAqB,KAAKvT,IAAL,CAAU6lB,YAAhC,IAAgDjhB,SAAjD,GAA8D,CAA9E,CAAb;EACA,UAAIhJ,MAAM,GAAG+D,IAAI,CAAC8T,OAAL,GAAe,CAACqJ,MAAM,CAACrJ,OAAP,GAAiB,KAAKzT,IAAL,CAAU2lB,YAA5B,IAA4C9gB,SAAxE;EACAlF,MAAAA,IAAI,CAACoU,wBAAL,CAA8Bre,CAA9B,EAAiCI,CAAjC,EAAoCiK,QAApC,EAA8CtE,MAA9C,EAAsDC,MAAtD,EAA8DiE,IAAI,CAAC6T,OAAnE,EAA4E5X,MAA5E;EACH;EACJ;;EA5M4B;;ECjCjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAUA;EACA;EACA;;EACO,MAAMkqB,QAAN,CAAe;EAClBpzB,EAAAA,WAAW,CAACsN,IAAD,EAAO;EACd;EACA,SAAK+lB,YAAL,GAAoB,IAAIztB,KAAJ,EAApB;EACA;EACR;EACA;;EACQ,SAAK2C,IAAL,GAAY,CAAZ;EACA;EACR;;EACQ,SAAKQ,MAAL,GAAc,CAAd;EACA;EACR;;EACQ,SAAKC,MAAL,GAAc,CAAd;EACA;;EACA,SAAKhG,CAAL,GAAS,CAAT;EACA;;EACA,SAAKI,CAAL,GAAS,CAAT;EACA,QAAI,CAACkK,IAAL,EACI,MAAM,IAAIvF,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAKuF,IAAL,GAAYA,IAAZ;EACA,SAAKJ,KAAL,GAAa,IAAItH,KAAJ,EAAb;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACJ,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,UAAI6yB,QAAQ,GAAGhmB,IAAI,CAACJ,KAAL,CAAWzM,CAAX,CAAf;EACA,UAAIwM,IAAJ;EACA,UAAI,CAACqmB,QAAQ,CAACpT,MAAd,EACIjT,IAAI,GAAG,IAAIsT,IAAJ,CAAS+S,QAAT,EAAmB,IAAnB,EAAyB,IAAzB,CAAP,CADJ,KAEK;EACD,YAAIpT,MAAM,GAAG,KAAKhT,KAAL,CAAWomB,QAAQ,CAACpT,MAAT,CAAgBxJ,KAA3B,CAAb;EACAzJ,QAAAA,IAAI,GAAG,IAAIsT,IAAJ,CAAS+S,QAAT,EAAmB,IAAnB,EAAyBpT,MAAzB,CAAP;EACAA,QAAAA,MAAM,CAACM,QAAP,CAAgBjZ,IAAhB,CAAqB0F,IAArB;EACH;EACD,WAAKC,KAAL,CAAW3F,IAAX,CAAgB0F,IAAhB;EACH;;EACD,SAAKwB,KAAL,GAAa,IAAI7I,KAAJ,EAAb;EACA,SAAK4D,SAAL,GAAiB,IAAI5D,KAAJ,EAAjB;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACmB,KAAL,CAAW9N,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,UAAI8yB,QAAQ,GAAGjmB,IAAI,CAACmB,KAAL,CAAWhO,CAAX,CAAf;EACA,UAAIwM,IAAI,GAAG,KAAKC,KAAL,CAAWqmB,QAAQ,CAACD,QAAT,CAAkB5c,KAA7B,CAAX;EACA,UAAIlI,IAAI,GAAG,IAAI0jB,IAAJ,CAASqB,QAAT,EAAmBtmB,IAAnB,CAAX;EACA,WAAKwB,KAAL,CAAWlH,IAAX,CAAgBiH,IAAhB;EACA,WAAKhF,SAAL,CAAejC,IAAf,CAAoBiH,IAApB;EACH;;EACD,SAAKkD,aAAL,GAAqB,IAAI9L,KAAJ,EAArB;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACoE,aAAL,CAAmB/Q,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;EAChD,UAAI+yB,gBAAgB,GAAGlmB,IAAI,CAACoE,aAAL,CAAmBjR,CAAnB,CAAvB;EACA,WAAKiR,aAAL,CAAmBnK,IAAnB,CAAwB,IAAI2iB,YAAJ,CAAiBsJ,gBAAjB,EAAmC,IAAnC,CAAxB;EACH;;EACD,SAAKphB,oBAAL,GAA4B,IAAIxM,KAAJ,EAA5B;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAAC8E,oBAAL,CAA0BzR,MAA9C,EAAsDF,CAAC,EAAvD,EAA2D;EACvD,UAAIgzB,uBAAuB,GAAGnmB,IAAI,CAAC8E,oBAAL,CAA0B3R,CAA1B,CAA9B;EACA,WAAK2R,oBAAL,CAA0B7K,IAA1B,CAA+B,IAAIgrB,mBAAJ,CAAwBkB,uBAAxB,EAAiD,IAAjD,CAA/B;EACH;;EACD,SAAKlhB,eAAL,GAAuB,IAAI3M,KAAJ,EAAvB;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6M,IAAI,CAACiF,eAAL,CAAqB5R,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;EAClD,UAAIizB,kBAAkB,GAAGpmB,IAAI,CAACiF,eAAL,CAAqB9R,CAArB,CAAzB;EACA,WAAK8R,eAAL,CAAqBhL,IAArB,CAA0B,IAAIqmB,cAAJ,CAAmB8F,kBAAnB,EAAuC,IAAvC,CAA1B;EACH;;EACD,SAAK9xB,KAAL,GAAa,IAAIf,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAb;EACA,SAAK8yB,WAAL;EACH;EACD;EACJ;;;EACIA,EAAAA,WAAW,GAAG;EACV,QAAIA,WAAW,GAAG,KAAKN,YAAvB;EACAM,IAAAA,WAAW,CAAChzB,MAAZ,GAAqB,CAArB;EACA,QAAIuM,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACAwM,MAAAA,IAAI,CAACiU,MAAL,GAAcjU,IAAI,CAACK,IAAL,CAAUgT,YAAxB;EACArT,MAAAA,IAAI,CAACE,MAAL,GAAc,CAACF,IAAI,CAACiU,MAApB;EACH;;EACD,QAAI,KAAK/B,IAAT,EAAe;EACX,UAAIyU,SAAS,GAAG,KAAKzU,IAAL,CAAUjS,KAA1B;;EACA,WAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKye,IAAL,CAAUjS,KAAV,CAAgBvM,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;EACpD,YAAIwM,IAAI,GAAG,KAAKC,KAAL,CAAW0mB,SAAS,CAACnzB,CAAD,CAAT,CAAaiW,KAAxB,CAAX;;EACA,WAAG;EACCzJ,UAAAA,IAAI,CAACiU,MAAL,GAAc,KAAd;EACAjU,UAAAA,IAAI,CAACE,MAAL,GAAc,IAAd;EACAF,UAAAA,IAAI,GAAGA,IAAI,CAACiT,MAAZ;EACH,SAJD,QAISjT,IAJT;EAKH;EACJ,KAnBS;;;EAqBV,QAAIyE,aAAa,GAAG,KAAKA,aAAzB;EACA,QAAIU,oBAAoB,GAAG,KAAKA,oBAAhC;EACA,QAAIG,eAAe,GAAG,KAAKA,eAA3B;EACA,QAAIshB,OAAO,GAAGniB,aAAa,CAAC/Q,MAA5B;EAAA,QAAoCmzB,cAAc,GAAG1hB,oBAAoB,CAACzR,MAA1E;EAAA,QAAkFozB,SAAS,GAAGxhB,eAAe,CAAC5R,MAA9G;EACA,QAAIqzB,eAAe,GAAGH,OAAO,GAAGC,cAAV,GAA2BC,SAAjD;;EACAna,IAAAA,KAAK,EAAE,KAAK,IAAInZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuzB,eAApB,EAAqCvzB,CAAC,EAAtC,EAA0C;EAC7C,WAAK,IAAIgM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGonB,OAAtB,EAA+BpnB,EAAE,EAAjC,EAAqC;EACjC,YAAIgF,UAAU,GAAGC,aAAa,CAACjF,EAAD,CAA9B;;EACA,YAAIgF,UAAU,CAACnE,IAAX,CAAgBkX,KAAhB,IAAyB/jB,CAA7B,EAAgC;EAC5B,eAAKwzB,gBAAL,CAAsBxiB,UAAtB;EACA,mBAASmI,KAAT;EACH;EACJ;;EACD,WAAK,IAAInN,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGqnB,cAAtB,EAAsCrnB,EAAE,EAAxC,EAA4C;EACxC,YAAIgF,UAAU,GAAGW,oBAAoB,CAAC3F,EAAD,CAArC;;EACA,YAAIgF,UAAU,CAACnE,IAAX,CAAgBkX,KAAhB,IAAyB/jB,CAA7B,EAAgC;EAC5B,eAAKyzB,uBAAL,CAA6BziB,UAA7B;EACA,mBAASmI,KAAT;EACH;EACJ;;EACD,WAAK,IAAInN,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGsnB,SAAtB,EAAiCtnB,EAAE,EAAnC,EAAuC;EACnC,YAAIgF,UAAU,GAAGc,eAAe,CAAC9F,EAAD,CAAhC;;EACA,YAAIgF,UAAU,CAACnE,IAAX,CAAgBkX,KAAhB,IAAyB/jB,CAA7B,EAAgC;EAC5B,eAAK0zB,kBAAL,CAAwB1iB,UAAxB;EACA,mBAASmI,KAAT;EACH;EACJ;EACJ;;EACD,SAAK,IAAInZ,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EACI,KAAK2zB,QAAL,CAAclnB,KAAK,CAACzM,CAAD,CAAnB;EACP;;EACDwzB,EAAAA,gBAAgB,CAACxiB,UAAD,EAAa;EACzBA,IAAAA,UAAU,CAACtE,MAAX,GAAoBsE,UAAU,CAAC2Y,MAAX,CAAkBhJ,QAAlB,OAAiC,CAAC3P,UAAU,CAACnE,IAAX,CAAgBgT,YAAjB,IAAkC,KAAKnB,IAAL,IAAava,KAAK,CAACvE,QAAN,CAAe,KAAK8e,IAAL,CAAUkV,WAAzB,EAAsC5iB,UAAU,CAACnE,IAAjD,EAAuD,IAAvD,CAAhF,CAApB;EACA,QAAI,CAACmE,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIid,MAAM,GAAG3Y,UAAU,CAAC2Y,MAAxB;EACA,SAAKgK,QAAL,CAAchK,MAAd;EACA,QAAIkK,WAAW,GAAG7iB,UAAU,CAACvE,KAA7B;EACA,QAAIgT,MAAM,GAAGoU,WAAW,CAAC,CAAD,CAAxB;EACA,SAAKF,QAAL,CAAclU,MAAd;;EACA,QAAIoU,WAAW,CAAC3zB,MAAZ,IAAsB,CAA1B,EAA6B;EACzB,WAAK0yB,YAAL,CAAkB9rB,IAAlB,CAAuBkK,UAAvB;;EACA,WAAK8iB,SAAL,CAAerU,MAAM,CAACM,QAAtB;EACH,KAHD,MAIK;EACD,UAAIyK,KAAK,GAAGqJ,WAAW,CAACA,WAAW,CAAC3zB,MAAZ,GAAqB,CAAtB,CAAvB;EACA,WAAKyzB,QAAL,CAAcnJ,KAAd;;EACA,WAAKoI,YAAL,CAAkB9rB,IAAlB,CAAuBkK,UAAvB;;EACA,WAAK8iB,SAAL,CAAerU,MAAM,CAACM,QAAtB;EACAyK,MAAAA,KAAK,CAAC/J,MAAN,GAAe,IAAf;EACH;EACJ;;EACDiT,EAAAA,kBAAkB,CAAC1iB,UAAD,EAAa;EAC3BA,IAAAA,UAAU,CAACtE,MAAX,GAAoBsE,UAAU,CAAC2Y,MAAX,CAAkBnd,IAAlB,CAAuBmU,QAAvB,OAAsC,CAAC3P,UAAU,CAACnE,IAAX,CAAgBgT,YAAjB,IAAkC,KAAKnB,IAAL,IAAava,KAAK,CAACvE,QAAN,CAAe,KAAK8e,IAAL,CAAUkV,WAAzB,EAAsC5iB,UAAU,CAACnE,IAAjD,EAAuD,IAAvD,CAArF,CAApB;EACA,QAAI,CAACmE,UAAU,CAACtE,MAAhB,EACI;EACJ,QAAIqB,IAAI,GAAGiD,UAAU,CAAC2Y,MAAtB;EACA,QAAI7b,SAAS,GAAGC,IAAI,CAAClB,IAAL,CAAUoJ,KAA1B;EACA,QAAI8d,QAAQ,GAAGhmB,IAAI,CAACvB,IAApB;EACA,QAAI,KAAKkS,IAAT,EACI,KAAKsV,4BAAL,CAAkC,KAAKtV,IAAvC,EAA6C5Q,SAA7C,EAAwDimB,QAAxD;EACJ,QAAI,KAAKlnB,IAAL,CAAUonB,WAAV,IAAyB,KAAKpnB,IAAL,CAAUonB,WAAV,IAAyB,KAAKvV,IAA3D,EACI,KAAKsV,4BAAL,CAAkC,KAAKnnB,IAAL,CAAUonB,WAA5C,EAAyDnmB,SAAzD,EAAoEimB,QAApE;;EACJ,SAAK,IAAI/zB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAK4M,IAAL,CAAUqnB,KAAV,CAAgBh0B,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EACI,KAAKg0B,4BAAL,CAAkC,KAAKnnB,IAAL,CAAUqnB,KAAV,CAAgBl0B,CAAhB,CAAlC,EAAsD8N,SAAtD,EAAiEimB,QAAjE;;EACJ,QAAInrB,UAAU,GAAGmF,IAAI,CAACkB,aAAL,EAAjB;EACA,QAAIrG,UAAU,YAAYuW,cAA1B,EACI,KAAKgV,gCAAL,CAAsCvrB,UAAtC,EAAkDmrB,QAAlD;EACJ,QAAIF,WAAW,GAAG7iB,UAAU,CAACvE,KAA7B;EACA,QAAIqhB,SAAS,GAAG+F,WAAW,CAAC3zB,MAA5B;;EACA,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EACI,KAAK2zB,QAAL,CAAcE,WAAW,CAAC7zB,CAAD,CAAzB;;EACJ,SAAK4yB,YAAL,CAAkB9rB,IAAlB,CAAuBkK,UAAvB;;EACA,SAAK,IAAIhR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EACI,KAAK8zB,SAAL,CAAeD,WAAW,CAAC7zB,CAAD,CAAX,CAAe+f,QAA9B;;EACJ,SAAK,IAAI/f,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EACI6zB,WAAW,CAAC7zB,CAAD,CAAX,CAAeygB,MAAf,GAAwB,IAAxB;EACP;;EACDgT,EAAAA,uBAAuB,CAACziB,UAAD,EAAa;EAChCA,IAAAA,UAAU,CAACtE,MAAX,GAAoBsE,UAAU,CAAC2Y,MAAX,CAAkBhJ,QAAlB,OAAiC,CAAC3P,UAAU,CAACnE,IAAX,CAAgBgT,YAAjB,IAAkC,KAAKnB,IAAL,IAAava,KAAK,CAACvE,QAAN,CAAe,KAAK8e,IAAL,CAAUkV,WAAzB,EAAsC5iB,UAAU,CAACnE,IAAjD,EAAuD,IAAvD,CAAhF,CAApB;EACA,QAAI,CAACmE,UAAU,CAACtE,MAAhB,EACI;EACJ,SAAKinB,QAAL,CAAc3iB,UAAU,CAAC2Y,MAAzB;EACA,QAAIkK,WAAW,GAAG7iB,UAAU,CAACvE,KAA7B;EACA,QAAIqhB,SAAS,GAAG+F,WAAW,CAAC3zB,MAA5B;;EACA,QAAI8Q,UAAU,CAACnE,IAAX,CAAgB2W,KAApB,EAA2B;EACvB,WAAK,IAAIxjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EAAoC;EAChC,YAAIwqB,KAAK,GAAGqJ,WAAW,CAAC7zB,CAAD,CAAvB;EACA,aAAK2zB,QAAL,CAAcnJ,KAAK,CAAC/K,MAApB;EACA,aAAKkU,QAAL,CAAcnJ,KAAd;EACH;EACJ,KAND,MAOK;EACD,WAAK,IAAIxqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EAAoC;EAChC,aAAK2zB,QAAL,CAAcE,WAAW,CAAC7zB,CAAD,CAAzB;EACH;EACJ;;EACD,SAAK4yB,YAAL,CAAkB9rB,IAAlB,CAAuBkK,UAAvB;;EACA,SAAK,IAAIhR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EACI,KAAK8zB,SAAL,CAAeD,WAAW,CAAC7zB,CAAD,CAAX,CAAe+f,QAA9B;;EACJ,SAAK,IAAI/f,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8tB,SAApB,EAA+B9tB,CAAC,EAAhC,EACI6zB,WAAW,CAAC7zB,CAAD,CAAX,CAAeygB,MAAf,GAAwB,IAAxB;EACP;;EACDuT,EAAAA,4BAA4B,CAACtV,IAAD,EAAO5Q,SAAP,EAAkBimB,QAAlB,EAA4B;EACpD,QAAI7d,WAAW,GAAGwI,IAAI,CAACxI,WAAL,CAAiBpI,SAAjB,CAAlB;EACA,QAAI,CAACoI,WAAL,EACI;;EACJ,SAAK,IAAIwE,GAAT,IAAgBxE,WAAhB,EAA6B;EACzB,WAAKie,gCAAL,CAAsCje,WAAW,CAACwE,GAAD,CAAjD,EAAwDqZ,QAAxD;EACH;EACJ;;EACDI,EAAAA,gCAAgC,CAACvrB,UAAD,EAAamrB,QAAb,EAAuB;EACnD,QAAI,EAAEnrB,UAAU,YAAYuW,cAAxB,CAAJ,EACI;EACJ,QAAIiV,SAAS,GAAGxrB,UAAU,CAAC6D,KAA3B;EACA,QAAI,CAAC2nB,SAAL,EACI,KAAKT,QAAL,CAAcI,QAAd,EADJ,KAEK;EACD,UAAItnB,KAAK,GAAG,KAAKA,KAAjB;;EACA,WAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGm0B,SAAS,CAACl0B,MAA9B,EAAsCF,CAAC,GAAGC,CAA1C,GAA8C;EAC1C,YAAIo0B,EAAE,GAAGD,SAAS,CAACp0B,CAAC,EAAF,CAAlB;EACAq0B,QAAAA,EAAE,IAAIr0B,CAAN;;EACA,eAAOA,CAAC,GAAGq0B,EAAX,EACI,KAAKV,QAAL,CAAclnB,KAAK,CAAC2nB,SAAS,CAACp0B,CAAC,EAAF,CAAV,CAAnB;EACP;EACJ;EACJ;;EACD2zB,EAAAA,QAAQ,CAACnnB,IAAD,EAAO;EACX,QAAIA,IAAI,CAACiU,MAAT,EACI;EACJ,QAAIhB,MAAM,GAAGjT,IAAI,CAACiT,MAAlB;EACA,QAAIA,MAAJ,EACI,KAAKkU,QAAL,CAAclU,MAAd;EACJjT,IAAAA,IAAI,CAACiU,MAAL,GAAc,IAAd;;EACA,SAAKmS,YAAL,CAAkB9rB,IAAlB,CAAuB0F,IAAvB;EACH;;EACDsnB,EAAAA,SAAS,CAACrnB,KAAD,EAAQ;EACb,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,UAAI,CAACwM,IAAI,CAACE,MAAV,EACI;EACJ,UAAIF,IAAI,CAACiU,MAAT,EACI,KAAKqT,SAAL,CAAetnB,IAAI,CAACuT,QAApB;EACJvT,MAAAA,IAAI,CAACiU,MAAL,GAAc,KAAd;EACH;EACJ;EACD;EACJ;EACA;EACA;;;EACII,EAAAA,oBAAoB,GAAG;EACnB,QAAIpU,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACAwM,MAAAA,IAAI,CAACwT,EAAL,GAAUxT,IAAI,CAACjK,CAAf;EACAiK,MAAAA,IAAI,CAACyT,EAAL,GAAUzT,IAAI,CAAC7J,CAAf;EACA6J,MAAAA,IAAI,CAAC0T,SAAL,GAAiB1T,IAAI,CAACI,QAAtB;EACAJ,MAAAA,IAAI,CAAC2T,OAAL,GAAe3T,IAAI,CAAClE,MAApB;EACAkE,MAAAA,IAAI,CAAC4T,OAAL,GAAe5T,IAAI,CAACjE,MAApB;EACAiE,MAAAA,IAAI,CAAC6T,OAAL,GAAe7T,IAAI,CAAChE,MAApB;EACAgE,MAAAA,IAAI,CAAC8T,OAAL,GAAe9T,IAAI,CAAC/D,MAApB;EACH;;EACD,QAAIyqB,WAAW,GAAG,KAAKN,YAAvB;;EACA,SAAK,IAAI5yB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGizB,WAAW,CAAChzB,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EACIkzB,WAAW,CAAClzB,CAAD,CAAX,CAAegT,MAAf;EACP;;EACD4N,EAAAA,wBAAwB,CAACnB,MAAD,EAAS;EAC7B;EACA,QAAI6U,QAAQ,GAAG,KAAKC,WAAL,EAAf;EACA,QAAItT,EAAE,GAAGxB,MAAM,CAACjf,CAAhB;EAAA,QAAmB0gB,EAAE,GAAGzB,MAAM,CAAClf,CAA/B;EAAA,QAAkC4gB,EAAE,GAAG1B,MAAM,CAAC7e,CAA9C;EAAA,QAAiDwgB,EAAE,GAAG3B,MAAM,CAACtc,CAA7D;EACAmxB,IAAAA,QAAQ,CAAC9T,MAAT,GAAkBS,EAAE,GAAG,KAAK1e,CAAV,GAAc2e,EAAE,GAAG,KAAKve,CAAxB,GAA4B8c,MAAM,CAACe,MAArD;EACA8T,IAAAA,QAAQ,CAAC/T,MAAT,GAAkBY,EAAE,GAAG,KAAK5e,CAAV,GAAc6e,EAAE,GAAG,KAAKze,CAAxB,GAA4B8c,MAAM,CAACc,MAArD;EACA,QAAIO,SAAS,GAAGwT,QAAQ,CAAC1nB,QAAT,GAAoB,EAApB,GAAyB0nB,QAAQ,CAAC7rB,MAAlD;EACA,QAAI4Y,EAAE,GAAG1f,SAAS,CAACG,MAAV,CAAiBwyB,QAAQ,CAAC1nB,QAAT,GAAoB0nB,QAAQ,CAAC9rB,MAA9C,IAAwD8rB,QAAQ,CAAChsB,MAA1E;EACA,QAAIgZ,EAAE,GAAG3f,SAAS,CAACG,MAAV,CAAiBgf,SAAjB,IAA8BwT,QAAQ,CAAC/rB,MAAhD;EACA,QAAIgZ,EAAE,GAAG5f,SAAS,CAACQ,MAAV,CAAiBmyB,QAAQ,CAAC1nB,QAAT,GAAoB0nB,QAAQ,CAAC9rB,MAA9C,IAAwD8rB,QAAQ,CAAChsB,MAA1E;EACA,QAAIkZ,EAAE,GAAG7f,SAAS,CAACQ,MAAV,CAAiB2e,SAAjB,IAA8BwT,QAAQ,CAAC/rB,MAAhD;EACA+rB,IAAAA,QAAQ,CAAC9zB,CAAT,GAAa,CAACygB,EAAE,GAAGI,EAAL,GAAUH,EAAE,GAAGK,EAAhB,IAAsB,KAAKjZ,MAAxC;EACAgsB,IAAAA,QAAQ,CAAC/zB,CAAT,GAAa,CAAC0gB,EAAE,GAAGK,EAAL,GAAUJ,EAAE,GAAGM,EAAhB,IAAsB,KAAKlZ,MAAxC;EACAgsB,IAAAA,QAAQ,CAAC1zB,CAAT,GAAa,CAACugB,EAAE,GAAGE,EAAL,GAAUD,EAAE,GAAGG,EAAhB,IAAsB,KAAKhZ,MAAxC;EACA+rB,IAAAA,QAAQ,CAACnxB,CAAT,GAAa,CAACge,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGI,EAAhB,IAAsB,KAAKjZ,MAAxC,CAd6B;;EAgB7B,QAAI2qB,WAAW,GAAG,KAAKN,YAAvB;;EACA,SAAK,IAAI5yB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGizB,WAAW,CAAChzB,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAoD;EAChD,UAAIw0B,SAAS,GAAGtB,WAAW,CAAClzB,CAAD,CAA3B;EACA,UAAIw0B,SAAS,IAAIF,QAAjB,EACIE,SAAS,CAACxhB,MAAV;EACP;EACJ;EACD;;;EACA0N,EAAAA,cAAc,GAAG;EACb,SAAK+T,mBAAL;EACA,SAAKC,mBAAL;EACH;EACD;;;EACAD,EAAAA,mBAAmB,GAAG;EAClB,QAAIhoB,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EACIyM,KAAK,CAACzM,CAAD,CAAL,CAAS0gB,cAAT;;EACJ,QAAIzP,aAAa,GAAG,KAAKA,aAAzB;;EACA,SAAK,IAAIjR,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGgR,aAAa,CAAC/Q,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;EAClD,UAAIgR,UAAU,GAAGC,aAAa,CAACjR,CAAD,CAA9B;EACAgR,MAAAA,UAAU,CAACL,GAAX,GAAiBK,UAAU,CAACnE,IAAX,CAAgB8D,GAAjC;EACAK,MAAAA,UAAU,CAACJ,QAAX,GAAsBI,UAAU,CAACnE,IAAX,CAAgB+D,QAAtC;EACAI,MAAAA,UAAU,CAACH,aAAX,GAA2BG,UAAU,CAACnE,IAAX,CAAgBgE,aAA3C;EACAG,MAAAA,UAAU,CAACF,QAAX,GAAsBE,UAAU,CAACnE,IAAX,CAAgBiE,QAAtC;EACAE,MAAAA,UAAU,CAACD,OAAX,GAAqBC,UAAU,CAACnE,IAAX,CAAgBkE,OAArC;EACH;;EACD,QAAIY,oBAAoB,GAAG,KAAKA,oBAAhC;;EACA,SAAK,IAAI3R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG0R,oBAAoB,CAACzR,MAAzC,EAAiDF,CAAC,GAAGC,CAArD,EAAwDD,CAAC,EAAzD,EAA6D;EACzD,UAAIgR,UAAU,GAAGW,oBAAoB,CAAC3R,CAAD,CAArC;EACA,UAAI6M,IAAI,GAAGmE,UAAU,CAACnE,IAAtB;EACAmE,MAAAA,UAAU,CAACK,SAAX,GAAuBxE,IAAI,CAACwE,SAA5B;EACAL,MAAAA,UAAU,CAACM,IAAX,GAAkBzE,IAAI,CAACyE,IAAvB;EACAN,MAAAA,UAAU,CAACO,IAAX,GAAkB1E,IAAI,CAAC0E,IAAvB;EACAP,MAAAA,UAAU,CAACQ,SAAX,GAAuB3E,IAAI,CAAC2E,SAA5B;EACAR,MAAAA,UAAU,CAACS,SAAX,GAAuB5E,IAAI,CAAC4E,SAA5B;EACAT,MAAAA,UAAU,CAACU,SAAX,GAAuB7E,IAAI,CAAC6E,SAA5B;EACH;;EACD,QAAII,eAAe,GAAG,KAAKA,eAA3B;;EACA,SAAK,IAAI9R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG6R,eAAe,CAAC5R,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;EACpD,UAAIgR,UAAU,GAAGc,eAAe,CAAC9R,CAAD,CAAhC;EACA,UAAI6M,IAAI,GAAGmE,UAAU,CAACnE,IAAtB;EACAmE,MAAAA,UAAU,CAACe,QAAX,GAAsBlF,IAAI,CAACkF,QAA3B;EACAf,MAAAA,UAAU,CAACiB,OAAX,GAAqBpF,IAAI,CAACoF,OAA1B;EACAjB,MAAAA,UAAU,CAACK,SAAX,GAAuBxE,IAAI,CAACwE,SAA5B;EACAL,MAAAA,UAAU,CAACM,IAAX,GAAkBzE,IAAI,CAACyE,IAAvB;EACAN,MAAAA,UAAU,CAACO,IAAX,GAAkB1E,IAAI,CAAC0E,IAAvB;EACH;EACJ;EACD;;;EACAmjB,EAAAA,mBAAmB,GAAG;EAClB,QAAI1mB,KAAK,GAAG,KAAKA,KAAjB;EACA7J,IAAAA,KAAK,CAACC,SAAN,CAAgB4J,KAAhB,EAAuB,CAAvB,EAA0B,KAAKjF,SAA/B,EAA0C,CAA1C,EAA6CiF,KAAK,CAAC9N,MAAnD;;EACA,SAAK,IAAIF,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+N,KAAK,CAAC9N,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EACIgO,KAAK,CAAChO,CAAD,CAAL,CAAS0gB,cAAT;EACP;EACD;;;EACA6T,EAAAA,WAAW,GAAG;EACV,QAAI,KAAK9nB,KAAL,CAAWvM,MAAX,IAAqB,CAAzB,EACI,OAAO,IAAP;EACJ,WAAO,KAAKuM,KAAL,CAAW,CAAX,CAAP;EACH;EACD;;;EACAid,EAAAA,QAAQ,CAACiL,QAAD,EAAW;EACf,QAAI,CAACA,QAAL,EACI,MAAM,IAAIrtB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAImF,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,UAAIwM,IAAI,CAACK,IAAL,CAAU1G,IAAV,IAAkBwuB,QAAtB,EACI,OAAOnoB,IAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIghB,EAAAA,QAAQ,CAACoH,QAAD,EAAW;EACf,QAAI,CAACA,QAAL,EACI,MAAM,IAAIttB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAI0G,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+N,KAAK,CAAC9N,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAI+N,IAAI,GAAGC,KAAK,CAAChO,CAAD,CAAhB;EACA,UAAI+N,IAAI,CAAClB,IAAL,CAAU1G,IAAV,IAAkByuB,QAAtB,EACI,OAAO7mB,IAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACI8mB,EAAAA,aAAa,CAACC,QAAD,EAAW;EACpB,QAAIpW,IAAI,GAAG,KAAK7R,IAAL,CAAUkoB,QAAV,CAAmBD,QAAnB,CAAX;EACA,QAAI,CAACpW,IAAL,EACI,MAAM,IAAIpX,KAAJ,CAAU,qBAAqBwtB,QAA/B,CAAN;EACJ,SAAKE,OAAL,CAAatW,IAAb;EACH;EACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACIsW,EAAAA,OAAO,CAACC,OAAD,EAAU;EACb,QAAIA,OAAO,IAAI,KAAKvW,IAApB,EACI;;EACJ,QAAIuW,OAAJ,EAAa;EACT,UAAI,KAAKvW,IAAT,EACIuW,OAAO,CAACC,SAAR,CAAkB,IAAlB,EAAwB,KAAKxW,IAA7B,EADJ,KAEK;EACD,YAAI1Q,KAAK,GAAG,KAAKA,KAAjB;;EACA,aAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+N,KAAK,CAAC9N,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,cAAI+N,IAAI,GAAGC,KAAK,CAAChO,CAAD,CAAhB;EACA,cAAImG,IAAI,GAAG4H,IAAI,CAAClB,IAAL,CAAUkC,cAArB;;EACA,cAAI5I,IAAJ,EAAU;EACN,gBAAIyC,UAAU,GAAGqsB,OAAO,CAAChmB,aAAR,CAAsBjP,CAAtB,EAAyBmG,IAAzB,CAAjB;EACA,gBAAIyC,UAAJ,EACImF,IAAI,CAACiB,aAAL,CAAmBpG,UAAnB;EACP;EACJ;EACJ;EACJ;;EACD,SAAK8V,IAAL,GAAYuW,OAAZ;EACA,SAAK/B,WAAL;EACH;EACD;EACJ;EACA;EACA;EACA;;;EACIiC,EAAAA,mBAAmB,CAACP,QAAD,EAAW7lB,cAAX,EAA2B;EAC1C,WAAO,KAAKE,aAAL,CAAmB,KAAKpC,IAAL,CAAU2gB,QAAV,CAAmBoH,QAAnB,EAA6B3e,KAAhD,EAAuDlH,cAAvD,CAAP;EACH;EACD;EACJ;EACA;EACA;EACA;;;EACIE,EAAAA,aAAa,CAACnB,SAAD,EAAYiB,cAAZ,EAA4B;EACrC,QAAI,CAACA,cAAL,EACI,MAAM,IAAIzH,KAAJ,CAAU,gCAAV,CAAN;;EACJ,QAAI,KAAKoX,IAAT,EAAe;EACX,UAAI9V,UAAU,GAAG,KAAK8V,IAAL,CAAUzP,aAAV,CAAwBnB,SAAxB,EAAmCiB,cAAnC,CAAjB;EACA,UAAInG,UAAJ,EACI,OAAOA,UAAP;EACP;;EACD,QAAI,KAAKiE,IAAL,CAAUonB,WAAd,EACI,OAAO,KAAKpnB,IAAL,CAAUonB,WAAV,CAAsBhlB,aAAtB,CAAoCnB,SAApC,EAA+CiB,cAA/C,CAAP;EACJ,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIC,EAAAA,aAAa,CAAC4lB,QAAD,EAAW7lB,cAAX,EAA2B;EACpC,QAAI,CAAC6lB,QAAL,EACI,MAAM,IAAIttB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAI0G,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+N,KAAK,CAAC9N,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAI+N,IAAI,GAAGC,KAAK,CAAChO,CAAD,CAAhB;;EACA,UAAI+N,IAAI,CAAClB,IAAL,CAAU1G,IAAV,IAAkByuB,QAAtB,EAAgC;EAC5B,YAAIhsB,UAAU,GAAG,IAAjB;;EACA,YAAImG,cAAJ,EAAoB;EAChBnG,UAAAA,UAAU,GAAG,KAAKqG,aAAL,CAAmBjP,CAAnB,EAAsB+O,cAAtB,CAAb;EACA,cAAI,CAACnG,UAAL,EACI,MAAM,IAAItB,KAAJ,CAAU,2BAA2ByH,cAA3B,GAA4C,cAA5C,GAA6D6lB,QAAvE,CAAN;EACP;;EACD7mB,QAAAA,IAAI,CAACiB,aAAL,CAAmBpG,UAAnB;EACA;EACH;EACJ;;EACD,UAAM,IAAItB,KAAJ,CAAU,qBAAqBstB,QAA/B,CAAN;EACH;EACD;EACJ;EACA;;;EACIQ,EAAAA,gBAAgB,CAACC,cAAD,EAAiB;EAC7B,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAI2J,aAAa,GAAG,KAAKA,aAAzB;;EACA,SAAK,IAAIjR,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGgR,aAAa,CAAC/Q,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;EAClD,UAAIgJ,YAAY,GAAGiI,aAAa,CAACjR,CAAD,CAAhC;EACA,UAAIgJ,YAAY,CAAC6D,IAAb,CAAkB1G,IAAlB,IAA0BkvB,cAA9B,EACI,OAAOrsB,YAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIssB,EAAAA,uBAAuB,CAACD,cAAD,EAAiB;EACpC,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAIqK,oBAAoB,GAAG,KAAKA,oBAAhC;;EACA,SAAK,IAAI3R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG0R,oBAAoB,CAACzR,MAAzC,EAAiDF,CAAC,GAAGC,CAArD,EAAwDD,CAAC,EAAzD,EAA6D;EACzD,UAAIgR,UAAU,GAAGW,oBAAoB,CAAC3R,CAAD,CAArC;EACA,UAAIgR,UAAU,CAACnE,IAAX,CAAgB1G,IAAhB,IAAwBkvB,cAA5B,EACI,OAAOrkB,UAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIukB,EAAAA,kBAAkB,CAACF,cAAD,EAAiB;EAC/B,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAIwK,eAAe,GAAG,KAAKA,eAA3B;;EACA,SAAK,IAAI9R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG6R,eAAe,CAAC5R,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;EACpD,UAAIgR,UAAU,GAAGc,eAAe,CAAC9R,CAAD,CAAhC;EACA,UAAIgR,UAAU,CAACnE,IAAX,CAAgB1G,IAAhB,IAAwBkvB,cAA5B,EACI,OAAOrkB,UAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;EACA;;;EACIwkB,EAAAA,SAAS,CAACC,MAAD,EAASh2B,IAAT,EAAesxB,IAAI,GAAG,IAAI5rB,KAAJ,CAAU,CAAV,CAAtB,EAAoC;EACzC,QAAI,CAACswB,MAAL,EACI,MAAM,IAAInuB,KAAJ,CAAU,wBAAV,CAAN;EACJ,QAAI,CAAC7H,IAAL,EACI,MAAM,IAAI6H,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAIyB,SAAS,GAAG,KAAKA,SAArB;EACA,QAAIujB,IAAI,GAAGnc,MAAM,CAACulB,iBAAlB;EAAA,QAAqClJ,IAAI,GAAGrc,MAAM,CAACulB,iBAAnD;EAAA,QAAsEhJ,IAAI,GAAGvc,MAAM,CAACwlB,iBAApF;EAAA,QAAuG/I,IAAI,GAAGzc,MAAM,CAACwlB,iBAArH;;EACA,SAAK,IAAI31B,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG8I,SAAS,CAAC7I,MAA9B,EAAsCF,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EAAkD;EAC9C,UAAI+N,IAAI,GAAGhF,SAAS,CAAC/I,CAAD,CAApB;EACA,UAAI,CAAC+N,IAAI,CAACvB,IAAL,CAAUE,MAAf,EACI;EACJ,UAAIsiB,cAAc,GAAG,CAArB;EACA,UAAI5f,QAAQ,GAAG,IAAf;EACA,UAAIxG,UAAU,GAAGmF,IAAI,CAACkB,aAAL,EAAjB;;EACA,UAAIrG,UAAU,YAAYgW,gBAA1B,EAA4C;EACxCoQ,QAAAA,cAAc,GAAG,CAAjB;EACA5f,QAAAA,QAAQ,GAAGjL,KAAK,CAACY,YAAN,CAAmBgsB,IAAnB,EAAyB/B,cAAzB,EAAyC,CAAzC,CAAX;EACApmB,QAAAA,UAAU,CAACinB,oBAAX,CAAgC9hB,IAAI,CAACvB,IAArC,EAA2C4C,QAA3C,EAAqD,CAArD,EAAwD,CAAxD;EACH,OAJD,MAKK,IAAIxG,UAAU,YAAYmW,cAA1B,EAA0C;EAC3C,YAAI6W,IAAI,GAAGhtB,UAAX;EACAomB,QAAAA,cAAc,GAAG4G,IAAI,CAAC3G,mBAAtB;EACA7f,QAAAA,QAAQ,GAAGjL,KAAK,CAACY,YAAN,CAAmBgsB,IAAnB,EAAyB/B,cAAzB,EAAyC,CAAzC,CAAX;EACA4G,QAAAA,IAAI,CAAC/F,oBAAL,CAA0B9hB,IAA1B,EAAgC,CAAhC,EAAmCihB,cAAnC,EAAmD5f,QAAnD,EAA6D,CAA7D,EAAgE,CAAhE;EACH;;EACD,UAAIA,QAAJ,EAAc;EACV,aAAK,IAAIpD,EAAE,GAAG,CAAT,EAAYqoB,EAAE,GAAGjlB,QAAQ,CAAClP,MAA/B,EAAuC8L,EAAE,GAAGqoB,EAA5C,EAAgDroB,EAAE,IAAI,CAAtD,EAAyD;EACrD,cAAIzJ,CAAC,GAAG6M,QAAQ,CAACpD,EAAD,CAAhB;EAAA,cAAsBrJ,CAAC,GAAGyM,QAAQ,CAACpD,EAAE,GAAG,CAAN,CAAlC;EACAsgB,UAAAA,IAAI,GAAGtqB,IAAI,CAACJ,GAAL,CAAS0qB,IAAT,EAAe/pB,CAAf,CAAP;EACAiqB,UAAAA,IAAI,GAAGxqB,IAAI,CAACJ,GAAL,CAAS4qB,IAAT,EAAe7pB,CAAf,CAAP;EACA+pB,UAAAA,IAAI,GAAG1qB,IAAI,CAACH,GAAL,CAAS6qB,IAAT,EAAenqB,CAAf,CAAP;EACAqqB,UAAAA,IAAI,GAAG5qB,IAAI,CAACH,GAAL,CAAS+qB,IAAT,EAAejqB,CAAf,CAAP;EACH;EACJ;EACJ;;EACD8yB,IAAAA,MAAM,CAACh1B,GAAP,CAAW6rB,IAAX,EAAiBE,IAAjB;EACA/sB,IAAAA,IAAI,CAACgB,GAAL,CAASisB,IAAI,GAAGJ,IAAhB,EAAsBM,IAAI,GAAGJ,IAA7B;EACH;EACD;;;EACAxZ,EAAAA,MAAM,CAACC,KAAD,EAAQ;EACV,SAAKnL,IAAL,IAAamL,KAAb;EACH;;EAhhBiB;;ECxCtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;EACA;EACA;EACA;EACO,MAAM4iB,YAAN,CAAmB;EACtBt2B,EAAAA,WAAW,GAAG;EACV;EACA,SAAKkN,KAAL,GAAa,IAAItH,KAAJ,EAAb,CAFU;;EAGV;;EACA,SAAK6I,KAAL,GAAa,IAAI7I,KAAJ,EAAb,CAJU;;EAKV,SAAK+uB,KAAL,GAAa,IAAI/uB,KAAJ,EAAb;EACA;;EACA,SAAK6C,MAAL,GAAc,IAAI7C,KAAJ,EAAd;EACA;;EACA,SAAK2wB,UAAL,GAAkB,IAAI3wB,KAAJ,EAAlB;EACA;;EACA,SAAK8L,aAAL,GAAqB,IAAI9L,KAAJ,EAArB;EACA;;EACA,SAAKwM,oBAAL,GAA4B,IAAIxM,KAAJ,EAA5B;EACA;;EACA,SAAK2M,eAAL,GAAuB,IAAI3M,KAAJ,EAAvB,CAfU;;EAiBV;;EACA,SAAK4wB,GAAL,GAAW,CAAX;EACH;EACD;EACJ;EACA;;;EACIrM,EAAAA,QAAQ,CAACiL,QAAD,EAAW;EACf,QAAI,CAACA,QAAL,EACI,MAAM,IAAIrtB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAImF,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIzM,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGwM,KAAK,CAACvM,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAIwM,IAAI,GAAGC,KAAK,CAACzM,CAAD,CAAhB;EACA,UAAIwM,IAAI,CAACrG,IAAL,IAAawuB,QAAjB,EACI,OAAOnoB,IAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIghB,EAAAA,QAAQ,CAACoH,QAAD,EAAW;EACf,QAAI,CAACA,QAAL,EACI,MAAM,IAAIttB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAI0G,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIhO,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+N,KAAK,CAAC9N,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAI+N,IAAI,GAAGC,KAAK,CAAChO,CAAD,CAAhB;EACA,UAAI+N,IAAI,CAAC5H,IAAL,IAAayuB,QAAjB,EACI,OAAO7mB,IAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIgnB,EAAAA,QAAQ,CAACD,QAAD,EAAW;EACf,QAAI,CAACA,QAAL,EACI,MAAM,IAAIxtB,KAAJ,CAAU,0BAAV,CAAN;EACJ,QAAI4sB,KAAK,GAAG,KAAKA,KAAjB;;EACA,SAAK,IAAIl0B,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGi0B,KAAK,CAACh0B,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;EAC1C,UAAI0e,IAAI,GAAGwV,KAAK,CAACl0B,CAAD,CAAhB;EACA,UAAI0e,IAAI,CAACvY,IAAL,IAAa2uB,QAAjB,EACI,OAAOpW,IAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIsX,EAAAA,SAAS,CAACC,aAAD,EAAgB;EACrB,QAAI,CAACA,aAAL,EACI,MAAM,IAAI3uB,KAAJ,CAAU,+BAAV,CAAN;EACJ,QAAIU,MAAM,GAAG,KAAKA,MAAlB;;EACA,SAAK,IAAIhI,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG+H,MAAM,CAAC9H,MAA3B,EAAmCF,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;EAC3C,UAAI8I,KAAK,GAAGd,MAAM,CAAChI,CAAD,CAAlB;EACA,UAAI8I,KAAK,CAAC3C,IAAN,IAAc8vB,aAAlB,EACI,OAAOntB,KAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIsP,EAAAA,aAAa,CAACF,aAAD,EAAgB;EACzB,QAAI,CAACA,aAAL,EACI,MAAM,IAAI5Q,KAAJ,CAAU,+BAAV,CAAN;EACJ,QAAIwuB,UAAU,GAAG,KAAKA,UAAtB;;EACA,SAAK,IAAI91B,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG61B,UAAU,CAAC51B,MAA/B,EAAuCF,CAAC,GAAGC,CAA3C,EAA8CD,CAAC,EAA/C,EAAmD;EAC/C,UAAImV,SAAS,GAAG2gB,UAAU,CAAC91B,CAAD,CAA1B;EACA,UAAImV,SAAS,CAAChP,IAAV,IAAkB+R,aAAtB,EACI,OAAO/C,SAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIigB,EAAAA,gBAAgB,CAACC,cAAD,EAAiB;EAC7B,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAI2J,aAAa,GAAG,KAAKA,aAAzB;;EACA,SAAK,IAAIjR,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGgR,aAAa,CAAC/Q,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;EAClD,UAAIgR,UAAU,GAAGC,aAAa,CAACjR,CAAD,CAA9B;EACA,UAAIgR,UAAU,CAAC7K,IAAX,IAAmBkvB,cAAvB,EACI,OAAOrkB,UAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIskB,EAAAA,uBAAuB,CAACD,cAAD,EAAiB;EACpC,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAIqK,oBAAoB,GAAG,KAAKA,oBAAhC;;EACA,SAAK,IAAI3R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG0R,oBAAoB,CAACzR,MAAzC,EAAiDF,CAAC,GAAGC,CAArD,EAAwDD,CAAC,EAAzD,EAA6D;EACzD,UAAIgR,UAAU,GAAGW,oBAAoB,CAAC3R,CAAD,CAArC;EACA,UAAIgR,UAAU,CAAC7K,IAAX,IAAmBkvB,cAAvB,EACI,OAAOrkB,UAAP;EACP;;EACD,WAAO,IAAP;EACH;EACD;EACJ;EACA;;;EACIukB,EAAAA,kBAAkB,CAACF,cAAD,EAAiB;EAC/B,QAAI,CAACA,cAAL,EACI,MAAM,IAAI/tB,KAAJ,CAAU,gCAAV,CAAN;EACJ,QAAIwK,eAAe,GAAG,KAAKA,eAA3B;;EACA,SAAK,IAAI9R,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG6R,eAAe,CAAC5R,MAApC,EAA4CF,CAAC,GAAGC,CAAhD,EAAmDD,CAAC,EAApD,EAAwD;EACpD,UAAIgR,UAAU,GAAGc,eAAe,CAAC9R,CAAD,CAAhC;EACA,UAAIgR,UAAU,CAAC7K,IAAX,IAAmBkvB,cAAvB,EACI,OAAOrkB,UAAP;EACP;;EACD,WAAO,IAAP;EACH;;EApIqB;;EChC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACO,MAAMklB,SAAN,CAAgB;EACnB32B,EAAAA,WAAW,CAACuO,SAAD,EAAY3H,IAAZ,EAAkByC,UAAlB,EAA8B;EACrC,SAAKkF,SAAL,GAAiBA,SAAjB;EACA,SAAK3H,IAAL,GAAYA,IAAZ;EACA,SAAKyC,UAAL,GAAkBA,UAAlB;EACH;;EALkB;EAOvB;EACA;EACA;EACA;;EACO,MAAMutB,IAAN,CAAW;EACd52B,EAAAA,WAAW,CAAC4G,IAAD,EAAO;EACd,SAAK+P,WAAL,GAAmB,IAAI/Q,KAAJ,EAAnB;EACA,SAAKsH,KAAL,GAAatH,KAAK,EAAlB;EACA,SAAKyuB,WAAL,GAAmB,IAAIzuB,KAAJ,EAAnB;EACA,QAAI,CAACgB,IAAL,EACI,MAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;EACJ,SAAKnB,IAAL,GAAYA,IAAZ;EACH;EACD;;;EACA6I,EAAAA,aAAa,CAAClB,SAAD,EAAY3H,IAAZ,EAAkByC,UAAlB,EAA8B;EACvC,QAAI,CAACA,UAAL,EACI,MAAM,IAAItB,KAAJ,CAAU,4BAAV,CAAN;EACJ,QAAI4O,WAAW,GAAG,KAAKA,WAAvB;EACA,QAAIpI,SAAS,IAAIoI,WAAW,CAAChW,MAA7B,EACIgW,WAAW,CAAChW,MAAZ,GAAqB4N,SAAS,GAAG,CAAjC;EACJ,QAAI,CAACoI,WAAW,CAACpI,SAAD,CAAhB,EACIoI,WAAW,CAACpI,SAAD,CAAX,GAAyB,EAAzB;EACJoI,IAAAA,WAAW,CAACpI,SAAD,CAAX,CAAuB3H,IAAvB,IAA+ByC,UAA/B;EACH;EACD;;;EACAwtB,EAAAA,OAAO,CAAC1X,IAAD,EAAO;EACV,SAAK,IAAI1e,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0e,IAAI,CAACjS,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,UAAIwM,IAAI,GAAGkS,IAAI,CAACjS,KAAL,CAAWzM,CAAX,CAAX;EACA,UAAIq2B,SAAS,GAAG,KAAhB;;EACA,WAAK,IAAIrqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAKS,KAAL,CAAWvM,MAAjC,EAAyC8L,EAAE,EAA3C,EAA+C;EAC3C,YAAI,KAAKS,KAAL,CAAWT,EAAX,KAAkBQ,IAAtB,EAA4B;EACxB6pB,UAAAA,SAAS,GAAG,IAAZ;EACA;EACH;EACJ;;EACD,UAAI,CAACA,SAAL,EACI,KAAK5pB,KAAL,CAAW3F,IAAX,CAAgB0F,IAAhB;EACP;;EACD,SAAK,IAAIxM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0e,IAAI,CAACkV,WAAL,CAAiB1zB,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;EAC9C,UAAIgR,UAAU,GAAG0N,IAAI,CAACkV,WAAL,CAAiB5zB,CAAjB,CAAjB;EACA,UAAIq2B,SAAS,GAAG,KAAhB;;EACA,WAAK,IAAIrqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAK4nB,WAAL,CAAiB1zB,MAAvC,EAA+C8L,EAAE,EAAjD,EAAqD;EACjD,YAAI,KAAK4nB,WAAL,CAAiB5nB,EAAjB,KAAwBgF,UAA5B,EAAwC;EACpCqlB,UAAAA,SAAS,GAAG,IAAZ;EACA;EACH;EACJ;;EACD,UAAI,CAACA,SAAL,EACI,KAAKzC,WAAL,CAAiB9sB,IAAjB,CAAsBkK,UAAtB;EACP;;EACD,QAAIkF,WAAW,GAAGwI,IAAI,CAAC4X,cAAL,EAAlB;;EACA,SAAK,IAAIt2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkW,WAAW,CAAChW,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;EACzC,UAAI4I,UAAU,GAAGsN,WAAW,CAAClW,CAAD,CAA5B;EACA,WAAKgP,aAAL,CAAmBpG,UAAU,CAACkF,SAA9B,EAAyClF,UAAU,CAACzC,IAApD,EAA0DyC,UAAU,CAACA,UAArE;EACH;EACJ;EACD;EACJ;;;EACI2tB,EAAAA,QAAQ,CAAC7X,IAAD,EAAO;EACX,SAAK,IAAI1e,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0e,IAAI,CAACjS,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,UAAIwM,IAAI,GAAGkS,IAAI,CAACjS,KAAL,CAAWzM,CAAX,CAAX;EACA,UAAIq2B,SAAS,GAAG,KAAhB;;EACA,WAAK,IAAIrqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAKS,KAAL,CAAWvM,MAAjC,EAAyC8L,EAAE,EAA3C,EAA+C;EAC3C,YAAI,KAAKS,KAAL,CAAWT,EAAX,KAAkBQ,IAAtB,EAA4B;EACxB6pB,UAAAA,SAAS,GAAG,IAAZ;EACA;EACH;EACJ;;EACD,UAAI,CAACA,SAAL,EACI,KAAK5pB,KAAL,CAAW3F,IAAX,CAAgB0F,IAAhB;EACP;;EACD,SAAK,IAAIxM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0e,IAAI,CAACkV,WAAL,CAAiB1zB,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;EAC9C,UAAIgR,UAAU,GAAG0N,IAAI,CAACkV,WAAL,CAAiB5zB,CAAjB,CAAjB;EACA,UAAIq2B,SAAS,GAAG,KAAhB;;EACA,WAAK,IAAIrqB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAK4nB,WAAL,CAAiB1zB,MAAvC,EAA+C8L,EAAE,EAAjD,EAAqD;EACjD,YAAI,KAAK4nB,WAAL,CAAiB5nB,EAAjB,KAAwBgF,UAA5B,EAAwC;EACpCqlB,UAAAA,SAAS,GAAG,IAAZ;EACA;EACH;EACJ;;EACD,UAAI,CAACA,SAAL,EACI,KAAKzC,WAAL,CAAiB9sB,IAAjB,CAAsBkK,UAAtB;EACP;;EACD,QAAIkF,WAAW,GAAGwI,IAAI,CAAC4X,cAAL,EAAlB;;EACA,SAAK,IAAIt2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkW,WAAW,CAAChW,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;EACzC,UAAI4I,UAAU,GAAGsN,WAAW,CAAClW,CAAD,CAA5B;EACA,UAAI,CAAC4I,UAAU,CAACA,UAAhB,EACI;;EACJ,UAAIA,UAAU,CAACA,UAAX,YAAiCmW,cAArC,EAAqD;EACjDnW,QAAAA,UAAU,CAACA,UAAX,GAAwBA,UAAU,CAACA,UAAX,CAAsB4tB,aAAtB,EAAxB;EACA,aAAKxnB,aAAL,CAAmBpG,UAAU,CAACkF,SAA9B,EAAyClF,UAAU,CAACzC,IAApD,EAA0DyC,UAAU,CAACA,UAArE;EACH,OAHD,MAIK;EACDA,QAAAA,UAAU,CAACA,UAAX,GAAwBA,UAAU,CAACA,UAAX,CAAsB6tB,IAAtB,EAAxB;EACA,aAAKznB,aAAL,CAAmBpG,UAAU,CAACkF,SAA9B,EAAyClF,UAAU,CAACzC,IAApD,EAA0DyC,UAAU,CAACA,UAArE;EACH;EACJ;EACJ;EACD;;;EACAqG,EAAAA,aAAa,CAACnB,SAAD,EAAY3H,IAAZ,EAAkB;EAC3B,QAAIuwB,UAAU,GAAG,KAAKxgB,WAAL,CAAiBpI,SAAjB,CAAjB;EACA,WAAO4oB,UAAU,GAAGA,UAAU,CAACvwB,IAAD,CAAb,GAAsB,IAAvC;EACH;EACD;;;EACAwwB,EAAAA,gBAAgB,CAAC7oB,SAAD,EAAY3H,IAAZ,EAAkB;EAC9B,QAAIuwB,UAAU,GAAG,KAAKxgB,WAAL,CAAiBpI,SAAjB,CAAjB;EACA,QAAI4oB,UAAJ,EACIA,UAAU,CAACvwB,IAAD,CAAV,GAAmB,IAAnB;EACP;EACD;;;EACAmwB,EAAAA,cAAc,GAAG;EACb,QAAI92B,OAAO,GAAG,IAAI2F,KAAJ,EAAd;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkW,WAAL,CAAiBhW,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;EAC9C,UAAI42B,eAAe,GAAG,KAAK1gB,WAAL,CAAiBlW,CAAjB,CAAtB;;EACA,UAAI42B,eAAJ,EAAqB;EACjB,aAAK,IAAIzwB,IAAT,IAAiBywB,eAAjB,EAAkC;EAC9B,cAAIhuB,UAAU,GAAGguB,eAAe,CAACzwB,IAAD,CAAhC;EACA,cAAIyC,UAAJ,EACIpJ,OAAO,CAACsH,IAAR,CAAa,IAAIovB,SAAJ,CAAcl2B,CAAd,EAAiBmG,IAAjB,EAAuByC,UAAvB,CAAb;EACP;EACJ;EACJ;;EACD,WAAOpJ,OAAP;EACH;EACD;;;EACAq3B,EAAAA,qBAAqB,CAAC/oB,SAAD,EAAYoI,WAAZ,EAAyB;EAC1C,QAAI0gB,eAAe,GAAG,KAAK1gB,WAAL,CAAiBpI,SAAjB,CAAtB;;EACA,QAAI8oB,eAAJ,EAAqB;EACjB,WAAK,IAAIzwB,IAAT,IAAiBywB,eAAjB,EAAkC;EAC9B,YAAIhuB,UAAU,GAAGguB,eAAe,CAACzwB,IAAD,CAAhC;EACA,YAAIyC,UAAJ,EACIsN,WAAW,CAACpP,IAAZ,CAAiB,IAAIovB,SAAJ,CAAcpoB,SAAd,EAAyB3H,IAAzB,EAA+ByC,UAA/B,CAAjB;EACP;EACJ;EACJ;EACD;;;EACAzI,EAAAA,KAAK,GAAG;EACJ,SAAK+V,WAAL,CAAiBhW,MAAjB,GAA0B,CAA1B;EACA,SAAKuM,KAAL,CAAWvM,MAAX,GAAoB,CAApB;EACA,SAAK0zB,WAAL,CAAiB1zB,MAAjB,GAA0B,CAA1B;EACH;EACD;;;EACAg1B,EAAAA,SAAS,CAACttB,QAAD,EAAWkvB,OAAX,EAAoB;EACzB,QAAIhpB,SAAS,GAAG,CAAhB;;EACA,SAAK,IAAI9N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,QAAQ,CAACoG,KAAT,CAAe9N,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;EAC5C,UAAI+N,IAAI,GAAGnG,QAAQ,CAACoG,KAAT,CAAehO,CAAf,CAAX;EACA,UAAIuP,cAAc,GAAGxB,IAAI,CAACkB,aAAL,EAArB;;EACA,UAAIM,cAAc,IAAIzB,SAAS,GAAGgpB,OAAO,CAAC5gB,WAAR,CAAoBhW,MAAtD,EAA8D;EAC1D,YAAIw2B,UAAU,GAAGI,OAAO,CAAC5gB,WAAR,CAAoBpI,SAApB,CAAjB;;EACA,aAAK,IAAI4M,GAAT,IAAgBgc,UAAhB,EAA4B;EACxB,cAAIK,cAAc,GAAGL,UAAU,CAAChc,GAAD,CAA/B;;EACA,cAAInL,cAAc,IAAIwnB,cAAtB,EAAsC;EAClC,gBAAInuB,UAAU,GAAG,KAAKqG,aAAL,CAAmBnB,SAAnB,EAA8B4M,GAA9B,CAAjB;EACA,gBAAI9R,UAAJ,EACImF,IAAI,CAACiB,aAAL,CAAmBpG,UAAnB;EACJ;EACH;EACJ;EACJ;;EACDkF,MAAAA,SAAS;EACZ;EACJ;;EA7Ja;;ECzClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACO,MAAMkpB,QAAN,CAAe;EAClBz3B,EAAAA,WAAW,CAAC0W,KAAD,EAAQ9P,IAAR,EAAc0sB,QAAd,EAAwB;EAC/B;EACR;EACQ,SAAK1xB,KAAL,GAAa,IAAIf,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAb;EACA,QAAI6V,KAAK,GAAG,CAAZ,EACI,MAAM,IAAI3O,KAAJ,CAAU,qBAAV,CAAN;EACJ,QAAI,CAACnB,IAAL,EACI,MAAM,IAAImB,KAAJ,CAAU,sBAAV,CAAN;EACJ,QAAI,CAACurB,QAAL,EACI,MAAM,IAAIvrB,KAAJ,CAAU,0BAAV,CAAN;EACJ,SAAK2O,KAAL,GAAaA,KAAb;EACA,SAAK9P,IAAL,GAAYA,IAAZ;EACA,SAAK0sB,QAAL,GAAgBA,QAAhB;EACH;;EAdiB;EAgBtB;;EACO,IAAIoE,SAAJ;;EACP,CAAC,UAAUA,SAAV,EAAqB;EAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,QAAD,CAAT,GAAsB,CAAvB,CAAT,GAAqC,QAArC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,UAAD,CAAT,GAAwB,CAAzB,CAAT,GAAuC,UAAvC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,UAAD,CAAT,GAAwB,CAAzB,CAAT,GAAuC,UAAvC;EACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,QAAD,CAAT,GAAsB,CAAvB,CAAT,GAAqC,QAArC;EACH,CALD,EAKGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CALZ;;EChDA;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAK/E;;EAEmH;;EAC7G,MAAO,uBAAP,SAAuC,cAAvC,CAAqD;EAoC1D,EAAA,WAAA,CAAa,IAAb,EAAyB;EACxB,UAAM,IAAN,EAAY,CAAZ,EAAe,KAAf;EAnCD;;EACA,SAAA,KAAA,GAAQ,IAAI,KAAJ,EAAR;EAKA,SAAA,SAAA,GAAY,CAAZ;EACA,SAAA,IAAA,GAAO,CAAP;EACA,SAAA,IAAA,GAAO,CAAP;EACA,SAAA,SAAA,GAAY,CAAZ;EACA,SAAA,SAAA,GAAY,CAAZ;EACA,SAAA,SAAA,GAAY,CAAZ;EAEA;;EACA,SAAA,cAAA,GAAiB,CAAjB;EAEA;;EACA,SAAA,OAAA,GAAU,CAAV;EAEA;;EACA,SAAA,OAAA,GAAU,CAAV;EAEA;;EACA,SAAA,YAAA,GAAe,CAAf;EAEA;;EACA,SAAA,YAAA,GAAe,CAAf;EAEA;;EACA,SAAA,YAAA,GAAe,CAAf;EAEA,SAAA,QAAA,GAAW,KAAX;EACA,SAAA,KAAA,GAAQ,KAAR;EAIC;;EAtCyD;;ECnC3D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EA+9BA,IAAIC,cAAJ;;EACA,CAAC,UAAUA,cAAV,EAA0B;EACvBA,EAAAA,cAAc,CAACA,cAAc,CAAC,QAAD,CAAd,GAA2B,CAA5B,CAAd,GAA+C,QAA/C;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,aAAD,CAAd,GAAgC,CAAjC,CAAd,GAAoD,aAApD;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,MAAD,CAAd,GAAyB,CAA1B,CAAd,GAA6C,MAA7C;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,YAAD,CAAd,GAA+B,CAAhC,CAAd,GAAmD,YAAnD;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,MAAD,CAAd,GAAyB,CAA1B,CAAd,GAA6C,MAA7C;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,OAAD,CAAd,GAA0B,CAA3B,CAAd,GAA8C,OAA9C;EACAA,EAAAA,cAAc,CAACA,cAAc,CAAC,UAAD,CAAd,GAA6B,CAA9B,CAAd,GAAiD,UAAjD;EACH,CARD,EAQGA,cAAc,KAAKA,cAAc,GAAG,EAAtB,CARjB;;EC3/BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAYA;EACA;EACA;EACA;EACA;;EACO,MAAMC,YAAN,CAAmB;EACtB53B,EAAAA,WAAW,CAAC63B,gBAAD,EAAmB;EAC1B;EACR;EACA;EACA;EACQ,SAAKxJ,KAAL,GAAa,CAAb;EACA,SAAKyJ,YAAL,GAAoB,IAAIlyB,KAAJ,EAApB;EACA,SAAKiyB,gBAAL,GAAwBA,gBAAxB;EACH;;EACDE,EAAAA,gBAAgB,CAACC,IAAD,EAAO;EACnB,QAAI3J,KAAK,GAAG,KAAKA,KAAjB;EACA,QAAIzV,YAAY,GAAG,IAAI0d,YAAJ,EAAnB;EACA,QAAI2B,IAAI,GAAG,OAAQD,IAAR,KAAkB,QAAlB,GAA6B3O,IAAI,CAACQ,KAAL,CAAWmO,IAAX,CAA7B,GAAgDA,IAA3D,CAHmB;;EAKnB,QAAIE,WAAW,GAAGD,IAAI,CAAC5vB,QAAvB;;EACA,QAAI6vB,WAAJ,EAAiB;EACbtf,MAAAA,YAAY,CAACuf,IAAb,GAAoBD,WAAW,CAACC,IAAhC;EACAvf,MAAAA,YAAY,CAACwf,OAAb,GAAuBF,WAAW,CAACG,KAAnC;EACAzf,MAAAA,YAAY,CAAC5V,CAAb,GAAiBk1B,WAAW,CAACl1B,CAA7B;EACA4V,MAAAA,YAAY,CAACxV,CAAb,GAAiB80B,WAAW,CAAC90B,CAA7B;EACAwV,MAAAA,YAAY,CAACmD,KAAb,GAAqBmc,WAAW,CAACnc,KAAjC;EACAnD,MAAAA,YAAY,CAACoD,MAAb,GAAsBkc,WAAW,CAAClc,MAAlC;EACApD,MAAAA,YAAY,CAAC4d,GAAb,GAAmB0B,WAAW,CAAC1B,GAA/B;EACA5d,MAAAA,YAAY,CAAC0f,UAAb,GAA0BJ,WAAW,CAACK,MAAtC;EACH,KAfkB;;;EAiBnB,QAAIN,IAAI,CAAC/qB,KAAT,EAAgB;EACZ,WAAK,IAAIzM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAAC/qB,KAAL,CAAWvM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,YAAI+3B,OAAO,GAAGP,IAAI,CAAC/qB,KAAL,CAAWzM,CAAX,CAAd;EACA,YAAIyf,MAAM,GAAG,IAAb;EACA,YAAIuY,UAAU,GAAGC,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,IAApB,CAAzB;EACA,YAAIC,UAAJ,EACIvY,MAAM,GAAGtH,YAAY,CAACuR,QAAb,CAAsBsO,UAAtB,CAAT;EACJ,YAAInrB,IAAI,GAAG,IAAI2S,QAAJ,CAAarH,YAAY,CAAC1L,KAAb,CAAmBvM,MAAhC,EAAwC63B,OAAO,CAAC5xB,IAAhD,EAAsDsZ,MAAtD,CAAX;EACA5S,QAAAA,IAAI,CAAC3M,MAAL,GAAc+3B,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,CAApB,CAAR,GAAiCnK,KAA/C;EACA/gB,QAAAA,IAAI,CAACtK,CAAL,GAAS01B,QAAQ,CAACF,OAAD,EAAU,GAAV,EAAe,CAAf,CAAR,GAA4BnK,KAArC;EACA/gB,QAAAA,IAAI,CAAClK,CAAL,GAASs1B,QAAQ,CAACF,OAAD,EAAU,GAAV,EAAe,CAAf,CAAR,GAA4BnK,KAArC;EACA/gB,QAAAA,IAAI,CAACD,QAAL,GAAgBqrB,QAAQ,CAACF,OAAD,EAAU,UAAV,EAAsB,CAAtB,CAAxB;EACAlrB,QAAAA,IAAI,CAACvE,MAAL,GAAc2vB,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,CAApB,CAAtB;EACAlrB,QAAAA,IAAI,CAACtE,MAAL,GAAc0vB,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,CAApB,CAAtB;EACAlrB,QAAAA,IAAI,CAACrE,MAAL,GAAcyvB,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,CAApB,CAAtB;EACAlrB,QAAAA,IAAI,CAACpE,MAAL,GAAcwvB,QAAQ,CAACF,OAAD,EAAU,QAAV,EAAoB,CAApB,CAAtB;EACAlrB,QAAAA,IAAI,CAAC6S,aAAL,GAAqBvb,KAAK,CAAC8B,SAAN,CAAgB0Z,aAAhB,EAA+BsY,QAAQ,CAACF,OAAD,EAAU,WAAV,EAAuB,QAAvB,CAAvC,CAArB;EACAlrB,QAAAA,IAAI,CAACgT,YAAL,GAAoBoY,QAAQ,CAACF,OAAD,EAAU,MAAV,EAAkB,KAAlB,CAA5B;EACA,YAAI52B,KAAK,GAAG82B,QAAQ,CAACF,OAAD,EAAU,OAAV,EAAmB,IAAnB,CAApB;EACA,YAAI52B,KAAJ,EACI0L,IAAI,CAAC1L,KAAL,CAAWN,aAAX,CAAyBM,KAAzB;EACJgX,QAAAA,YAAY,CAAC1L,KAAb,CAAmB3F,IAAnB,CAAwB+F,IAAxB;EACH;EACJ,KAxCkB;;;EA0CnB,QAAI2qB,IAAI,CAACxpB,KAAT,EAAgB;EACZ,WAAK,IAAIhO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAACxpB,KAAL,CAAW9N,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,YAAIk4B,OAAO,GAAGV,IAAI,CAACxpB,KAAL,CAAWhO,CAAX,CAAd;EACA,YAAI6yB,QAAQ,GAAG1a,YAAY,CAACuR,QAAb,CAAsBwO,OAAO,CAAC1rB,IAA9B,CAAf;EACA,YAAIK,IAAI,GAAG,IAAImqB,QAAJ,CAAa7e,YAAY,CAACnK,KAAb,CAAmB9N,MAAhC,EAAwCg4B,OAAO,CAAC/xB,IAAhD,EAAsD0sB,QAAtD,CAAX;EACA,YAAI1xB,KAAK,GAAG82B,QAAQ,CAACC,OAAD,EAAU,OAAV,EAAmB,IAAnB,CAApB;EACA,YAAI/2B,KAAJ,EACI0L,IAAI,CAAC1L,KAAL,CAAWN,aAAX,CAAyBM,KAAzB;EACJ,YAAIqN,IAAI,GAAGypB,QAAQ,CAACC,OAAD,EAAU,MAAV,EAAkB,IAAlB,CAAnB;EACA,YAAI1pB,IAAJ,EACI3B,IAAI,CAAC4B,SAAL,GAAiBrO,KAAK,CAACiB,UAAN,CAAiBmN,IAAjB,CAAjB;EACJ3B,QAAAA,IAAI,CAACkC,cAAL,GAAsBkpB,QAAQ,CAACC,OAAD,EAAU,YAAV,EAAwB,IAAxB,CAA9B;EACArrB,QAAAA,IAAI,CAACsrB,SAAL,GAAiBh0B,KAAK,CAAC8B,SAAN,CAAgBgxB,SAAhB,EAA2BgB,QAAQ,CAACC,OAAD,EAAU,OAAV,EAAmB,QAAnB,CAAnC,CAAjB;EACA/f,QAAAA,YAAY,CAACnK,KAAb,CAAmBlH,IAAnB,CAAwB+F,IAAxB;EACH;EACJ,KAzDkB;;;EA2DnB,QAAI2qB,IAAI,CAACY,EAAT,EAAa;EACT,WAAK,IAAIp4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAACY,EAAL,CAAQl4B,MAA5B,EAAoCF,CAAC,EAArC,EAAyC;EACrC,YAAIq4B,aAAa,GAAGb,IAAI,CAACY,EAAL,CAAQp4B,CAAR,CAApB;EACA,YAAI6M,IAAI,GAAG,IAAIigB,gBAAJ,CAAqBuL,aAAa,CAAClyB,IAAnC,CAAX;EACA0G,QAAAA,IAAI,CAACkX,KAAL,GAAakU,QAAQ,CAACI,aAAD,EAAgB,OAAhB,EAAyB,CAAzB,CAArB;EACAxrB,QAAAA,IAAI,CAACgT,YAAL,GAAoBoY,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwB,KAAxB,CAA5B;;EACA,aAAK,IAAIrsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGqsB,aAAa,CAAC5rB,KAAd,CAAoBvM,MAA1C,EAAkD8L,EAAE,EAApD,EACIa,IAAI,CAACJ,KAAL,CAAW3F,IAAX,CAAgBqR,YAAY,CAACuR,QAAb,CAAsB2O,aAAa,CAAC5rB,KAAd,CAAoBT,EAApB,CAAtB,CAAhB;;EACJa,QAAAA,IAAI,CAAC8c,MAAL,GAAcxR,YAAY,CAACuR,QAAb,CAAsB2O,aAAa,CAAC1O,MAApC,CAAd;EACA9c,QAAAA,IAAI,CAAC8D,GAAL,GAAWsnB,QAAQ,CAACI,aAAD,EAAgB,KAAhB,EAAuB,CAAvB,CAAnB;EACAxrB,QAAAA,IAAI,CAAC+D,QAAL,GAAgBqnB,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,CAA5B,CAAR,GAAyCzK,KAAzD;EACA/gB,QAAAA,IAAI,CAACgE,aAAL,GAAqBonB,QAAQ,CAACI,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,CAAR,GAAgD,CAAhD,GAAoD,CAAC,CAA1E;EACAxrB,QAAAA,IAAI,CAACiE,QAAL,GAAgBmnB,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,KAA5B,CAAxB;EACAxrB,QAAAA,IAAI,CAACkE,OAAL,GAAeknB,QAAQ,CAACI,aAAD,EAAgB,SAAhB,EAA2B,KAA3B,CAAvB;EACAxrB,QAAAA,IAAI,CAACgd,OAAL,GAAeoO,QAAQ,CAACI,aAAD,EAAgB,SAAhB,EAA2B,KAA3B,CAAvB;EACAlgB,QAAAA,YAAY,CAAClH,aAAb,CAA2BnK,IAA3B,CAAgC+F,IAAhC;EACH;EACJ,KA5EkB;;;EA8EnB,QAAI2qB,IAAI,CAACc,SAAT,EAAoB;EAChB,WAAK,IAAIt4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAACc,SAAL,CAAep4B,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;EAC5C,YAAIq4B,aAAa,GAAGb,IAAI,CAACc,SAAL,CAAet4B,CAAf,CAApB;EACA,YAAI6M,IAAI,GAAG,IAAI0rB,uBAAJ,CAA4BF,aAAa,CAAClyB,IAA1C,CAAX;EACA0G,QAAAA,IAAI,CAACkX,KAAL,GAAakU,QAAQ,CAACI,aAAD,EAAgB,OAAhB,EAAyB,CAAzB,CAArB;EACAxrB,QAAAA,IAAI,CAACgT,YAAL,GAAoBoY,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwB,KAAxB,CAA5B;;EACA,aAAK,IAAIrsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGqsB,aAAa,CAAC5rB,KAAd,CAAoBvM,MAA1C,EAAkD8L,EAAE,EAApD,EACIa,IAAI,CAACJ,KAAL,CAAW3F,IAAX,CAAgBqR,YAAY,CAACuR,QAAb,CAAsB2O,aAAa,CAAC5rB,KAAd,CAAoBT,EAApB,CAAtB,CAAhB;;EACJ,YAAIwsB,UAAU,GAAGH,aAAa,CAAC1O,MAA/B;EACA9c,QAAAA,IAAI,CAAC8c,MAAL,GAAcxR,YAAY,CAACuR,QAAb,CAAsB8O,UAAtB,CAAd;EACA3rB,QAAAA,IAAI,CAAC2W,KAAL,GAAayU,QAAQ,CAACI,aAAD,EAAgB,OAAhB,EAAyB,KAAzB,CAArB;EACAxrB,QAAAA,IAAI,CAACklB,QAAL,GAAgBkG,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,KAA5B,CAAxB;EACAxrB,QAAAA,IAAI,CAAC8hB,cAAL,GAAsBsJ,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,CAA5B,CAA9B;EACAxrB,QAAAA,IAAI,CAAC2O,OAAL,GAAeyc,QAAQ,CAACI,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAR,GAAkCzK,KAAjD;EACA/gB,QAAAA,IAAI,CAAC4O,OAAL,GAAewc,QAAQ,CAACI,aAAD,EAAgB,GAAhB,EAAqB,CAArB,CAAR,GAAkCzK,KAAjD;EACA/gB,QAAAA,IAAI,CAAC4lB,YAAL,GAAoBwF,QAAQ,CAACI,aAAD,EAAgB,QAAhB,EAA0B,CAA1B,CAA5B;EACAxrB,QAAAA,IAAI,CAAC6lB,YAAL,GAAoBuF,QAAQ,CAACI,aAAD,EAAgB,QAAhB,EAA0B,CAA1B,CAA5B;EACAxrB,QAAAA,IAAI,CAAC2lB,YAAL,GAAoByF,QAAQ,CAACI,aAAD,EAAgB,QAAhB,EAA0B,CAA1B,CAA5B;EACAxrB,QAAAA,IAAI,CAACwE,SAAL,GAAiB4mB,QAAQ,CAACI,aAAD,EAAgB,WAAhB,EAA6B,CAA7B,CAAzB;EACAxrB,QAAAA,IAAI,CAACyE,IAAL,GAAY2mB,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwB,CAAxB,CAApB;EACAxrB,QAAAA,IAAI,CAAC0E,IAAL,GAAY0mB,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwBxrB,IAAI,CAACyE,IAA7B,CAApB;EACAzE,QAAAA,IAAI,CAAC2E,SAAL,GAAiBymB,QAAQ,CAACI,aAAD,EAAgB,WAAhB,EAA6B,CAA7B,CAAzB;EACAxrB,QAAAA,IAAI,CAAC4E,SAAL,GAAiBwmB,QAAQ,CAACI,aAAD,EAAgB,WAAhB,EAA6BxrB,IAAI,CAAC2E,SAAlC,CAAzB;EACA3E,QAAAA,IAAI,CAAC6E,SAAL,GAAiBumB,QAAQ,CAACI,aAAD,EAAgB,WAAhB,EAA6B,CAA7B,CAAzB;EACAlgB,QAAAA,YAAY,CAACxG,oBAAb,CAAkC7K,IAAlC,CAAuC+F,IAAvC;EACH;EACJ,KAxGkB;;;EA0GnB,QAAI2qB,IAAI,CAAC/Z,IAAT,EAAe;EACX,WAAK,IAAIzd,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAAC/Z,IAAL,CAAUvd,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;EACvC,YAAIq4B,aAAa,GAAGb,IAAI,CAAC/Z,IAAL,CAAUzd,CAAV,CAApB;EACA,YAAI6M,IAAI,GAAG,IAAIkgB,kBAAJ,CAAuBsL,aAAa,CAAClyB,IAArC,CAAX;EACA0G,QAAAA,IAAI,CAACkX,KAAL,GAAakU,QAAQ,CAACI,aAAD,EAAgB,OAAhB,EAAyB,CAAzB,CAArB;EACAxrB,QAAAA,IAAI,CAACgT,YAAL,GAAoBoY,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwB,KAAxB,CAA5B;;EACA,aAAK,IAAIrsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGqsB,aAAa,CAAC5rB,KAAd,CAAoBvM,MAA1C,EAAkD8L,EAAE,EAApD,EACIa,IAAI,CAACJ,KAAL,CAAW3F,IAAX,CAAgBqR,YAAY,CAACuR,QAAb,CAAsB2O,aAAa,CAAC5rB,KAAd,CAAoBT,EAApB,CAAtB,CAAhB;;EACJ,YAAIwsB,UAAU,GAAGH,aAAa,CAAC1O,MAA/B;EACA9c,QAAAA,IAAI,CAAC8c,MAAL,GAAcxR,YAAY,CAACqV,QAAb,CAAsBgL,UAAtB,CAAd;EACA3rB,QAAAA,IAAI,CAAC0iB,YAAL,GAAoBprB,KAAK,CAAC8B,SAAN,CAAgB+mB,YAAhB,EAA8BiL,QAAQ,CAACI,aAAD,EAAgB,cAAhB,EAAgC,SAAhC,CAAtC,CAApB;EACAxrB,QAAAA,IAAI,CAACmhB,WAAL,GAAmB7pB,KAAK,CAAC8B,SAAN,CAAgBgnB,WAAhB,EAA6BgL,QAAQ,CAACI,aAAD,EAAgB,aAAhB,EAA+B,QAA/B,CAArC,CAAnB;EACAxrB,QAAAA,IAAI,CAAC6gB,UAAL,GAAkBvpB,KAAK,CAAC8B,SAAN,CAAgBinB,UAAhB,EAA4B+K,QAAQ,CAACI,aAAD,EAAgB,YAAhB,EAA8B,SAA9B,CAApC,CAAlB;EACAxrB,QAAAA,IAAI,CAAC8hB,cAAL,GAAsBsJ,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,CAA5B,CAA9B;EACAxrB,QAAAA,IAAI,CAACkF,QAAL,GAAgBkmB,QAAQ,CAACI,aAAD,EAAgB,UAAhB,EAA4B,CAA5B,CAAxB;EACA,YAAIxrB,IAAI,CAAC0iB,YAAL,IAAqBvC,YAAY,CAACyL,KAAtC,EACI5rB,IAAI,CAACkF,QAAL,IAAiB6b,KAAjB;EACJ/gB,QAAAA,IAAI,CAACoF,OAAL,GAAegmB,QAAQ,CAACI,aAAD,EAAgB,SAAhB,EAA2B,CAA3B,CAAvB;EACA,YAAIxrB,IAAI,CAACmhB,WAAL,IAAoBf,WAAW,CAACsB,MAAhC,IAA0C1hB,IAAI,CAACmhB,WAAL,IAAoBf,WAAW,CAACwL,KAA9E,EACI5rB,IAAI,CAACoF,OAAL,IAAgB2b,KAAhB;EACJ/gB,QAAAA,IAAI,CAACwE,SAAL,GAAiB4mB,QAAQ,CAACI,aAAD,EAAgB,WAAhB,EAA6B,CAA7B,CAAzB;EACAxrB,QAAAA,IAAI,CAACyE,IAAL,GAAY2mB,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwB,CAAxB,CAApB;EACAxrB,QAAAA,IAAI,CAAC0E,IAAL,GAAY0mB,QAAQ,CAACI,aAAD,EAAgB,MAAhB,EAAwBxrB,IAAI,CAACyE,IAA7B,CAApB;EACA6G,QAAAA,YAAY,CAACrG,eAAb,CAA6BhL,IAA7B,CAAkC+F,IAAlC;EACH;EACJ,KAnIkB;;;EAqInB,QAAI2qB,IAAI,CAACtD,KAAT,EAAgB;EACZ;EACA,UAAIsD,IAAI,CAACtD,KAAL,YAAsB/uB,KAA1B,EAAiC;EAC7B,aAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGw3B,IAAI,CAACtD,KAAL,CAAWh0B,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;EACxC,cAAI04B,OAAO,GAAGlB,IAAI,CAACtD,KAAL,CAAWl0B,CAAX,CAAd;EACA,cAAI0e,IAAI,GAAG,IAAIyX,IAAJ,CAASuC,OAAO,CAACvyB,IAAjB,CAAX;;EACA,cAAIuyB,OAAO,CAACjsB,KAAZ,EAAmB;EACf,iBAAK,IAAIT,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACjsB,KAAR,CAAcvM,MAApC,EAA4C8L,EAAE,EAA9C,EACI0S,IAAI,CAACjS,KAAL,CAAW3F,IAAX,CAAgBqR,YAAY,CAACuR,QAAb,CAAsBgP,OAAO,CAACjsB,KAAR,CAAcT,EAAd,CAAtB,CAAhB;EACP;;EACD,cAAI0sB,OAAO,CAACN,EAAZ,EAAgB;EACZ,iBAAK,IAAIpsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACN,EAAR,CAAWl4B,MAAjC,EAAyC8L,EAAE,EAA3C,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACid,gBAAb,CAA8BsD,OAAO,CAACN,EAAR,CAAWpsB,EAAX,CAA9B,CAAtB;EACP;;EACD,cAAI0sB,OAAO,CAACJ,SAAZ,EAAuB;EACnB,iBAAK,IAAItsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACJ,SAAR,CAAkBp4B,MAAxC,EAAgD8L,EAAE,EAAlD,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACmd,uBAAb,CAAqCoD,OAAO,CAACJ,SAAR,CAAkBtsB,EAAlB,CAArC,CAAtB;EACP;;EACD,cAAI0sB,OAAO,CAACjb,IAAZ,EAAkB;EACd,iBAAK,IAAIzR,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACjb,IAAR,CAAavd,MAAnC,EAA2C8L,EAAE,EAA7C,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACod,kBAAb,CAAgCmD,OAAO,CAACjb,IAAR,CAAazR,EAAb,CAAhC,CAAtB;EACP;;EACD,eAAK,IAAI4oB,QAAT,IAAqB8D,OAAO,CAACxiB,WAA7B,EAA0C;EACtC,gBAAInI,IAAI,GAAGoK,YAAY,CAACqV,QAAb,CAAsBoH,QAAtB,CAAX;EACA,gBAAIsD,OAAO,GAAGQ,OAAO,CAACxiB,WAAR,CAAoB0e,QAApB,CAAd;;EACA,iBAAK,IAAI+D,SAAT,IAAsBT,OAAtB,EAA+B;EAC3B,kBAAItvB,UAAU,GAAG,KAAKgwB,cAAL,CAAoBV,OAAO,CAACS,SAAD,CAA3B,EAAwCja,IAAxC,EAA8C3Q,IAAI,CAACkI,KAAnD,EAA0D0iB,SAA1D,EAAqExgB,YAArE,CAAjB;EACA,kBAAIvP,UAAJ,EACI8V,IAAI,CAAC1P,aAAL,CAAmBjB,IAAI,CAACkI,KAAxB,EAA+B0iB,SAA/B,EAA0C/vB,UAA1C;EACP;EACJ;;EACDuP,UAAAA,YAAY,CAAC+b,KAAb,CAAmBptB,IAAnB,CAAwB4X,IAAxB;EACA,cAAIA,IAAI,CAACvY,IAAL,IAAa,SAAjB,EACIgS,YAAY,CAAC8b,WAAb,GAA2BvV,IAA3B;EACP;EACJ,OAjCD,MAiCO;EACH,aAAK,IAAI1e,CAAT,IAAcw3B,IAAI,CAACtD,KAAnB,EAA0B;EACtB,cAAIwE,OAAO,GAAGlB,IAAI,CAACtD,KAAL,CAAWl0B,CAAX,CAAd;EACA,cAAI0e,IAAI,GAAG,IAAIyX,IAAJ,CAASn2B,CAAT,CAAX;;EACA,cAAI04B,OAAO,CAACjsB,KAAZ,EAAmB;EACf,iBAAK,IAAIT,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACjsB,KAAR,CAAcvM,MAApC,EAA4C8L,EAAE,EAA9C,EACI0S,IAAI,CAACjS,KAAL,CAAW3F,IAAX,CAAgBqR,YAAY,CAACuR,QAAb,CAAsBgP,OAAO,CAACjsB,KAAR,CAAcT,EAAd,CAAtB,CAAhB;EACP;;EACD,cAAI0sB,OAAO,CAACN,EAAZ,EAAgB;EACZ,iBAAK,IAAIpsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACN,EAAR,CAAWl4B,MAAjC,EAAyC8L,EAAE,EAA3C,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACid,gBAAb,CAA8BsD,OAAO,CAACN,EAAR,CAAWpsB,EAAX,CAA9B,CAAtB;EACP;;EACD,cAAI0sB,OAAO,CAACJ,SAAZ,EAAuB;EACnB,iBAAK,IAAItsB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACJ,SAAR,CAAkBp4B,MAAxC,EAAgD8L,EAAE,EAAlD,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACmd,uBAAb,CAAqCoD,OAAO,CAACJ,SAAR,CAAkBtsB,EAAlB,CAArC,CAAtB;EACP;;EACD,cAAI0sB,OAAO,CAACjb,IAAZ,EAAkB;EACd,iBAAK,IAAIzR,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG0sB,OAAO,CAACjb,IAAR,CAAavd,MAAnC,EAA2C8L,EAAE,EAA7C,EACI0S,IAAI,CAACkV,WAAL,CAAiB9sB,IAAjB,CAAsBqR,YAAY,CAACod,kBAAb,CAAgCmD,OAAO,CAACjb,IAAR,CAAazR,EAAb,CAAhC,CAAtB;EACP;;EACD,eAAK,IAAI4oB,QAAT,IAAqB8D,OAArB,EAA8B;EAC1B,gBAAI3qB,IAAI,GAAGoK,YAAY,CAACqV,QAAb,CAAsBoH,QAAtB,CAAX;EACA,gBAAIsD,OAAO,GAAGQ,OAAO,CAAC9D,QAAD,CAArB;;EACA,iBAAK,IAAI+D,SAAT,IAAsBT,OAAtB,EAA+B;EAC3B,kBAAItvB,UAAU,GAAG,KAAKgwB,cAAL,CAAoBV,OAAO,CAACS,SAAD,CAA3B,EAAwCja,IAAxC,EAA8C3Q,IAAI,CAACkI,KAAnD,EAA0D0iB,SAA1D,EAAqExgB,YAArE,CAAjB;EACA,kBAAIvP,UAAJ,EACI8V,IAAI,CAAC1P,aAAL,CAAmBjB,IAAI,CAACkI,KAAxB,EAA+B0iB,SAA/B,EAA0C/vB,UAA1C;EACP;EACJ;;EACDuP,UAAAA,YAAY,CAAC+b,KAAb,CAAmBptB,IAAnB,CAAwB4X,IAAxB;EACA,cAAI1e,CAAC,IAAI,SAAT,EACImY,YAAY,CAAC8b,WAAb,GAA2BvV,IAA3B;EACP;EACJ;EAEJ,KA3MkB;;;EA6MnB,SAAK,IAAI1e,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKo3B,YAAL,CAAkBn3B,MAAtC,EAA8CF,CAAC,GAAGC,CAAlD,EAAqDD,CAAC,EAAtD,EAA0D;EACtD,UAAI64B,UAAU,GAAG,KAAKxB,YAAL,CAAkBr3B,CAAlB,CAAjB;EACA,UAAI0e,IAAI,GAAG,CAACma,UAAU,CAACna,IAAZ,GAAmBvG,YAAY,CAAC8b,WAAhC,GAA8C9b,YAAY,CAAC4c,QAAb,CAAsB8D,UAAU,CAACna,IAAjC,CAAzD;EACA,UAAIe,MAAM,GAAGf,IAAI,CAACzP,aAAL,CAAmB4pB,UAAU,CAAC/qB,SAA9B,EAAyC+qB,UAAU,CAACpZ,MAApD,CAAb;EACAoZ,MAAAA,UAAU,CAACjD,IAAX,CAAgBnmB,gBAAhB,GAAmCopB,UAAU,CAACC,aAAX,GAA2BrZ,MAA3B,GAAoCoZ,UAAU,CAACjD,IAAlF;EACAiD,MAAAA,UAAU,CAACjD,IAAX,CAAgBmD,aAAhB,CAA8BtZ,MAA9B;EACAoZ,MAAAA,UAAU,CAACjD,IAAX,CAAgBoD,SAAhB;EACH;;EACD,SAAK3B,YAAL,CAAkBn3B,MAAlB,GAA2B,CAA3B,CArNmB;;EAuNnB,QAAIs3B,IAAI,CAACxvB,MAAT,EAAiB;EACb,WAAK,IAAIixB,SAAT,IAAsBzB,IAAI,CAACxvB,MAA3B,EAAmC;EAC/B,YAAIkxB,QAAQ,GAAG1B,IAAI,CAACxvB,MAAL,CAAYixB,SAAZ,CAAf;EACA,YAAIpsB,IAAI,GAAG,IAAI2c,SAAJ,CAAcyP,SAAd,CAAX;EACApsB,QAAAA,IAAI,CAACssB,QAAL,GAAgBlB,QAAQ,CAACiB,QAAD,EAAW,KAAX,EAAkB,CAAlB,CAAxB;EACArsB,QAAAA,IAAI,CAACusB,UAAL,GAAkBnB,QAAQ,CAACiB,QAAD,EAAW,OAAX,EAAoB,CAApB,CAA1B;EACArsB,QAAAA,IAAI,CAACwsB,WAAL,GAAmBpB,QAAQ,CAACiB,QAAD,EAAW,QAAX,EAAqB,EAArB,CAA3B;EACArsB,QAAAA,IAAI,CAACysB,SAAL,GAAiBrB,QAAQ,CAACiB,QAAD,EAAW,OAAX,EAAoB,IAApB,CAAzB;;EACA,YAAIrsB,IAAI,CAACysB,SAAT,EAAoB;EAChBzsB,UAAAA,IAAI,CAAC0sB,MAAL,GAActB,QAAQ,CAACiB,QAAD,EAAW,QAAX,EAAqB,CAArB,CAAtB;EACArsB,UAAAA,IAAI,CAAC2sB,OAAL,GAAevB,QAAQ,CAACiB,QAAD,EAAW,SAAX,EAAsB,CAAtB,CAAvB;EACH;;EACD/gB,QAAAA,YAAY,CAACnQ,MAAb,CAAoBlB,IAApB,CAAyB+F,IAAzB;EACH;EACJ,KArOkB;;;EAuOnB,QAAI2qB,IAAI,CAAC1B,UAAT,EAAqB;EACjB,WAAK,IAAI5d,aAAT,IAA0Bsf,IAAI,CAAC1B,UAA/B,EAA2C;EACvC,YAAI2D,YAAY,GAAGjC,IAAI,CAAC1B,UAAL,CAAgB5d,aAAhB,CAAnB;EACA,aAAKwhB,aAAL,CAAmBD,YAAnB,EAAiCvhB,aAAjC,EAAgDC,YAAhD;EACH;EACJ;;EACD,WAAOA,YAAP;EACH;;EACDygB,EAAAA,cAAc,CAACe,GAAD,EAAMjb,IAAN,EAAY5Q,SAAZ,EAAuB3H,IAAvB,EAA6BgS,YAA7B,EAA2C;EACrD,QAAIyV,KAAK,GAAG,KAAKA,KAAjB;EACAznB,IAAAA,IAAI,GAAG8xB,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAcxzB,IAAd,CAAf;;EACA,YAAQ8xB,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAc,QAAd,CAAhB;EACI,WAAK,QAAL;EAAe;EACX,cAAIlc,IAAI,GAAGwa,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAcxzB,IAAd,CAAnB;EACA,cAAIgW,MAAM,GAAG,KAAKib,gBAAL,CAAsB3Y,mBAAtB,CAA0CC,IAA1C,EAAgDvY,IAAhD,EAAsDsX,IAAtD,CAAb;EACA,cAAI,CAACtB,MAAL,EACI,OAAO,IAAP;EACJA,UAAAA,MAAM,CAACsB,IAAP,GAAcA,IAAd;EACAtB,UAAAA,MAAM,CAAC5Z,CAAP,GAAW01B,QAAQ,CAAC0B,GAAD,EAAM,GAAN,EAAW,CAAX,CAAR,GAAwB/L,KAAnC;EACAzR,UAAAA,MAAM,CAACxZ,CAAP,GAAWs1B,QAAQ,CAAC0B,GAAD,EAAM,GAAN,EAAW,CAAX,CAAR,GAAwB/L,KAAnC;EACAzR,UAAAA,MAAM,CAAC7T,MAAP,GAAgB2vB,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,CAAhB,CAAxB;EACAxd,UAAAA,MAAM,CAAC5T,MAAP,GAAgB0vB,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,CAAhB,CAAxB;EACAxd,UAAAA,MAAM,CAACvP,QAAP,GAAkBqrB,QAAQ,CAAC0B,GAAD,EAAM,UAAN,EAAkB,CAAlB,CAA1B;EACAxd,UAAAA,MAAM,CAACb,KAAP,GAAeqe,GAAG,CAACre,KAAJ,GAAYsS,KAA3B;EACAzR,UAAAA,MAAM,CAACZ,MAAP,GAAgBoe,GAAG,CAACpe,MAAJ,GAAaqS,KAA7B;EACA,cAAIzsB,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACIgb,MAAM,CAAChb,KAAP,CAAaN,aAAb,CAA2BM,KAA3B;EACJgb,UAAAA,MAAM,CAACyd,YAAP;EACA,iBAAOzd,MAAP;EACH;;EACD,WAAK,aAAL;EAAoB;EAChB,cAAI0d,GAAG,GAAG,KAAKzC,gBAAL,CAAsBpY,wBAAtB,CAA+CN,IAA/C,EAAqDvY,IAArD,CAAV;EACA,cAAI,CAAC0zB,GAAL,EACI,OAAO,IAAP;EACJ,eAAKC,YAAL,CAAkBH,GAAlB,EAAuBE,GAAvB,EAA4BF,GAAG,CAACjqB,WAAJ,IAAmB,CAA/C;EACA,cAAIvO,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACI04B,GAAG,CAAC14B,KAAJ,CAAUN,aAAV,CAAwBM,KAAxB;EACJ,iBAAO04B,GAAP;EACH;;EACD,WAAK,MAAL;EACA,WAAK,YAAL;EAAmB;EACf,cAAIpc,IAAI,GAAGwa,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAcxzB,IAAd,CAAnB;EACA,cAAIyvB,IAAI,GAAG,KAAKwB,gBAAL,CAAsBtY,iBAAtB,CAAwCJ,IAAxC,EAA8CvY,IAA9C,EAAoDsX,IAApD,CAAX;EACA,cAAI,CAACmY,IAAL,EACI,OAAO,IAAP;EACJA,UAAAA,IAAI,CAACnY,IAAL,GAAYA,IAAZ;EACA,cAAItc,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACIy0B,IAAI,CAACz0B,KAAL,CAAWN,aAAX,CAAyBM,KAAzB;EACJy0B,UAAAA,IAAI,CAACta,KAAL,GAAa2c,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,CAAf,CAAR,GAA4B/L,KAAzC;EACAgI,UAAAA,IAAI,CAACra,MAAL,GAAc0c,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,CAAhB,CAAR,GAA6B/L,KAA3C;EACA,cAAInO,MAAM,GAAGwY,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,IAAhB,CAArB;;EACA,cAAIla,MAAJ,EAAY;EACR,iBAAK4X,YAAL,CAAkBvwB,IAAlB,CAAuB,IAAIizB,UAAJ,CAAenE,IAAf,EAAqBqC,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAc,IAAd,CAA7B,EAAkD7rB,SAAlD,EAA6D2R,MAA7D,EAAqEwY,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,IAAhB,CAA7E,CAAvB;EACA,mBAAO/D,IAAP;EACH;;EACD,cAAIoE,GAAG,GAAGL,GAAG,CAACK,GAAd;EACA,eAAKF,YAAL,CAAkBH,GAAlB,EAAuB/D,IAAvB,EAA6BoE,GAAG,CAAC95B,MAAjC;EACA01B,UAAAA,IAAI,CAACqE,SAAL,GAAiBN,GAAG,CAACM,SAArB;EACArE,UAAAA,IAAI,CAACsE,SAAL,GAAiBF,GAAjB;EACApE,UAAAA,IAAI,CAACoD,SAAL;EACApD,UAAAA,IAAI,CAACuE,KAAL,GAAalC,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAArB;EACA/D,UAAAA,IAAI,CAACwE,UAAL,GAAkBnC,QAAQ,CAAC0B,GAAD,EAAM,MAAN,EAAc,CAAd,CAAR,GAA2B,CAA7C;EACA,iBAAO/D,IAAP;EACH;;EACD,WAAK,MAAL;EAAa;EACT,cAAInY,IAAI,GAAG,KAAK2Z,gBAAL,CAAsBlY,iBAAtB,CAAwCR,IAAxC,EAA8CvY,IAA9C,CAAX;EACA,cAAI,CAACsX,IAAL,EACI,OAAO,IAAP;EACJA,UAAAA,IAAI,CAACsR,MAAL,GAAckJ,QAAQ,CAAC0B,GAAD,EAAM,QAAN,EAAgB,KAAhB,CAAtB;EACAlc,UAAAA,IAAI,CAAC4R,aAAL,GAAqB4I,QAAQ,CAAC0B,GAAD,EAAM,eAAN,EAAuB,IAAvB,CAA7B;EACA,cAAIjqB,WAAW,GAAGiqB,GAAG,CAACjqB,WAAtB;EACA,eAAKoqB,YAAL,CAAkBH,GAAlB,EAAuBlc,IAAvB,EAA6B/N,WAAW,IAAI,CAA5C;EACA,cAAI4d,OAAO,GAAGnpB,KAAK,CAACc,QAAN,CAAeyK,WAAW,GAAG,CAA7B,EAAgC,CAAhC,CAAd;;EACA,eAAK,IAAI1P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG25B,GAAG,CAACrM,OAAJ,CAAYptB,MAAhC,EAAwCF,CAAC,EAAzC,EACIstB,OAAO,CAACttB,CAAD,CAAP,GAAa25B,GAAG,CAACrM,OAAJ,CAAYttB,CAAZ,IAAiB4tB,KAA9B;;EACJnQ,UAAAA,IAAI,CAAC6P,OAAL,GAAeA,OAAf;EACA,cAAInsB,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACIsc,IAAI,CAACtc,KAAL,CAAWN,aAAX,CAAyBM,KAAzB;EACJ,iBAAOsc,IAAP;EACH;;EACD,WAAK,OAAL;EAAc;EACV,cAAI4c,KAAK,GAAG,KAAKjD,gBAAL,CAAsBhY,kBAAtB,CAAyCV,IAAzC,EAA+CvY,IAA/C,CAAZ;EACA,cAAI,CAACk0B,KAAL,EACI,OAAO,IAAP;EACJA,UAAAA,KAAK,CAAC93B,CAAN,GAAU01B,QAAQ,CAAC0B,GAAD,EAAM,GAAN,EAAW,CAAX,CAAR,GAAwB/L,KAAlC;EACAyM,UAAAA,KAAK,CAAC13B,CAAN,GAAUs1B,QAAQ,CAAC0B,GAAD,EAAM,GAAN,EAAW,CAAX,CAAR,GAAwB/L,KAAlC;EACAyM,UAAAA,KAAK,CAACztB,QAAN,GAAiBqrB,QAAQ,CAAC0B,GAAD,EAAM,UAAN,EAAkB,CAAlB,CAAzB;EACA,cAAIx4B,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACIk5B,KAAK,CAACl5B,KAAN,CAAYN,aAAZ,CAA0BM,KAA1B;EACJ,iBAAOk5B,KAAP;EACH;;EACD,WAAK,UAAL;EAAiB;EACb,cAAIC,IAAI,GAAG,KAAKlD,gBAAL,CAAsB9X,qBAAtB,CAA4CZ,IAA5C,EAAkDvY,IAAlD,CAAX;EACA,cAAI,CAACm0B,IAAL,EACI,OAAO,IAAP;EACJ,cAAIx2B,GAAG,GAAGm0B,QAAQ,CAAC0B,GAAD,EAAM,KAAN,EAAa,IAAb,CAAlB;EACA,cAAI71B,GAAJ,EACIw2B,IAAI,CAACC,OAAL,GAAepiB,YAAY,CAACqV,QAAb,CAAsB1pB,GAAtB,CAAf;EACJ,cAAI4L,WAAW,GAAGiqB,GAAG,CAACjqB,WAAtB;EACA,eAAKoqB,YAAL,CAAkBH,GAAlB,EAAuBW,IAAvB,EAA6B5qB,WAAW,IAAI,CAA5C;EACA,cAAIvO,KAAK,GAAG82B,QAAQ,CAAC0B,GAAD,EAAM,OAAN,EAAe,IAAf,CAApB;EACA,cAAIx4B,KAAJ,EACIm5B,IAAI,CAACn5B,KAAL,CAAWN,aAAX,CAAyBM,KAAzB;EACJ,iBAAOm5B,IAAP;EACH;EAlGL;;EAoGA,WAAO,IAAP;EACH;;EACDR,EAAAA,YAAY,CAACH,GAAD,EAAM/wB,UAAN,EAAkBomB,cAAlB,EAAkC;EAC1C,QAAIpB,KAAK,GAAG,KAAKA,KAAjB;EACAhlB,IAAAA,UAAU,CAACqmB,mBAAX,GAAiCD,cAAjC;EACA,QAAI5f,QAAQ,GAAGuqB,GAAG,CAACvqB,QAAnB;;EACA,QAAI4f,cAAc,IAAI5f,QAAQ,CAAClP,MAA/B,EAAuC;EACnC,UAAIs6B,cAAc,GAAGr2B,KAAK,CAACsB,YAAN,CAAmB2J,QAAnB,CAArB;;EACA,UAAIwe,KAAK,IAAI,CAAb,EAAgB;EACZ,aAAK,IAAI5tB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmP,QAAQ,CAAClP,MAA7B,EAAqCF,CAAC,GAAGC,CAAzC,EAA4CD,CAAC,EAA7C,EACIw6B,cAAc,CAACx6B,CAAD,CAAd,IAAqB4tB,KAArB;EACP;;EACDhlB,MAAAA,UAAU,CAACwG,QAAX,GAAsBorB,cAAtB;EACA;EACH;;EACD,QAAIC,OAAO,GAAG,IAAIt1B,KAAJ,EAAd;EACA,QAAIsH,KAAK,GAAG,IAAItH,KAAJ,EAAZ;;EACA,SAAK,IAAInF,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmP,QAAQ,CAAClP,MAA7B,EAAqCF,CAAC,GAAGC,CAAzC,GAA6C;EACzC,UAAI6tB,SAAS,GAAG1e,QAAQ,CAACpP,CAAC,EAAF,CAAxB;EACAyM,MAAAA,KAAK,CAAC3F,IAAN,CAAWgnB,SAAX;;EACA,WAAK,IAAIuG,EAAE,GAAGr0B,CAAC,GAAG8tB,SAAS,GAAG,CAA9B,EAAiC9tB,CAAC,GAAGq0B,EAArC,EAAyCr0B,CAAC,IAAI,CAA9C,EAAiD;EAC7CyM,QAAAA,KAAK,CAAC3F,IAAN,CAAWsI,QAAQ,CAACpP,CAAD,CAAnB;EACAy6B,QAAAA,OAAO,CAAC3zB,IAAR,CAAasI,QAAQ,CAACpP,CAAC,GAAG,CAAL,CAAR,GAAkB4tB,KAA/B;EACA6M,QAAAA,OAAO,CAAC3zB,IAAR,CAAasI,QAAQ,CAACpP,CAAC,GAAG,CAAL,CAAR,GAAkB4tB,KAA/B;EACA6M,QAAAA,OAAO,CAAC3zB,IAAR,CAAasI,QAAQ,CAACpP,CAAC,GAAG,CAAL,CAArB;EACH;EACJ;;EACD4I,IAAAA,UAAU,CAAC6D,KAAX,GAAmBA,KAAnB;EACA7D,IAAAA,UAAU,CAACwG,QAAX,GAAsBjL,KAAK,CAACsB,YAAN,CAAmBg1B,OAAnB,CAAtB;EACH;;EACDf,EAAAA,aAAa,CAACC,GAAD,EAAMxzB,IAAN,EAAYgS,YAAZ,EAA0B;EACnC,QAAIyV,KAAK,GAAG,KAAKA,KAAjB;EACA,QAAIxmB,SAAS,GAAG,IAAIjC,KAAJ,EAAhB,CAFmC;;EAInC,QAAIw0B,GAAG,CAAC3rB,KAAR,EAAe;EACX,WAAK,IAAI4mB,QAAT,IAAqB+E,GAAG,CAAC3rB,KAAzB,EAAgC;EAC5B,YAAIkqB,OAAO,GAAGyB,GAAG,CAAC3rB,KAAJ,CAAU4mB,QAAV,CAAd;EACA,YAAI9mB,SAAS,GAAGqK,YAAY,CAACqV,QAAb,CAAsBoH,QAAtB,EAAgC3e,KAAhD;;EACA,aAAK,IAAIykB,YAAT,IAAyBxC,OAAzB,EAAkC;EAC9B,cAAIyC,WAAW,GAAGzC,OAAO,CAACwC,YAAD,CAAzB;EACA,cAAI,CAACC,WAAL,EACI;EACJ,cAAInxB,MAAM,GAAGmxB,WAAW,CAACz6B,MAAzB;;EACA,cAAIw6B,YAAY,IAAI,YAApB,EAAkC;EAC9B,gBAAIrlB,QAAQ,GAAG,IAAIxG,kBAAJ,CAAuBrF,MAAvB,EAA+BsE,SAA/B,CAAf;;EACA,iBAAK,IAAI3D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGX,MAA5B,EAAoCW,KAAK,EAAzC,EAA6C;EACzC,kBAAIywB,MAAM,GAAGD,WAAW,CAACxwB,KAAD,CAAxB;EACAkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyB8tB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAjC,EAAsDA,MAAM,CAACz0B,IAA7D;EACH;;EACDiB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH,WAPD,MAQK,IAAIqlB,YAAY,IAAI,MAApB,EAA4B;EAC7B,gBAAIrlB,QAAQ,GAAG,IAAIxH,YAAJ,CAAiBrE,MAAjB,EAAyBA,MAAM,IAAI,CAAnC,EAAsCsE,SAAtC,CAAf;EACA,gBAAI8sB,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,gBAAI7yB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIz5B,KAAK,GAAGf,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACz5B,KAAxB,CAAZ;;EACA,iBAAK,IAAIgJ,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B3G,KAAK,CAACd,CAArC,EAAwCc,KAAK,CAACb,CAA9C,EAAiDa,KAAK,CAACZ,CAAvD,EAA0DY,KAAK,CAACX,CAAhE;EACA,kBAAIq6B,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIC,QAAQ,GAAG16B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAAC15B,KAAzB,CAAf;EACA,kBAAIuuB,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,kBAAIA,KAAJ,EAAW;EACPllB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACd,CAAvD,EAA0Dy6B,QAAQ,CAACz6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACb,CAAvD,EAA0Dw6B,QAAQ,CAACx6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACZ,CAAvD,EAA0Du6B,QAAQ,CAACv6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAiK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACX,CAAvD,EAA0Ds6B,QAAQ,CAACt6B,CAAnE,EAAsE,CAAtE,CAAlB;EACH;;EACDsH,cAAAA,IAAI,GAAGiD,KAAP;EACA5J,cAAAA,KAAK,GAAG25B,QAAR;EACAF,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH,WA1BI,MA2BA,IAAIqlB,YAAY,IAAI,KAApB,EAA2B;EAC5B,gBAAIrlB,QAAQ,GAAG,IAAIpH,WAAJ,CAAgBzE,MAAhB,EAAwBA,MAAM,GAAG,CAAjC,EAAoCsE,SAApC,CAAf;EACA,gBAAI8sB,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,gBAAI7yB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIz5B,KAAK,GAAGf,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACz5B,KAAxB,CAAZ;;EACA,iBAAK,IAAIgJ,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B3G,KAAK,CAACd,CAArC,EAAwCc,KAAK,CAACb,CAA9C,EAAiDa,KAAK,CAACZ,CAAvD;EACA,kBAAIs6B,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIC,QAAQ,GAAG16B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAAC15B,KAAzB,CAAf;EACA,kBAAIuuB,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,kBAAIA,KAAJ,EAAW;EACPllB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACd,CAAvD,EAA0Dy6B,QAAQ,CAACz6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACb,CAAvD,EAA0Dw6B,QAAQ,CAACx6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACZ,CAAvD,EAA0Du6B,QAAQ,CAACv6B,CAAnE,EAAsE,CAAtE,CAAlB;EACH;;EACDuH,cAAAA,IAAI,GAAGiD,KAAP;EACA5J,cAAAA,KAAK,GAAG25B,QAAR;EACAF,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH,WAzBI,MA0BA,IAAIqlB,YAAY,IAAI,OAApB,EAA6B;EAC9BtzB,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAAc,IAAIzsB,aAAJ,CAAkB1E,MAAlB,EAA0BA,MAA1B,EAAkCsE,SAAlC,CAAd,EAA4D,CAA5D,EAA+D,CAA/D,CAA5B;EACH,WAFI,MAGA,IAAI4sB,YAAY,IAAI,OAApB,EAA6B;EAC9B,gBAAIrlB,QAAQ,GAAG,IAAIlH,aAAJ,CAAkB3E,MAAlB,EAA0BA,MAAM,GAAG,CAAnC,EAAsCsE,SAAtC,CAAf;EACA,gBAAI8sB,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,gBAAI7yB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIz5B,KAAK,GAAGf,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACrsB,KAAxB,CAAZ;EACA,gBAAI0sB,MAAM,GAAG76B,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACpsB,IAAxB,CAAb;;EACA,iBAAK,IAAIrE,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B3G,KAAK,CAACd,CAArC,EAAwCc,KAAK,CAACb,CAA9C,EAAiDa,KAAK,CAACZ,CAAvD,EAA0DY,KAAK,CAACX,CAAhE,EAAmEy6B,MAAM,CAAC56B,CAA1E,EAA6E46B,MAAM,CAAC36B,CAApF,EAAuF26B,MAAM,CAAC16B,CAA9F;EACA,kBAAIs6B,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIC,QAAQ,GAAG16B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAACtsB,KAAzB,CAAf;EACA,kBAAI2sB,SAAS,GAAG96B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAACrsB,IAAzB,CAAhB;EACA,kBAAIkhB,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,kBAAIA,KAAJ,EAAW;EACPllB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACd,CAAvD,EAA0Dy6B,QAAQ,CAACz6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACb,CAAvD,EAA0Dw6B,QAAQ,CAACx6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACZ,CAAvD,EAA0Du6B,QAAQ,CAACv6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAiK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACX,CAAvD,EAA0Ds6B,QAAQ,CAACt6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAgK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC56B,CAAxD,EAA2D66B,SAAS,CAAC76B,CAArE,EAAwE,CAAxE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC36B,CAAxD,EAA2D46B,SAAS,CAAC56B,CAArE,EAAwE,CAAxE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC16B,CAAxD,EAA2D26B,SAAS,CAAC36B,CAArE,EAAwE,CAAxE,CAAlB;EACH;;EACDuH,cAAAA,IAAI,GAAGiD,KAAP;EACA5J,cAAAA,KAAK,GAAG25B,QAAR;EACAG,cAAAA,MAAM,GAAGC,SAAT;EACAN,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH,WAhCI,MAiCA,IAAIqlB,YAAY,IAAI,MAApB,EAA4B;EAC7B,gBAAIrlB,QAAQ,GAAG,IAAIzG,YAAJ,CAAiBpF,MAAjB,EAAyBA,MAAM,GAAG,CAAlC,EAAqCsE,SAArC,CAAf;EACA,gBAAI8sB,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,gBAAI7yB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIz5B,KAAK,GAAGf,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACrsB,KAAxB,CAAZ;EACA,gBAAI0sB,MAAM,GAAG76B,KAAK,CAACiB,UAAN,CAAiBu5B,MAAM,CAACpsB,IAAxB,CAAb;;EACA,iBAAK,IAAIrE,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B3G,KAAK,CAACd,CAArC,EAAwCc,KAAK,CAACb,CAA9C,EAAiDa,KAAK,CAACZ,CAAvD,EAA0D06B,MAAM,CAAC56B,CAAjE,EAAoE46B,MAAM,CAAC36B,CAA3E,EAA8E26B,MAAM,CAAC16B,CAArF;EACA,kBAAIs6B,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIC,QAAQ,GAAG16B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAACtsB,KAAzB,CAAf;EACA,kBAAI2sB,SAAS,GAAG96B,KAAK,CAACiB,UAAN,CAAiBw5B,OAAO,CAACrsB,IAAzB,CAAhB;EACA,kBAAIkhB,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,kBAAIA,KAAJ,EAAW;EACPllB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACd,CAAvD,EAA0Dy6B,QAAQ,CAACz6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACb,CAAvD,EAA0Dw6B,QAAQ,CAACx6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD5J,KAAK,CAACZ,CAAvD,EAA0Du6B,QAAQ,CAACv6B,CAAnE,EAAsE,CAAtE,CAAlB;EACAiK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC56B,CAAxD,EAA2D66B,SAAS,CAAC76B,CAArE,EAAwE,CAAxE,CAAlB;EACAmK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC36B,CAAxD,EAA2D46B,SAAS,CAAC56B,CAArE,EAAwE,CAAxE,CAAlB;EACAkK,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDkwB,MAAM,CAAC16B,CAAxD,EAA2D26B,SAAS,CAAC36B,CAArE,EAAwE,CAAxE,CAAlB;EACH;;EACDuH,cAAAA,IAAI,GAAGiD,KAAP;EACA5J,cAAAA,KAAK,GAAG25B,QAAR;EACAG,cAAAA,MAAM,GAAGC,SAAT;EACAN,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;EACJ;EACJ;EACJ,KAhJkC;;;EAkJnC,QAAIskB,GAAG,CAACltB,KAAR,EAAe;EACX,WAAK,IAAIkoB,QAAT,IAAqBgF,GAAG,CAACltB,KAAzB,EAAgC;EAC5B,YAAIsrB,OAAO,GAAG4B,GAAG,CAACltB,KAAJ,CAAUkoB,QAAV,CAAd;EACA,YAAIpoB,SAAS,GAAG4L,YAAY,CAACuR,QAAb,CAAsBiL,QAAtB,EAAgC1e,KAAhD;;EACA,aAAK,IAAIykB,YAAT,IAAyB3C,OAAzB,EAAkC;EAC9B,cAAI4C,WAAW,GAAG5C,OAAO,CAAC2C,YAAD,CAAzB;EACA,cAAIlxB,MAAM,GAAGmxB,WAAW,CAACz6B,MAAzB;EACA,cAAIsJ,MAAM,IAAI,CAAd,EACI;;EACJ,cAAIkxB,YAAY,KAAK,QAArB,EAA+B;EAC3BtzB,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAAc,IAAIruB,cAAJ,CAAmB9C,MAAnB,EAA2BA,MAA3B,EAAmC+C,SAAnC,CAAd,EAA6D,CAA7D,EAAgE,CAAhE,CAA5B;EACH,WAFD,MAGK,IAAImuB,YAAY,KAAK,WAArB,EAAkC;EACnC,gBAAIrlB,QAAQ,GAAG,IAAIrI,iBAAJ,CAAsBxD,MAAtB,EAA8BA,MAAM,IAAI,CAAxC,EAA2C+C,SAA3C,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAeq0B,aAAa,CAACR,WAAD,EAActlB,QAAd,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,CAAlC,EAAqCuY,KAArC,CAA5B;EACH,WAHI,MAIA,IAAI8M,YAAY,KAAK,YAArB,EAAmC;EACpC,gBAAIrlB,QAAQ,GAAG,IAAInI,kBAAJ,CAAuB1D,MAAvB,EAA+BA,MAA/B,EAAuC+C,SAAvC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2BuY,KAA3B,CAA5B;EACH,WAHI,MAIA,IAAI8M,YAAY,KAAK,YAArB,EAAmC;EACpC,gBAAIrlB,QAAQ,GAAG,IAAIlI,kBAAJ,CAAuB3D,MAAvB,EAA+BA,MAA/B,EAAuC+C,SAAvC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2BuY,KAA3B,CAA5B;EACH,WAHI,MAIA,IAAI8M,YAAY,KAAK,OAArB,EAA8B;EAC/B,gBAAIrlB,QAAQ,GAAG,IAAIjI,aAAJ,CAAkB5D,MAAlB,EAA0BA,MAAM,IAAI,CAApC,EAAuC+C,SAAvC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAeq0B,aAAa,CAACR,WAAD,EAActlB,QAAd,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,CAAlC,EAAqC,CAArC,CAA5B;EACH,WAHI,MAIA,IAAIqlB,YAAY,KAAK,QAArB,EAA+B;EAChC,gBAAIrlB,QAAQ,GAAG,IAAI7H,cAAJ,CAAmBhE,MAAnB,EAA2BA,MAA3B,EAAmC+C,SAAnC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,CAA5B;EACH,WAHI,MAIA,IAAIqlB,YAAY,KAAK,QAArB,EAA+B;EAChC,gBAAIrlB,QAAQ,GAAG,IAAI5H,cAAJ,CAAmBjE,MAAnB,EAA2BA,MAA3B,EAAmC+C,SAAnC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,CAA5B;EACH,WAHI,MAIA,IAAIqlB,YAAY,KAAK,OAArB,EAA8B;EAC/B,gBAAIrlB,QAAQ,GAAG,IAAI3H,aAAJ,CAAkBlE,MAAlB,EAA0BA,MAAM,IAAI,CAApC,EAAuC+C,SAAvC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAeq0B,aAAa,CAACR,WAAD,EAActlB,QAAd,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,CAAlC,EAAqC,CAArC,CAA5B;EACH,WAHI,MAIA,IAAIqlB,YAAY,KAAK,QAArB,EAA+B;EAChC,gBAAIrlB,QAAQ,GAAG,IAAI1H,cAAJ,CAAmBnE,MAAnB,EAA2BA,MAA3B,EAAmC+C,SAAnC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,CAA5B;EACH,WAHI,MAIA,IAAIqlB,YAAY,KAAK,QAArB,EAA+B;EAChC,gBAAIrlB,QAAQ,GAAG,IAAIzH,cAAJ,CAAmBpE,MAAnB,EAA2BA,MAA3B,EAAmC+C,SAAnC,CAAf;EACAnF,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2B,CAA3B,CAA5B;EACH;EACJ;EACJ;EACJ,KApMkC;;;EAsMnC,QAAIskB,GAAG,CAACvB,EAAR,EAAY;EACR,WAAK,IAAI/C,cAAT,IAA2BsE,GAAG,CAACvB,EAA/B,EAAmC;EAC/B,YAAIC,aAAa,GAAGsB,GAAG,CAACvB,EAAJ,CAAO/C,cAAP,CAApB;EACA,YAAIuF,MAAM,GAAGvC,aAAa,CAAC,CAAD,CAA1B;EACA,YAAI,CAACuC,MAAL,EACI;EACJ,YAAI5pB,UAAU,GAAGmH,YAAY,CAACid,gBAAb,CAA8BC,cAA9B,CAAjB;EACA,YAAI+F,eAAe,GAAGjjB,YAAY,CAAClH,aAAb,CAA2BwI,OAA3B,CAAmCzI,UAAnC,CAAtB;EACA,YAAIqE,QAAQ,GAAG,IAAI5E,oBAAJ,CAAyB4nB,aAAa,CAACn4B,MAAvC,EAA+Cm4B,aAAa,CAACn4B,MAAd,IAAwB,CAAvE,EAA0Ek7B,eAA1E,CAAf;EACA,YAAItzB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,YAAIjqB,GAAG,GAAGsnB,QAAQ,CAAC2C,MAAD,EAAS,KAAT,EAAgB,CAAhB,CAAlB;EACA,YAAIhqB,QAAQ,GAAGqnB,QAAQ,CAAC2C,MAAD,EAAS,UAAT,EAAqB,CAArB,CAAR,GAAkChN,KAAjD;;EACA,aAAK,IAAIzjB,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,UAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B6I,GAA/B,EAAoCC,QAApC,EAA8CqnB,QAAQ,CAAC2C,MAAD,EAAS,cAAT,EAAyB,IAAzB,CAAR,GAAyC,CAAzC,GAA6C,CAAC,CAA5F,EAA+F3C,QAAQ,CAAC2C,MAAD,EAAS,UAAT,EAAqB,KAArB,CAAvG,EAAoI3C,QAAQ,CAAC2C,MAAD,EAAS,SAAT,EAAoB,KAApB,CAA5I;EACA,cAAIC,OAAO,GAAGxC,aAAa,CAACluB,KAAK,GAAG,CAAT,CAA3B;;EACA,cAAI,CAAC0wB,OAAL,EAAc;EACVxlB,YAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,cAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,cAAIQ,IAAI,GAAGpD,QAAQ,CAAC4C,OAAD,EAAU,KAAV,EAAiB,CAAjB,CAAnB;EACA,cAAIS,SAAS,GAAGrD,QAAQ,CAAC4C,OAAD,EAAU,UAAV,EAAsB,CAAtB,CAAR,GAAmCjN,KAAnD;EACA,cAAI8B,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,cAAIA,KAAJ,EAAW;EACPllB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD4F,GAAjD,EAAsD0qB,IAAtD,EAA4D,CAA5D,CAAlB;EACA7wB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD6F,QAAjD,EAA2D0qB,SAA3D,EAAsE1N,KAAtE,CAAlB;EACH;;EACD9lB,UAAAA,IAAI,GAAGiD,KAAP;EACA4F,UAAAA,GAAG,GAAG0qB,IAAN;EACAzqB,UAAAA,QAAQ,GAAG0qB,SAAX;EACAV,UAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,QAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;EACJ,KAxOkC;;;EA0OnC,QAAIskB,GAAG,CAACrB,SAAR,EAAmB;EACf,WAAK,IAAIjD,cAAT,IAA2BsE,GAAG,CAACrB,SAA/B,EAA0C;EACtC,YAAIqC,WAAW,GAAGhB,GAAG,CAACrB,SAAJ,CAAcjD,cAAd,CAAlB;EACA,YAAIuF,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,YAAI,CAACC,MAAL,EACI;EACJ,YAAI5pB,UAAU,GAAGmH,YAAY,CAACmd,uBAAb,CAAqCD,cAArC,CAAjB;EACA,YAAI+F,eAAe,GAAGjjB,YAAY,CAACxG,oBAAb,CAAkC8H,OAAlC,CAA0CzI,UAA1C,CAAtB;EACA,YAAIqE,QAAQ,GAAG,IAAIlE,2BAAJ,CAAgCwpB,WAAW,CAACz6B,MAA5C,EAAoDy6B,WAAW,CAACz6B,MAAZ,GAAqB,CAAzE,EAA4Ek7B,eAA5E,CAAf;EACA,YAAItzB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,YAAIvpB,SAAS,GAAG4mB,QAAQ,CAAC2C,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAAxB;EACA,YAAItpB,IAAI,GAAG2mB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,YAAIrpB,IAAI,GAAG0mB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiBtpB,IAAjB,CAAnB;EACA,YAAIE,SAAS,GAAGymB,QAAQ,CAAC2C,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAAxB;EACA,YAAInpB,SAAS,GAAGwmB,QAAQ,CAAC2C,MAAD,EAAS,WAAT,EAAsBppB,SAAtB,CAAxB;EACA,YAAIE,SAAS,GAAGumB,QAAQ,CAAC2C,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAAxB;;EACA,aAAK,IAAIzwB,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,UAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+BuJ,SAA/B,EAA0CC,IAA1C,EAAgDC,IAAhD,EAAsDC,SAAtD,EAAiEC,SAAjE,EAA4EC,SAA5E;EACA,cAAImpB,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,cAAI,CAAC0wB,OAAL,EAAc;EACVxlB,YAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,cAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,cAAIU,UAAU,GAAGtD,QAAQ,CAAC4C,OAAD,EAAU,WAAV,EAAuB,CAAvB,CAAzB;EACA,cAAIW,KAAK,GAAGvD,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,cAAIY,KAAK,GAAGxD,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkBW,KAAlB,CAApB;EACA,cAAIE,UAAU,GAAGzD,QAAQ,CAAC4C,OAAD,EAAU,WAAV,EAAuB,CAAvB,CAAzB;EACA,cAAIc,UAAU,GAAG1D,QAAQ,CAAC4C,OAAD,EAAU,WAAV,EAAuBa,UAAvB,CAAzB;EACA,cAAIE,UAAU,GAAG3D,QAAQ,CAAC4C,OAAD,EAAU,WAAV,EAAuB,CAAvB,CAAzB;EACA,cAAInL,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,cAAIA,KAAJ,EAAW;EACPllB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDsG,SAAjD,EAA4DkqB,UAA5D,EAAwE,CAAxE,CAAlB;EACA/wB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDuG,IAAjD,EAAuDkqB,KAAvD,EAA8D,CAA9D,CAAlB;EACAhxB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDwG,IAAjD,EAAuDkqB,KAAvD,EAA8D,CAA9D,CAAlB;EACAjxB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDyG,SAAjD,EAA4DkqB,UAA5D,EAAwE,CAAxE,CAAlB;EACAlxB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD0G,SAAjD,EAA4DkqB,UAA5D,EAAwE,CAAxE,CAAlB;EACAnxB,YAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD2G,SAAjD,EAA4DkqB,UAA5D,EAAwE,CAAxE,CAAlB;EACH;;EACD9zB,UAAAA,IAAI,GAAGiD,KAAP;EACAsG,UAAAA,SAAS,GAAGkqB,UAAZ;EACAjqB,UAAAA,IAAI,GAAGkqB,KAAP;EACAjqB,UAAAA,IAAI,GAAGkqB,KAAP;EACAjqB,UAAAA,SAAS,GAAGkqB,UAAZ;EACAjqB,UAAAA,SAAS,GAAGkqB,UAAZ;EACAnqB,UAAAA,SAAS,GAAGkqB,UAAZ;EACAd,UAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,QAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;EACJ,KA5RkC;;;EA8RnC,QAAIskB,GAAG,CAAClc,IAAR,EAAc;EACV,WAAK,IAAI4X,cAAT,IAA2BsE,GAAG,CAAClc,IAA/B,EAAqC;EACjC,YAAI4a,aAAa,GAAGsB,GAAG,CAAClc,IAAJ,CAAS4X,cAAT,CAApB;EACA,YAAIrkB,UAAU,GAAGmH,YAAY,CAACod,kBAAb,CAAgCF,cAAhC,CAAjB;EACA,YAAI+F,eAAe,GAAGjjB,YAAY,CAACrG,eAAb,CAA6B2H,OAA7B,CAAqCzI,UAArC,CAAtB;;EACA,aAAK,IAAI0pB,YAAT,IAAyBrC,aAAzB,EAAwC;EACpC,cAAIsC,WAAW,GAAGtC,aAAa,CAACqC,YAAD,CAA/B;EACA,cAAIE,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,cAAI,CAACC,MAAL,EACI;EACJ,cAAIpxB,MAAM,GAAGmxB,WAAW,CAACz6B,MAAzB;;EACA,cAAIw6B,YAAY,KAAK,UAArB,EAAiC;EAC7B,gBAAIrlB,QAAQ,GAAG,IAAIzD,8BAAJ,CAAmCpI,MAAnC,EAA2CA,MAA3C,EAAmD4xB,eAAnD,CAAf;EACAh0B,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2BrE,UAAU,CAACue,YAAX,IAA2BvC,YAAY,CAACyL,KAAxC,GAAgD7K,KAAhD,GAAwD,CAAnF,CAA5B;EACH,WAHD,MAIK,IAAI8M,YAAY,KAAK,SAArB,EAAgC;EACjC,gBAAIrlB,QAAQ,GAAG,IAAIrD,6BAAJ,CAAkCxI,MAAlC,EAA0CA,MAA1C,EAAkD4xB,eAAlD,CAAf;EACAh0B,YAAAA,SAAS,CAACN,IAAV,CAAek0B,aAAa,CAACL,WAAD,EAActlB,QAAd,EAAwB,CAAxB,EAA2BrE,UAAU,CAACgd,WAAX,IAA0Bf,WAAW,CAACsB,MAAtC,IAAgDvd,UAAU,CAACgd,WAAX,IAA0Bf,WAAW,CAACwL,KAAtF,GAA8F7K,KAA9F,GAAsG,CAAjI,CAA5B;EACH,WAHI,MAIA,IAAI8M,YAAY,KAAK,KAArB,EAA4B;EAC7B,gBAAIrlB,QAAQ,GAAG,IAAInD,yBAAJ,CAA8B1I,MAA9B,EAAsCA,MAAM,GAAG,CAA/C,EAAkD4xB,eAAlD,CAAf;EACA,gBAAItzB,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIvpB,SAAS,GAAG4mB,QAAQ,CAAC2C,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAAxB;EACA,gBAAItpB,IAAI,GAAG2mB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,gBAAIrpB,IAAI,GAAG0mB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiBtpB,IAAjB,CAAnB;;EACA,iBAAK,IAAInH,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtCkL,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+BuJ,SAA/B,EAA0CC,IAA1C,EAAgDC,IAAhD;EACA,kBAAIspB,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIU,UAAU,GAAGtD,QAAQ,CAAC4C,OAAD,EAAU,WAAV,EAAuB,CAAvB,CAAzB;EACA,kBAAIW,KAAK,GAAGvD,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAIY,KAAK,GAAGxD,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkBW,KAAlB,CAApB;EACA,kBAAI9L,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,kBAAIA,KAAJ,EAAW;EACPllB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDsG,SAAjD,EAA4DkqB,UAA5D,EAAwE,CAAxE,CAAlB;EACA/wB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDuG,IAAjD,EAAuDkqB,KAAvD,EAA8D,CAA9D,CAAlB;EACAhxB,gBAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDwG,IAAjD,EAAuDkqB,KAAvD,EAA8D,CAA9D,CAAlB;EACH;;EACD3zB,cAAAA,IAAI,GAAGiD,KAAP;EACAsG,cAAAA,SAAS,GAAGkqB,UAAZ;EACAjqB,cAAAA,IAAI,GAAGkqB,KAAP;EACAjqB,cAAAA,IAAI,GAAGkqB,KAAP;EACAb,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;EACJ;EACJ;EACJ,KAlVkC;;;EAoVnC,QAAIskB,GAAG,CAAC9wB,MAAR,EAAgB;EACZ,WAAK,IAAIgzB,UAAT,IAAuBlC,GAAG,CAAC9wB,MAA3B,EAAmC;EAC/B,YAAIizB,SAAS,GAAGnC,GAAG,CAAC9wB,MAAJ,CAAWgzB,UAAX,CAAhB;EACA,YAAInd,IAAI,GAAGvG,YAAY,CAAC4c,QAAb,CAAsB8G,UAAtB,CAAX;;EACA,aAAK,IAAIjH,QAAT,IAAqBkH,SAArB,EAAgC;EAC5B,cAAI5D,OAAO,GAAG4D,SAAS,CAAClH,QAAD,CAAvB;EACA,cAAI9mB,SAAS,GAAGqK,YAAY,CAACqV,QAAb,CAAsBoH,QAAtB,EAAgC3e,KAAhD;;EACA,eAAK,IAAIykB,YAAT,IAAyBxC,OAAzB,EAAkC;EAC9B,gBAAIyC,WAAW,GAAGzC,OAAO,CAACwC,YAAD,CAAzB;EACA,gBAAIE,MAAM,GAAGD,WAAW,CAAC,CAAD,CAAxB;EACA,gBAAI,CAACC,MAAL,EACI;EACJ,gBAAIhyB,UAAU,GAAG8V,IAAI,CAACzP,aAAL,CAAmBnB,SAAnB,EAA8B4sB,YAA9B,CAAjB;EACA,gBAAIqB,QAAQ,GAAGnzB,UAAU,CAAC6D,KAA1B;EACA,gBAAI2C,QAAQ,GAAGxG,UAAU,CAACwG,QAA1B;EACA,gBAAI4sB,YAAY,GAAGD,QAAQ,GAAG3sB,QAAQ,CAAClP,MAAT,GAAkB,CAAlB,GAAsB,CAAzB,GAA6BkP,QAAQ,CAAClP,MAAjE;EACA,gBAAImV,QAAQ,GAAG,IAAInG,cAAJ,CAAmByrB,WAAW,CAACz6B,MAA/B,EAAuCy6B,WAAW,CAACz6B,MAAnD,EAA2D4N,SAA3D,EAAsElF,UAAtE,CAAf;EACA,gBAAId,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;;EACA,iBAAK,IAAIzwB,KAAK,GAAG,CAAZ,EAAeK,MAAM,GAAG,CAA7B,GAAiCL,KAAK,EAAtC,EAA0C;EACtC,kBAAItB,MAAJ;EACA,kBAAIozB,aAAa,GAAGhE,QAAQ,CAAC2C,MAAD,EAAS,UAAT,EAAqB,IAArB,CAA5B;EACA,kBAAI,CAACqB,aAAL,EACIpzB,MAAM,GAAGkzB,QAAQ,GAAG53B,KAAK,CAACiB,aAAN,CAAoB42B,YAApB,CAAH,GAAuC5sB,QAAxD,CADJ,KAEK;EACDvG,gBAAAA,MAAM,GAAG1E,KAAK,CAACiB,aAAN,CAAoB42B,YAApB,CAAT;EACA,oBAAIn4B,KAAK,GAAGo0B,QAAQ,CAAC2C,MAAD,EAAS,QAAT,EAAmB,CAAnB,CAApB;EACAz2B,gBAAAA,KAAK,CAACC,SAAN,CAAgB63B,aAAhB,EAA+B,CAA/B,EAAkCpzB,MAAlC,EAA0ChF,KAA1C,EAAiDo4B,aAAa,CAAC/7B,MAA/D;;EACA,oBAAI0tB,KAAK,IAAI,CAAb,EAAgB;EACZ,uBAAK,IAAI5tB,CAAC,GAAG6D,KAAR,EAAe5D,CAAC,GAAGD,CAAC,GAAGi8B,aAAa,CAAC/7B,MAA1C,EAAkDF,CAAC,GAAGC,CAAtD,EAAyDD,CAAC,EAA1D,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAa4tB,KAAb;EACP;;EACD,oBAAI,CAACmO,QAAL,EAAe;EACX,uBAAK,IAAI/7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGg8B,YAApB,EAAkCh8B,CAAC,EAAnC,EACI6I,MAAM,CAAC7I,CAAD,CAAN,IAAaoP,QAAQ,CAACpP,CAAD,CAArB;EACP;EACJ;EACDqV,cAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+Be,MAA/B;EACA,kBAAIgyB,OAAO,GAAGF,WAAW,CAACxwB,KAAK,GAAG,CAAT,CAAzB;;EACA,kBAAI,CAAC0wB,OAAL,EAAc;EACVxlB,gBAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA;EACH;;EACD,kBAAIO,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,kBAAInL,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;EACA,kBAAIA,KAAJ,EACIllB,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,CAAlB;EACJjD,cAAAA,IAAI,GAAGiD,KAAP;EACA6vB,cAAAA,MAAM,GAAGC,OAAT;EACH;;EACDzzB,YAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;EACJ;EACJ;EACJ,KAzYkC;;;EA2YnC,QAAIskB,GAAG,CAAC5wB,SAAR,EAAmB;EACf,UAAIsM,QAAQ,GAAG,IAAI/E,iBAAJ,CAAsBqpB,GAAG,CAAC5wB,SAAJ,CAAc7I,MAApC,CAAf;EACA,UAAIg8B,SAAS,GAAG/jB,YAAY,CAACnK,KAAb,CAAmB9N,MAAnC;EACA,UAAIiK,KAAK,GAAG,CAAZ;;EACA,WAAK,IAAInK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG25B,GAAG,CAAC5wB,SAAJ,CAAc7I,MAAlC,EAA0CF,CAAC,IAAImK,KAAK,EAApD,EAAwD;EACpD,YAAIgyB,YAAY,GAAGxC,GAAG,CAAC5wB,SAAJ,CAAc/I,CAAd,CAAnB;EACA,YAAI+I,SAAS,GAAG,IAAhB;EACA,YAAIqzB,OAAO,GAAGnE,QAAQ,CAACkE,YAAD,EAAe,SAAf,EAA0B,IAA1B,CAAtB;;EACA,YAAIC,OAAJ,EAAa;EACTrzB,UAAAA,SAAS,GAAG5E,KAAK,CAACc,QAAN,CAAei3B,SAAf,EAA0B,CAAC,CAA3B,CAAZ;EACA,cAAIG,SAAS,GAAGl4B,KAAK,CAACc,QAAN,CAAei3B,SAAS,GAAGE,OAAO,CAACl8B,MAAnC,EAA2C,CAA3C,CAAhB;EACA,cAAIo8B,aAAa,GAAG,CAApB;EAAA,cAAuBC,cAAc,GAAG,CAAxC;;EACA,eAAK,IAAIvwB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGowB,OAAO,CAACl8B,MAA9B,EAAsC8L,EAAE,EAAxC,EAA4C;EACxC,gBAAIwwB,SAAS,GAAGJ,OAAO,CAACpwB,EAAD,CAAvB;EACA,gBAAI8B,SAAS,GAAGqK,YAAY,CAACqV,QAAb,CAAsBgP,SAAS,CAACzuB,IAAhC,EAAsCkI,KAAtD,CAFwC;;EAIxC,mBAAOqmB,aAAa,IAAIxuB,SAAxB,EACIuuB,SAAS,CAACE,cAAc,EAAf,CAAT,GAA8BD,aAAa,EAA3C,CALoC;;;EAOxCvzB,YAAAA,SAAS,CAACuzB,aAAa,GAAGE,SAAS,CAAC/G,MAA3B,CAAT,GAA8C6G,aAAa,EAA3D;EACH,WAZQ;;;EAcT,iBAAOA,aAAa,GAAGJ,SAAvB,EACIG,SAAS,CAACE,cAAc,EAAf,CAAT,GAA8BD,aAAa,EAA3C,CAfK;;;EAiBT,eAAK,IAAItwB,EAAE,GAAGkwB,SAAS,GAAG,CAA1B,EAA6BlwB,EAAE,IAAI,CAAnC,EAAsCA,EAAE,EAAxC,EACI,IAAIjD,SAAS,CAACiD,EAAD,CAAT,IAAiB,CAAC,CAAtB,EACIjD,SAAS,CAACiD,EAAD,CAAT,GAAgBqwB,SAAS,CAAC,EAAEE,cAAH,CAAzB;EACX;;EACDlnB,QAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyB8tB,QAAQ,CAACkE,YAAD,EAAe,MAAf,EAAuB,CAAvB,CAAjC,EAA4DpzB,SAA5D;EACH;;EACD3B,MAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH,KA3akC;;;EA6anC,QAAIskB,GAAG,CAAC3xB,MAAR,EAAgB;EACZ,UAAIqN,QAAQ,GAAG,IAAInF,aAAJ,CAAkBypB,GAAG,CAAC3xB,MAAJ,CAAW9H,MAA7B,CAAf;EACA,UAAIiK,KAAK,GAAG,CAAZ;;EACA,WAAK,IAAInK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG25B,GAAG,CAAC3xB,MAAJ,CAAW9H,MAA/B,EAAuCF,CAAC,IAAImK,KAAK,EAAjD,EAAqD;EACjD,YAAI+uB,QAAQ,GAAGS,GAAG,CAAC3xB,MAAJ,CAAWhI,CAAX,CAAf;EACA,YAAIy8B,SAAS,GAAGtkB,YAAY,CAAC6d,SAAb,CAAuBkD,QAAQ,CAAC/yB,IAAhC,CAAhB;EACA,YAAI2C,KAAK,GAAG,IAAIygB,KAAJ,CAAUplB,KAAK,CAACuB,iBAAN,CAAwBuyB,QAAQ,CAACiB,QAAD,EAAW,MAAX,EAAmB,CAAnB,CAAhC,CAAV,EAAkEuD,SAAlE,CAAZ;EACA3zB,QAAAA,KAAK,CAACqwB,QAAN,GAAiBlB,QAAQ,CAACiB,QAAD,EAAW,KAAX,EAAkBuD,SAAS,CAACtD,QAA5B,CAAzB;EACArwB,QAAAA,KAAK,CAACswB,UAAN,GAAmBnB,QAAQ,CAACiB,QAAD,EAAW,OAAX,EAAoBuD,SAAS,CAACrD,UAA9B,CAA3B;EACAtwB,QAAAA,KAAK,CAACuwB,WAAN,GAAoBpB,QAAQ,CAACiB,QAAD,EAAW,QAAX,EAAqBuD,SAAS,CAACpD,WAA/B,CAA5B;;EACA,YAAIvwB,KAAK,CAAC+D,IAAN,CAAWysB,SAAf,EAA0B;EACtBxwB,UAAAA,KAAK,CAACywB,MAAN,GAAetB,QAAQ,CAACiB,QAAD,EAAW,QAAX,EAAqB,CAArB,CAAvB;EACApwB,UAAAA,KAAK,CAAC0wB,OAAN,GAAgBvB,QAAQ,CAACiB,QAAD,EAAW,SAAX,EAAsB,CAAtB,CAAxB;EACH;;EACD7jB,QAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrB,KAAzB;EACH;;EACD1B,MAAAA,SAAS,CAACN,IAAV,CAAeuO,QAAf;EACH;;EACD,QAAIhO,QAAQ,GAAG,CAAf;;EACA,SAAK,IAAIrH,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGmH,SAAS,CAAClH,MAA9B,EAAsCF,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EACIqH,QAAQ,GAAGrF,IAAI,CAACH,GAAL,CAASwF,QAAT,EAAmBD,SAAS,CAACpH,CAAD,CAAT,CAAa2J,WAAb,EAAnB,CAAX;;EACJwO,IAAAA,YAAY,CAAC2d,UAAb,CAAwBhvB,IAAxB,CAA6B,IAAIK,SAAJ,CAAchB,IAAd,EAAoBiB,SAApB,EAA+BC,QAA/B,CAA7B;EACH;;EAj0BqB;;EAm0B1B,MAAM0yB,UAAN,CAAiB;EACbx6B,EAAAA,WAAW,CAACq2B,IAAD,EAAOlX,IAAP,EAAa5Q,SAAb,EAAwB2R,MAAxB,EAAgCqZ,aAAhC,EAA+C;EACtD,SAAKlD,IAAL,GAAYA,IAAZ;EACA,SAAKlX,IAAL,GAAYA,IAAZ;EACA,SAAK5Q,SAAL,GAAiBA,SAAjB;EACA,SAAK2R,MAAL,GAAcA,MAAd;EACA,SAAKqZ,aAAL,GAAqBA,aAArB;EACH;;EAPY;;EASjB,SAASkC,aAAT,CAAuBrT,IAAvB,EAA6BtS,QAA7B,EAAuCnQ,YAAvC,EAAqD0oB,KAArD,EAA4D;EACxD,MAAIgN,MAAM,GAAGjT,IAAI,CAAC,CAAD,CAAjB;EACA,MAAI7f,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,MAAIj7B,KAAK,GAAGs4B,QAAQ,CAAC2C,MAAD,EAAS,OAAT,EAAkB11B,YAAlB,CAAR,GAA0C0oB,KAAtD;EACA,MAAIpjB,MAAM,GAAG,CAAb;;EACA,OAAK,IAAIL,KAAK,GAAG,CAAjB,GAAqBA,KAAK,EAA1B,EAA8B;EAC1BkL,IAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+BnI,KAA/B;EACA,QAAIk7B,OAAO,GAAGlT,IAAI,CAACxd,KAAK,GAAG,CAAT,CAAlB;;EACA,QAAI,CAAC0wB,OAAL,EAAc;EACVxlB,MAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA,aAAO6K,QAAP;EACH;;EACD,QAAItK,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,QAAI7vB,MAAM,GAAGitB,QAAQ,CAAC4C,OAAD,EAAU,OAAV,EAAmB31B,YAAnB,CAAR,GAA2C0oB,KAAxD;EACA,QAAIgN,MAAM,CAAClL,KAAX,EACIllB,MAAM,GAAGuwB,SAAS,CAACH,MAAM,CAAClL,KAAR,EAAera,QAAf,EAAyB7K,MAAzB,EAAiCL,KAAjC,EAAwC,CAAxC,EAA2CrC,IAA3C,EAAiDiD,KAAjD,EAAwDpL,KAAxD,EAA+DqL,MAA/D,EAAuE4iB,KAAvE,CAAlB;EACJ9lB,IAAAA,IAAI,GAAGiD,KAAP;EACApL,IAAAA,KAAK,GAAGqL,MAAR;EACA4vB,IAAAA,MAAM,GAAGC,OAAT;EACH;EACJ;;EACD,SAASM,aAAT,CAAuBxT,IAAvB,EAA6BtS,QAA7B,EAAuCqnB,KAAvC,EAA8CC,KAA9C,EAAqDz3B,YAArD,EAAmE0oB,KAAnE,EAA0E;EACtE,MAAIgN,MAAM,GAAGjT,IAAI,CAAC,CAAD,CAAjB;EACA,MAAI7f,IAAI,GAAGmwB,QAAQ,CAAC2C,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAAnB;EACA,MAAIlwB,MAAM,GAAGutB,QAAQ,CAAC2C,MAAD,EAAS8B,KAAT,EAAgBx3B,YAAhB,CAAR,GAAwC0oB,KAArD;EACA,MAAI5iB,MAAM,GAAGitB,QAAQ,CAAC2C,MAAD,EAAS+B,KAAT,EAAgBz3B,YAAhB,CAAR,GAAwC0oB,KAArD;EACA,MAAIpjB,MAAM,GAAG,CAAb;;EACA,OAAK,IAAIL,KAAK,GAAG,CAAjB,GAAqBA,KAAK,EAA1B,EAA8B;EAC1BkL,IAAAA,QAAQ,CAACvJ,QAAT,CAAkB3B,KAAlB,EAAyBrC,IAAzB,EAA+B4C,MAA/B,EAAuCM,MAAvC;EACA,QAAI6vB,OAAO,GAAGlT,IAAI,CAACxd,KAAK,GAAG,CAAT,CAAlB;;EACA,QAAI,CAAC0wB,OAAL,EAAc;EACVxlB,MAAAA,QAAQ,CAAChL,MAAT,CAAgBG,MAAhB;EACA,aAAO6K,QAAP;EACH;;EACD,QAAItK,KAAK,GAAGktB,QAAQ,CAAC4C,OAAD,EAAU,MAAV,EAAkB,CAAlB,CAApB;EACA,QAAI+B,OAAO,GAAG3E,QAAQ,CAAC4C,OAAD,EAAU6B,KAAV,EAAiBx3B,YAAjB,CAAR,GAAyC0oB,KAAvD;EACA,QAAIiP,OAAO,GAAG5E,QAAQ,CAAC4C,OAAD,EAAU8B,KAAV,EAAiBz3B,YAAjB,CAAR,GAAyC0oB,KAAvD;EACA,QAAI8B,KAAK,GAAGkL,MAAM,CAAClL,KAAnB;;EACA,QAAIA,KAAJ,EAAW;EACPllB,MAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDL,MAAjD,EAAyDkyB,OAAzD,EAAkEhP,KAAlE,CAAlB;EACApjB,MAAAA,MAAM,GAAGuwB,SAAS,CAACrL,KAAD,EAAQra,QAAR,EAAkB7K,MAAlB,EAA0BL,KAA1B,EAAiC,CAAjC,EAAoCrC,IAApC,EAA0CiD,KAA1C,EAAiDC,MAAjD,EAAyD6xB,OAAzD,EAAkEjP,KAAlE,CAAlB;EACH;;EACD9lB,IAAAA,IAAI,GAAGiD,KAAP;EACAL,IAAAA,MAAM,GAAGkyB,OAAT;EACA5xB,IAAAA,MAAM,GAAG6xB,OAAT;EACAjC,IAAAA,MAAM,GAAGC,OAAT;EACH;EACJ;;EACD,SAASE,SAAT,CAAmBrL,KAAnB,EAA0Bra,QAA1B,EAAoC7K,MAApC,EAA4CL,KAA5C,EAAmDxK,KAAnD,EAA0D8K,KAA1D,EAAiEM,KAAjE,EAAwEL,MAAxE,EAAgFM,MAAhF,EAAwF4iB,KAAxF,EAA+F;EAC3F,MAAI8B,KAAK,IAAI,SAAb,EAAwB;EACpBra,IAAAA,QAAQ,CAACjL,UAAT,CAAoBD,KAApB;EACA,WAAOK,MAAP;EACH;;EACD,MAAIxK,CAAC,GAAGL,KAAK,IAAI,CAAjB;EACA,MAAIgL,GAAG,GAAG+kB,KAAK,CAAC1vB,CAAD,CAAf;EACA,MAAI4K,GAAG,GAAG8kB,KAAK,CAAC1vB,CAAC,GAAG,CAAL,CAAL,GAAe4tB,KAAzB;EACA,MAAI/iB,GAAG,GAAG6kB,KAAK,CAAC1vB,CAAC,GAAG,CAAL,CAAf;EACA,MAAI8K,GAAG,GAAG4kB,KAAK,CAAC1vB,CAAC,GAAG,CAAL,CAAL,GAAe4tB,KAAzB;EACAvY,EAAAA,QAAQ,CAAC9K,SAAT,CAAmBC,MAAnB,EAA2BL,KAA3B,EAAkCxK,KAAlC,EAAyC8K,KAAzC,EAAgDC,MAAhD,EAAwDC,GAAxD,EAA6DC,GAA7D,EAAkEC,GAAlE,EAAuEC,GAAvE,EAA4EC,KAA5E,EAAmFC,MAAnF;EACA,SAAOR,MAAM,GAAG,CAAhB;EACH;;EACD,SAASytB,QAAT,CAAkB0B,GAAlB,EAAuBmD,QAAvB,EAAiC53B,YAAjC,EAA+C;EAC3C,SAAOy0B,GAAG,CAACmD,QAAD,CAAH,KAAkBniB,SAAlB,GAA8Bgf,GAAG,CAACmD,QAAD,CAAjC,GAA8C53B,YAArD;EACH;;ECv7BD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,CAAC,MAAM;EACH,MAAI,OAAOlD,IAAI,CAAC2D,MAAZ,KAAuB,WAA3B,EAAwC;EACpC3D,IAAAA,IAAI,CAAC2D,MAAL,GAAe,UAAUf,KAAV,EAAiB;EAC5B,aAAO,UAAUrC,CAAV,EAAa;EAChB,eAAOqC,KAAK,CAAC,CAAD,CAAL,GAAWrC,CAAX,EAAcqC,KAAK,CAAC,CAAD,CAA1B;EACH,OAFD;EAGH,KAJa,CAIX,IAAIU,YAAJ,CAAiB,CAAjB,CAJW,CAAd;EAKH;EACJ,CARD;;EC5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAOvD,IAAI,MAAJ,CAAW,CAAX,CAAhB;;EClCR;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAKzE,MAAO,gBAAP,CAAuB;EAW5B,EAAA,WAAA,CAAa,OAAb,EAA8C;EALvC,SAAA,iBAAA,GAAoB,KAApB;EACA,SAAA,cAAA,GAAiB,KAAjB;EACC,SAAA,QAAA,GAAW,KAAK,CAAC,aAAN,CAAoB,IAAI,IAAxB,CAAX;EACA,SAAA,SAAA,GAAY,IAAI,KAAJ,EAAZ;EAGP,SAAK,GAAL,GAAW,OAAX;EACA;;EAED,EAAA,IAAI,CAAE,QAAF,EAAoB;EACvB,QAAI,KAAK,iBAAT,EAA4B,KAAK,aAAL,CAAmB,QAAnB,EAA5B,KACK,KAAK,UAAL,CAAgB,QAAhB;EACL;;EAEO,EAAA,UAAU,CAAE,QAAF,EAAoB;EACrC,QAAI,GAAG,GAAG,KAAK,GAAf;EACA,QAAI,KAAK,GAAG,KAAK,SAAjB;EACA,QAAI,aAAa,GAAG,QAAQ,CAAC,KAA7B;EACA,QAAI,SAAS,GAAG,QAAQ,CAAC,SAAzB;EAEA,QAAI,KAAK,cAAT,EAAyB,GAAG,CAAC,WAAJ,GAAkB,OAAlB;;EAEzB,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,GAAG,CAA1C,EAA6C,CAAC,EAA9C,EAAkD;EACjD,UAAI,IAAI,GAAG,SAAS,CAAC,CAAD,CAApB;EACA,UAAI,IAAI,GAAG,IAAI,CAAC,IAAhB;EACA,UAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;EAElB,UAAI,UAAU,GAAG,IAAI,CAAC,aAAL,EAAjB;EACA,UAAI,EAAE,UAAU,YAAY,gBAAxB,CAAJ,EAA+C;EAC/C,UAAI,MAAM,GAA2C,UAAU,CAAC,MAAhE;EACA,UAAI,KAAK,GAAqC,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAqB,QAArB,EAA9C;EAEA,UAAI,SAAS,GAAG,IAAI,CAAC,KAArB;EACA,UAAI,WAAW,GAAG,UAAU,CAAC,KAA7B;EACA,MAAA,KAAK,CAAC,GAAN,CAAU,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAAtD,EACC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAD7C,EAEC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAF7C,EAGC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAH7C;EAKA,MAAA,GAAG,CAAC,IAAJ;EACA,MAAA,GAAG,CAAC,SAAJ,CAAc,IAAI,CAAC,CAAnB,EAAsB,IAAI,CAAC,CAA3B,EAA8B,IAAI,CAAC,CAAnC,EAAsC,IAAI,CAAC,CAA3C,EAA8C,IAAI,CAAC,MAAnD,EAA2D,IAAI,CAAC,MAAhE;EACA,MAAA,GAAG,CAAC,SAAJ,CAAc,UAAU,CAAC,MAAX,CAAkB,CAAlB,CAAd,EAAoC,UAAU,CAAC,MAAX,CAAkB,CAAlB,CAApC;EACA,MAAA,GAAG,CAAC,MAAJ,CAAW,UAAU,CAAC,QAAX,GAAsB,IAAI,CAAC,EAA3B,GAAgC,GAA3C;EAEA,UAAI,UAAU,GAAG,UAAU,CAAC,KAAX,GAAmB,MAAM,CAAC,aAA3C;EACA,MAAA,GAAG,CAAC,KAAJ,CAAU,UAAU,GAAG,UAAU,CAAC,MAAlC,EAA0C,UAAU,GAAG,UAAU,CAAC,MAAlE;EAEA,UAAI,CAAC,GAAG,MAAM,CAAC,KAAf;EAAA,UAAsB,CAAC,GAAG,MAAM,CAAC,MAAjC;EACA,MAAA,GAAG,CAAC,SAAJ,CAAc,CAAC,GAAG,CAAlB,EAAqB,CAAC,GAAG,CAAzB;;EACA,UAAI,UAAU,CAAC,MAAX,CAAkB,OAAlB,IAA6B,EAAjC,EAAqC;EACpC,YAAI,CAAC,GAAG,CAAR;EACA,QAAA,CAAC,GAAG,CAAJ;EACA,QAAA,CAAC,GAAG,CAAJ;EACA,QAAA,GAAG,CAAC,MAAJ,CAAW,CAAC,IAAI,CAAC,EAAN,GAAW,CAAtB;EACA;;EACD,MAAA,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd;EACA,MAAA,GAAG,CAAC,SAAJ,CAAc,CAAC,CAAD,GAAK,CAAnB,EAAsB,CAAC,CAAD,GAAK,CAA3B;;EAEA,UAAI,KAAK,CAAC,CAAN,IAAW,CAAX,IAAgB,KAAK,CAAC,CAAN,IAAW,CAA3B,IAAgC,KAAK,CAAC,CAAN,IAAW,CAA3C,IAAgD,KAAK,CAAC,CAAN,IAAW,CAA/D,EAAkE;EACjE,QAAA,GAAG,CAAC,WAAJ,GAAkB,KAAK,CAAC,CAAxB,CADiE;EAGjE;EACA;EACA;EACA;;EACD,MAAA,GAAG,CAAC,SAAJ,CAAc,KAAd,EAAqB,MAAM,CAAC,CAA5B,EAA+B,MAAM,CAAC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD;EACA,UAAI,KAAK,cAAT,EAAyB,GAAG,CAAC,UAAJ,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;EACzB,MAAA,GAAG,CAAC,OAAJ;EACA;EACD;;EAEO,EAAA,aAAa,CAAE,QAAF,EAAoB;EACxC,QAAI,GAAG,GAAG,KAAK,GAAf;EACA,QAAI,KAAK,GAAG,KAAK,SAAjB;EACA,QAAI,aAAa,GAAG,QAAQ,CAAC,KAA7B;EACA,QAAI,SAAS,GAAG,QAAQ,CAAC,SAAzB;EAEA,QAAI,SAAS,GAAc,IAA3B;EACA,QAAI,QAAQ,GAAsB,KAAK,QAAvC;EACA,QAAI,SAAS,GAAkB,IAA/B;;EAEA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,GAAG,CAA1C,EAA6C,CAAC,EAA9C,EAAkD;EACjD,UAAI,IAAI,GAAG,SAAS,CAAC,CAAD,CAApB;EACA,UAAI,UAAU,GAAG,IAAI,CAAC,aAAL,EAAjB;EAEA,UAAI,OAAJ;EACA,UAAI,MAAJ;;EACA,UAAI,UAAU,YAAY,gBAA1B,EAA4C;EAC3C,YAAI,gBAAgB,GAAqB,UAAzC;EACA,QAAA,QAAQ,GAAG,KAAK,qBAAL,CAA2B,IAA3B,EAAiC,gBAAjC,EAAmD,KAAnD,CAAX;EACA,QAAA,SAAS,GAAG,gBAAgB,CAAC,cAA7B;EACA,QAAA,MAAM,GAAuB,gBAAgB,CAAC,MAA9C;EACA,QAAA,OAAO,GAAmB,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAqB,QAArB,EAA1B;EACA,OAND,MAMO,IAAI,UAAU,YAAY,cAA1B,EAA0C;EAChD,YAAI,IAAI,GAAmB,UAA3B;EACA,QAAA,QAAQ,GAAG,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC,KAArC,CAAX;EACA,QAAA,SAAS,GAAG,IAAI,CAAC,SAAjB;EACA,QAAA,OAAO,GAAwB,IAAI,CAAC,MAAL,CAAY,YAAZ,CAA0B,IAA1B,CAA+B,OAA/B,CAAuC,QAAvC,EAA/B;EACA,OALM,MAMN;;EAED,UAAI,OAAJ,EAAa;EACZ,YAAI,IAAI,CAAC,IAAL,CAAU,SAAV,IAAuB,SAA3B,EAAsC,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,SAAtB;EAEtC,YAAI,SAAS,GAAG,IAAI,CAAC,KAArB;EACA,YAAI,eAAe,GAAG,UAAU,CAAC,KAAjC;EACA,QAAA,KAAK,CAAC,GAAN,CAAU,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,eAAe,CAAC,CAA1D,EACC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,eAAe,CAAC,CADjD,EAEC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,eAAe,CAAC,CAFjD,EAGC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,eAAe,CAAC,CAHjD;;EAKA,YAAI,KAAK,CAAC,CAAN,IAAW,CAAX,IAAgB,KAAK,CAAC,CAAN,IAAW,CAA3B,IAAgC,KAAK,CAAC,CAAN,IAAW,CAA3C,IAAgD,KAAK,CAAC,CAAN,IAAW,CAA/D,EAAkE;EACjE,UAAA,GAAG,CAAC,WAAJ,GAAkB,KAAK,CAAC,CAAxB,CADiE;EAGjE;EACA;EACA;EACA;;EAED,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,CAAC,IAAI,CAA3C,EAA8C;EAC7C,cAAI,EAAE,GAAG,SAAS,CAAC,CAAD,CAAT,GAAe,CAAxB;EAAA,cAA2B,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAmB,CAAnD;EAAA,cAAsD,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAL,CAAT,GAAmB,CAA9E;EAEA,cAAI,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAjB;EAAA,cAAuB,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAApC;EAAA,cAA8C,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAA3D;EAAA,cAAqE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAAlF;EACA,cAAI,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAjB;EAAA,cAAuB,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAApC;EAAA,cAA8C,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAA3D;EAAA,cAAqE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAAlF;EACA,cAAI,EAAE,GAAG,QAAQ,CAAC,EAAD,CAAjB;EAAA,cAAuB,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAApC;EAAA,cAA8C,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAA3D;EAAA,cAAqE,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAN,CAAlF;EAEA,eAAK,YAAL,CAAkB,OAAlB,EAA2B,EAA3B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,EAA3D,EAA+D,EAA/D,EAAmE,EAAnE,EAAuE,EAAvE;;EAEA,cAAI,KAAK,cAAT,EAAyB;EACxB,YAAA,GAAG,CAAC,WAAJ,GAAkB,OAAlB;EACA,YAAA,GAAG,CAAC,SAAJ;EACA,YAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,YAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,YAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,YAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,YAAA,GAAG,CAAC,MAAJ;EACA;EACD;EACD;EACD;;EAED,SAAK,GAAL,CAAS,WAAT,GAAuB,CAAvB;EACA,GApJ2B;EAuJ5B;;;EACQ,EAAA,YAAY,CAAE,GAAF,EAAyB,EAAzB,EAAqC,EAArC,EAAiD,EAAjD,EAA6D,EAA7D,EACnB,EADmB,EACP,EADO,EACK,EADL,EACiB,EADjB,EAEnB,EAFmB,EAEP,EAFO,EAEK,EAFL,EAEiB,EAFjB,EAE2B;EAC9C,QAAI,GAAG,GAAG,KAAK,GAAf;EAEA,IAAA,EAAE,IAAI,GAAG,CAAC,KAAV;EACA,IAAA,EAAE,IAAI,GAAG,CAAC,MAAV;EACA,IAAA,EAAE,IAAI,GAAG,CAAC,KAAV;EACA,IAAA,EAAE,IAAI,GAAG,CAAC,MAAV;EACA,IAAA,EAAE,IAAI,GAAG,CAAC,KAAV;EACA,IAAA,EAAE,IAAI,GAAG,CAAC,MAAV;EAEA,IAAA,GAAG,CAAC,SAAJ;EACA,IAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,IAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,IAAA,GAAG,CAAC,MAAJ,CAAW,EAAX,EAAe,EAAf;EACA,IAAA,GAAG,CAAC,SAAJ;EAEA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EAEA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EACA,IAAA,EAAE,IAAI,EAAN;EAEA,QAAI,GAAG,GAAG,KAAK,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAApB,CAAV;EAAA;EAGC,IAAA,CAAC,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAhB,IAAsB,GAH3B;EAAA,QAIC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAhB,IAAsB,GAJ3B;EAAA,QAKC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAhB,IAAsB,GAL3B;EAAA,QAMC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAhB,IAAsB,GAN3B;EAAA;EASC,IAAA,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAT,GAAc,CAAC,GAAG,EATvB;EAAA,QAUC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAT,GAAc,CAAC,GAAG,EAVvB;EAYA,IAAA,GAAG,CAAC,IAAJ;EACA,IAAA,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;EACA,IAAA,GAAG,CAAC,IAAJ;EACA,IAAA,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB,CAAnB,EAAsB,CAAtB;EACA,IAAA,GAAG,CAAC,OAAJ;EACA;;EAEO,EAAA,qBAAqB,CAAE,IAAF,EAAc,MAAd,EAAwC,GAAxC,EAAoD;EAChF,QAAI,aAAa,GAAG,IAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,KAAvC;EACA,QAAI,SAAS,GAAG,IAAI,CAAC,KAArB;EACA,QAAI,WAAW,GAAG,MAAM,CAAC,KAAzB;EACA,QAAI,KAAK,GAAG,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAAxD;EACA,QAAI,UAAU,GAAG,GAAG,GAAG,KAAH,GAAW,CAA/B;EACA,QAAI,KAAK,GAAG,KAAK,SAAjB;EACA,IAAA,KAAK,CAAC,GAAN,CAAU,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UAA1D,EACC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UADjD,EAEC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UAFjD,EAGC,KAHD;EAKA,IAAA,MAAM,CAAC,oBAAP,CAA4B,IAAI,CAAC,IAAjC,EAAuC,KAAK,QAA5C,EAAsD,CAAtD,EAAyD,gBAAgB,CAAC,WAA1E;EAEA,QAAI,QAAQ,GAAG,KAAK,QAApB;EACA,QAAI,GAAG,GAAG,MAAM,CAAC,GAAjB;EAEA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EAEA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EAEA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EAEA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,GAAlB,CAAR,GAAiC,KAAK,CAAC,CAAvC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EACA,IAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAlB,CAAR,GAAgC,GAAG,CAAC,CAAD,CAAnC;EAEA,WAAO,QAAP;EACA;;EAEO,EAAA,mBAAmB,CAAE,IAAF,EAAc,IAAd,EAAoC,GAApC,EAAgD;EAC1E,QAAI,aAAa,GAAG,IAAI,CAAC,IAAL,CAAU,QAAV,CAAmB,KAAvC;EACA,QAAI,SAAS,GAAG,IAAI,CAAC,KAArB;EACA,QAAI,WAAW,GAAG,IAAI,CAAC,KAAvB;EACA,QAAI,KAAK,GAAG,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAAxD;EACA,QAAI,UAAU,GAAG,GAAG,GAAG,KAAH,GAAW,CAA/B;EACA,QAAI,KAAK,GAAG,KAAK,SAAjB;EACA,IAAA,KAAK,CAAC,GAAN,CAAU,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UAA1D,EACC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UADjD,EAEC,aAAa,CAAC,CAAd,GAAkB,SAAS,CAAC,CAA5B,GAAgC,WAAW,CAAC,CAA5C,GAAgD,UAFjD,EAGC,KAHD;EAKA,QAAI,WAAW,GAAG,IAAI,CAAC,mBAAL,GAA2B,CAA7C;EACA,QAAI,QAAQ,GAAG,KAAK,QAApB;EACA,QAAI,QAAQ,CAAC,MAAT,GAAkB,IAAI,CAAC,mBAA3B,EAAgD,KAAK,QAAL,GAAgB,QAAQ,GAAG,KAAK,CAAC,aAAN,CAAoB,IAAI,CAAC,mBAAzB,CAA3B;EAChD,IAAA,IAAI,CAAC,oBAAL,CAA0B,IAA1B,EAAgC,CAAhC,EAAmC,IAAI,CAAC,mBAAxC,EAA6D,QAA7D,EAAuE,CAAvE,EAA0E,gBAAgB,CAAC,WAA3F;EAEA,QAAI,GAAG,GAAG,IAAI,CAAC,GAAf;;EACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAf,EAAkB,CAAC,GAAG,CAA3B,EAA8B,CAAC,GAAG,WAAlC,EAA+C,CAAC,EAAhD,EAAoD;EACnD,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,KAAK,CAAC,CAAtB;EACA,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,KAAK,CAAC,CAAtB;EACA,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,KAAK,CAAC,CAAtB;EACA,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,KAAK,CAAC,CAAtB;EACA,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,GAAG,CAAC,CAAC,EAAF,CAAnB;EACA,MAAA,QAAQ,CAAC,CAAC,EAAF,CAAR,GAAgB,GAAG,CAAC,CAAC,EAAF,CAAnB;EACA,MAAA,CAAC,IAAI,CAAL;EACA;;EAED,WAAO,QAAP;EACA;;EApR2B;EACrB,gBAAA,CAAA,cAAA,GAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAjB;EACA,gBAAA,CAAA,WAAA,GAAc,IAAI,CAAJ,GAAQ,CAAtB;;EClCR;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAIzE,MAAO,aAAP,SAA6B,OAA7B,CAAoC;EACzC,EAAA,WAAA,CAAa,KAAb,EAAoC;EACnC,UAAM,KAAN;EACA;;EAED,EAAA,UAAU,CAAE,SAAF,EAA4B,SAA5B,EAAoD;;EAC9D,EAAA,QAAQ,CAAE,KAAF,EAAsB,KAAtB,EAAwC;;EAChD,EAAA,OAAO,GAAA;;EAPkC;;EC/B1C;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2B+E;EAKzE,MAAO,YAAP,SAA4B,gBAA5B,CAA4C;EACjD,EAAA,WAAA,CAAa,MAAA,GAAA,MAAuB,EAApC,EAAsC,UAAA,GAAyB,EAA/D,EAAmE,UAAA,GAAA,IAAnE,EAAmE;EAClE,UAAM,MAAN,EAAgC,KAAA,IAAK;EAAO,aAAI,IAAA,aAAA,CAAsB,KAAtB,CAAJ;EAA6B,KAAzE,EAAyE,UAAzE,EAAqF,UAArF;EACA;;EAHgD;;ECnBlD,IAAMy3B,sBAAsB,GAAG,IAAIC,OAAJ,EAA/B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;MACqBC;;;;;EASnB,iBAAYC,KAAZ,EAAmB;EAAA;;EAAA;;EACjB,8BAAMA,KAAN;;EADiB,mEAPJ,EAOI;;EAAA,+DANR,IAMQ;;EAAA,+DALR,KAKQ;;EAAA,+DAHRC,IAAI,CAACC,GAAL,EAGQ;;EAAA,kEAFLD,IAAI,CAACC,GAAL,EAEK;;EAAA,oEAcH,YAAyF;EAAA,UAAxFllB,aAAwF,uEAAxE,MAAKA,aAAmE;EAAA,UAApDnQ,IAAoD,uEAA7C,MAAKs1B,SAAwC;EAAA,UAA7BvI,QAA6B,uEAAlB,MAAKA,QAAa;EACvG,YAAKuI,SAAL,GAAiBt1B,IAAjB;;EACA,UAAI8E,IAAI,GAAG,MAAKywB,YAAL,CAAkBplB,aAAlB,EAAiC4c,QAAjC,CAAX,CAFuG;;;EAGvG,YAAKyI,KAAL,GAAa1wB,IAAI,CAAC0wB,KAAlB;EACA,YAAK31B,QAAL,GAAgBiF,IAAI,CAACjF,QAArB;EACA,YAAK41B,MAAL,GAAc3wB,IAAI,CAAC2wB,MAAnB;EACA,YAAKC,QAAL,GAAgB,IAAhB;EACA,YAAK51B,QAAL,GAAgBs1B,IAAI,CAACC,GAAL,KAAa,IAA7B;EACA,YAAKM,WAAL,GAAmBP,IAAI,CAACC,GAAL,KAAa,IAAhC;EACA,YAAKO,cAAL,GAAsB9wB,IAAI,CAACipB,UAA3B;EACD,KAxBkB;;EAGjB,UAAK5d,aAAL,GAAqBglB,KAAK,CAAC/nB,SAAN,IAAmB,MAAxC;EACA,UAAK2f,QAAL,GAAgBoI,KAAK,CAACxe,IAAN,IAAc,SAA9B;EACA,UAAK2e,SAAL,GAAiBH,KAAK,CAACG,SAAN,IAAmBO,QAApC,CALiB;;EAOjB,UAAKC,IAAL;;EAPiB;EAQlB;;;;aAED,iCAAwB;EACtB,aAAO,KAAP;EACD;;;aAcD,gBAAO;EACL,WAAKrgB,YAAL,GAAoB,IAAIsgB,YAAJ,CAAiB,KAAKC,aAAtB,CAApB;EACA,WAAKvgB,YAAL,CAAkB6H,QAAlB,CAA2B,KAAK6X,KAAL,CAAW1e,KAAtC;EACA,WAAKhB,YAAL,CAAkB6H,QAAlB,CAA2B,KAAK6X,KAAL,CAAW3F,IAAtC;EACA,WAAK/Z,YAAL,CAAkBiI,WAAlB,CAA8B,KAAKyX,KAAL,CAAWriB,KAAzC;EACD;;;aAED,oBAAWmjB,GAAX,EAAgB;EACd,WAAKA,GAAL,GAAWA,GAAX;EACA,WAAKC,QAAL,GAAgBlB,sBAAsB,CAACpf,GAAvB,CAA2B,KAAKqgB,GAAhC,CAAhB;;EACA,UAAI,CAAC,KAAKC,QAAV,EAAoB;EAClB,aAAKA,QAAL,GAAgB,IAAIC,gBAAJ,CAAqBF,GAArB,CAAhB;EACAjB,QAAAA,sBAAsB,CAACt8B,GAAvB,CAA2B,KAAKu9B,GAAhC,EAAqC,KAAKC,QAA1C;EACD;EACF;;;aAED,6BAAoB;EAAA;;EAClB,UAAIE,IAAI,GAAG,KAAKC,GAAL,CAASD,IAApB;EACAA,MAAAA,IAAI,CAACE,YAAL;EAEAF,MAAAA,IAAI,CAACG,OAAL,CAAa,CACX;EACEC,QAAAA,eAAe,EAAE;EADnB,OADW,EAIX;EACEA,QAAAA,eAAe,EAAE;EADnB,OAJW,CAAb,EAOG;EACDl3B,QAAAA,QAAQ,EAAE,KADT;EAEDm3B,QAAAA,UAAU,EAAEZ;EAFX,OAPH;;EAYAO,MAAAA,IAAI,CAACM,MAAL,GAAc,UAACC,UAAD,EAAaC,EAAb,EAAiBX,GAAjB,EAAyB;EACrC,YAAI,CAAC,MAAI,CAACR,MAAV,EAAkB;EAChB;EACD;;EACD,YAAIoB,OAAO,GAAG,MAAI,CAAC1B,KAAL,CAAW0B,OAAzB;EACA,YAAIn/B,IAAI,GAAG0+B,IAAI,CAACU,gBAAL,CAAsB,CAAC,OAAD,EAAU,QAAV,CAAtB,CAAX,CALqC;;EAOrC,YAAIt8B,CAAC,GAAG,MAAI,CAACi7B,MAAL,CAAY/H,MAAZ,CAAmBlzB,CAA3B;EACA,YAAII,CAAC,GAAG,MAAI,CAAC66B,MAAL,CAAY/H,MAAZ,CAAmB9yB,CAA3B;EACA,YAAI2Y,KAAK,GAAG,MAAI,CAACkiB,MAAL,CAAY/9B,IAAZ,CAAiB8C,CAA7B;EACA,YAAIgZ,MAAM,GAAG,MAAI,CAACiiB,MAAL,CAAY/9B,IAAZ,CAAiBkD,CAA9B;EACA,YAAIm8B,OAAO,GAAGv8B,CAAC,GAAG+Y,KAAK,GAAG,GAA1B;EACA,YAAIyjB,OAAO,GAAGp8B,CAAC,GAAG4Y,MAAM,GAAG,GAA3B,CAZqC;;EAcrC,QAAA,MAAI,CAACmiB,WAAL,GAAmBP,IAAI,CAACC,GAAL,KAAa,IAAhC;EAEA,YAAInqB,KAAK,GAAG,MAAI,CAACyqB,WAAL,GAAmB,MAAI,CAAC71B,QAApC;EACA,QAAA,MAAI,CAACA,QAAL,GAAgB,MAAI,CAAC61B,WAArB,CAjBqC;EAmBrC;;EACAM,QAAAA,GAAG,CAAC5L,SAAJ,CAAc+L,IAAI,CAACpd,EAAnB,EAAuBod,IAAI,CAACnd,EAA5B;EACA,YAAI4M,KAAK,GAAG,CAAZ;;EACA,YAAIgR,OAAJ,EAAa;EACX,cAAII,GAAG,GAAG1jB,KAAK,GAAG7b,IAAI,CAAC6b,KAAvB;EACA,cAAI2jB,GAAG,GAAG1jB,MAAM,GAAG9b,IAAI,CAAC8b,MAAxB;EACAqS,UAAAA,KAAK,GAAGgR,OAAO,KAAK,OAAZ,GAAsB58B,IAAI,CAACJ,GAAL,CAASo9B,GAAT,EAAcC,GAAd,CAAtB,GAA2Cj9B,IAAI,CAACH,GAAL,CAASm9B,GAAT,EAAcC,GAAd,CAAnD;;EACA,cAAIrR,KAAK,KAAK,CAAd,EAAiB;EACfoQ,YAAAA,GAAG,CAACpQ,KAAJ,CAAU,IAAIA,KAAd,EAAqB,IAAIA,KAAzB;EACD,WANU;;EASZ;;EACDoQ,QAAAA,GAAG,CAAC5L,SAAJ,CAAc,CAAC0M,OAAf,EAAwB,CAACC,OAAzB;EACAf,QAAAA,GAAG,CAAC5L,SAAJ,CAAc3yB,IAAI,CAAC6b,KAAL,GAAa,GAAb,GAAmBsS,KAAjC,EAAwCnuB,IAAI,CAAC8b,MAAL,GAAc,GAAd,GAAoBqS,KAA5D;;EAEA,YAAI,CAAC,MAAI,CAACqQ,QAAV,EAAoB;EAClB,UAAA,MAAI,CAACiB,UAAL,CAAgBlB,GAAhB;EACD;;EACD,YAAI,MAAI,CAACP,QAAT,EAAmB;EACjB,cAAG,MAAI,CAACP,KAAL,CAAWiC,KAAd,EAAqB;EACnB,YAAA,MAAI,CAAClB,QAAL,CAAcmB,cAAd,GAA+B,IAA/B;EACD;;EACD,cAAG,MAAI,CAAClC,KAAL,CAAWmC,QAAd,EAAwB;EACtB,YAAA,MAAI,CAACpB,QAAL,CAAcqB,iBAAd,GAAkC,IAAlC;EACD;;EACD,UAAA,MAAI,CAAC/B,KAAL,CAAWvqB,MAAX,CAAkBC,KAAlB;;EACA,UAAA,MAAI,CAACsqB,KAAL,CAAW35B,KAAX,CAAiB,MAAI,CAACgE,QAAtB;;EACA,UAAA,MAAI,CAACA,QAAL,CAAciZ,oBAAd;;EACA,UAAA,MAAI,CAACod,QAAL,CAAcsB,IAAd,CAAmB,MAAI,CAAC33B,QAAxB;EACD,SAjDoC;;EAmDtC,OAnDD;EAoDD;;;aAED,sBAAa43B,gBAAb,EAA+B9gB,IAA/B,EAAqC;EAAA;EAAA;EAAA;;EACnC,UAAIA,IAAI,KAAK/D,SAAb,EAAwB+D,IAAI,GAAG,SAAP;EACxB,UAAIlB,YAAY,GAAG,KAAKA,YAAxB;EACA,UAAIgB,KAAK,GAAG,IAAI5C,YAAJ,CAAiB4B,YAAY,CAAC2J,OAAb,CAAqB,KAAK+V,KAAL,CAAW1e,KAAhC,CAAjB,CAAZ;EACAA,MAAAA,KAAK,CAACjB,WAAN,CAAkBC,YAAlB,EAAgC,KAAK0f,KAAL,CAAWriB,KAA3C;EAEA,UAAI4kB,WAAW,GAAG,IAAIlhB,qBAAJ,CAA0BC,KAA1B,CAAlB;EACA,UAAIkhB,YAAY,GAAG,IAAIvI,YAAJ,CAAiBsI,WAAjB,CAAnB;EAEA,UAAItnB,YAAY,GAAGunB,YAAY,CAACpI,gBAAb,CAA8B9Z,YAAY,CAAC2J,OAAb,CAAqB,KAAK+V,KAAL,CAAW3F,IAAhC,CAA9B,CAAnB;EACA,UAAI3vB,QAAQ,GAAG,IAAI+qB,QAAJ,CAAaxa,YAAb,CAAf;EACAvQ,MAAAA,QAAQ,CAACW,MAAT,GAAkB,CAAC,CAAnB;EACA,UAAIi1B,MAAM,GAAGmC,eAAe,CAAC/3B,QAAD,CAA5B;EACAA,MAAAA,QAAQ,CAACitB,aAAT,CAAuBnW,IAAvB;EAGA,UAAIkhB,cAAc,GAAG,IAAIztB,cAAJ,CAAmB,IAAIgI,kBAAJ,CAAuBvS,QAAQ,CAACiF,IAAhC,CAAnB,CAArB;EACA+yB,MAAAA,cAAc,CAAC3nB,YAAf,CAA4B,CAA5B,EAA+BunB,gBAA/B,EAAiD,CAAjD;EACA,iDAAKtC,KAAL,EAAW2C,OAAX,8FAAqBL,gBAArB,EAAuC,KAAKnC,SAA5C;EACAuC,MAAAA,cAAc,CAACtmB,WAAf,CAA2B;EACzB9B,QAAAA,QAAQ,EAAE,oBAAM;EAAA;;EACd,UAAA,MAAI,CAAC6lB,SAAL;EACA,iDAAA,MAAI,CAACH,KAAL,EAAW4C,MAAX,+FAAoBN,gBAApB,EAAsC,MAAI,CAACnC,SAA3C;;EAEA,cAAI,MAAI,CAACA,SAAL,GAAiB,CAArB,EAAwB;EACtBuC,YAAAA,cAAc,CAAC3nB,YAAf,CAA4B,CAA5B,EAA+BunB,gBAA/B,EAAiD,CAAjD;EACD,WAFD,MAEO;EAAA;;EACL,mDAAA,MAAI,CAACtC,KAAL,EAAW6C,KAAX,8FAAmBP,gBAAnB;EACD;EACF;EAVwB,OAA3B;EAaA,aAAO;EAAE53B,QAAAA,QAAQ,EAAEA,QAAZ;EAAsB21B,QAAAA,KAAK,EAAEqC,cAA7B;EAA6CpC,QAAAA,MAAM,EAAEA;EAArD,OAAP;EACD;;;aAED,kBAAS;EACP,aAAOwC;EAAK,QAAA,GAAG,EAAC,MAAT;EAAgB,QAAA,KAAK,EAAE,KAAK9C,KAAL,CAAW+C,KAAX,IAAoB;EAA3C,SACLD;EAAW,QAAA,GAAG,EAAC,MAAf;EAAsB,QAAA,KAAK,EAAE;EAC3B1kB,UAAAA,KAAK,EAAE,MADoB;EAE3BC,UAAAA,MAAM,EAAE;EAFmB;EAA7B,QADK,CAAP;EAMD;;;;IAnKgCykB,yBAAK,CAACE;;EAsKzC,SAASP,eAAT,CAAyB/3B,QAAzB,EAAmC;EACjCA,EAAAA,QAAQ,CAAC8Y,cAAT;EACA9Y,EAAAA,QAAQ,CAACiZ,oBAAT;EACA,MAAI4U,MAAM,GAAG,IAAIzuB,OAAJ,EAAb;EACA,MAAIvH,IAAI,GAAG,IAAIuH,OAAJ,EAAX;EACAY,EAAAA,QAAQ,CAAC4tB,SAAT,CAAmBC,MAAnB,EAA2Bh2B,IAA3B,EAAiC,EAAjC;EACA,SAAO;EAAEg2B,IAAAA,MAAM,EAAEA,MAAV;EAAkBh2B,IAAAA,IAAI,EAAEA;EAAxB,GAAP;EACD;;;;;;;;"}